
V4LibTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001802  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000106  00802000  00001802  00001896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000881  00802106  00802106  0000199c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bf34  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f58  00000000  00000000  0000dcac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d7e  00000000  00000000  00011c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a40  00000000  00000000  00013984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f70  00000000  00000000  000143c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003147  00000000  00000000  00019334  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0001c47b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 01 	jmp	0x268	; 0x268 <__ctors_end>
       4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
       8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
       c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      10:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      14:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      18:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      1c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      20:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      24:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      28:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      2c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      30:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      34:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      38:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_14>
      3c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      40:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      44:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      48:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      4c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      50:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__vector_20>
      54:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      58:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      5c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      60:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      64:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      68:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      6c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      70:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      74:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      78:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      7c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      80:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      84:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      88:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      8c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      90:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      94:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      98:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      9c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      a0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      a4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      a8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      ac:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      b0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      b4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      b8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      bc:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      c0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      c4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      c8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      cc:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      d0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      d4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      d8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      dc:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      e0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      e4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      e8:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_58>
      ec:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      f0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      f4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      f8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      fc:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     100:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     104:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     108:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     10c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     110:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     114:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     118:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     11c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     120:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     124:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     128:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     12c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     130:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     134:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     138:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     13c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     140:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     144:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     148:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     14c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     150:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     154:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     158:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     15c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     160:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_88>
     164:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     168:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     16c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     170:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     174:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     178:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     17c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     180:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     184:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     188:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     18c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     190:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     194:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     198:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     19c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1a0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1a4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1a8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1ac:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1b0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1b4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1b8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1bc:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1c0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1c4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1c8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1cc:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1d0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1d4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1d8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1dc:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1e0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1e4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1e8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1ec:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1f0:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1f4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
     1f8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 48 06 	jmp	0xc90	; 0xc90 <_GLOBAL__sub_I_pinsList>
     200:	0c 94 23 08 	jmp	0x1046	; 0x1046 <_ZN7IOClass6toggleEv>
     204:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <_ZN12MatrixKeypad6notifyEv>
     208:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_ZN5Print5writeEPKhj>
     20c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <_ZN5Print17availableForWriteEv>
     210:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_ZN5Print5flushEv>
     214:	0c 94 c0 03 	jmp	0x780	; 0x780 <_ZN14HardwareSerial5writeEh>
     218:	0c 94 5d 05 	jmp	0xaba	; 0xaba <_ZN17SingleInputKeypad10registerObEP11KeyObserver>
     21c:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <_ZN14HardwareSerial4peekEv>
     220:	0c 94 46 08 	jmp	0x108c	; 0x108c <_ZN7IOClass3offEv>
     224:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <_GLOBAL__sub_I_pKeypad>
     228:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <_ZN7IOClass9readstateEv>
     22c:	0c 94 39 08 	jmp	0x1072	; 0x1072 <_ZN7IOClass2onEv>
     230:	0c 94 97 08 	jmp	0x112e	; 0x112e <_ZN5logic12onKeyPressedEh>
     234:	0c 94 91 06 	jmp	0xd22	; 0xd22 <_ZN12MatrixKeypad10registerObEP11KeyObserver>
     238:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <_ZN5logic9onKeyHoldEh>
     23c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <_ZN17SingleInputKeypad4scanEv>
     240:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <_ZN5logic12onKeyReleaseEh>
     244:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <_ZN12MatrixKeypad4scanEv>
     248:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_ZL14printf_putcharcP6__file>
     24c:	0c 94 07 08 	jmp	0x100e	; 0x100e <_GLOBAL__sub_I_rows>
     250:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <_GLOBAL__sub_I_Serial3>
     254:	0c 94 cc 03 	jmp	0x798	; 0x798 <_ZN14HardwareSerial9availableEv>
     258:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <_ZN17SingleInputKeypad6notifyEv>
     25c:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_ZN14HardwareSerial4readEv>

00000260 <__ctors_start>:
     260:	de 04       	cpc	r13, r14
     262:	48 06       	cpc	r4, r24
     264:	07 08       	sbc	r0, r7
     266:	1c 09       	sbc	r17, r12

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df e3       	ldi	r29, 0x3F	; 63
     272:	de bf       	out	0x3e, r29	; 62
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0c bf       	out	0x3c, r16	; 60
     278:	18 be       	out	0x38, r1	; 56
     27a:	19 be       	out	0x39, r1	; 57
     27c:	1a be       	out	0x3a, r1	; 58
     27e:	1b be       	out	0x3b, r1	; 59

00000280 <__do_copy_data>:
     280:	11 e2       	ldi	r17, 0x21	; 33
     282:	a0 e0       	ldi	r26, 0x00	; 0
     284:	b0 e2       	ldi	r27, 0x20	; 32
     286:	e2 e0       	ldi	r30, 0x02	; 2
     288:	f8 e1       	ldi	r31, 0x18	; 24
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	0b bf       	out	0x3b, r16	; 59
     28e:	02 c0       	rjmp	.+4      	; 0x294 <__do_copy_data+0x14>
     290:	07 90       	elpm	r0, Z+
     292:	0d 92       	st	X+, r0
     294:	a6 30       	cpi	r26, 0x06	; 6
     296:	b1 07       	cpc	r27, r17
     298:	d9 f7       	brne	.-10     	; 0x290 <__do_copy_data+0x10>
     29a:	1b be       	out	0x3b, r1	; 59

0000029c <__do_clear_bss>:
     29c:	29 e2       	ldi	r18, 0x29	; 41
     29e:	a6 e0       	ldi	r26, 0x06	; 6
     2a0:	b1 e2       	ldi	r27, 0x21	; 33
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <.do_clear_bss_start>

000002a4 <.do_clear_bss_loop>:
     2a4:	1d 92       	st	X+, r1

000002a6 <.do_clear_bss_start>:
     2a6:	a7 38       	cpi	r26, 0x87	; 135
     2a8:	b2 07       	cpc	r27, r18
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <.do_clear_bss_loop>

000002ac <__do_global_ctors>:
     2ac:	11 e0       	ldi	r17, 0x01	; 1
     2ae:	c4 e3       	ldi	r28, 0x34	; 52
     2b0:	d1 e0       	ldi	r29, 0x01	; 1
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <__do_global_ctors+0x16>
     2b6:	21 97       	sbiw	r28, 0x01	; 1
     2b8:	01 09       	sbc	r16, r1
     2ba:	80 2f       	mov	r24, r16
     2bc:	fe 01       	movw	r30, r28
     2be:	0e 94 42 09 	call	0x1284	; 0x1284 <__tablejump2__>
     2c2:	c0 33       	cpi	r28, 0x30	; 48
     2c4:	d1 07       	cpc	r29, r17
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	08 07       	cpc	r16, r24
     2ca:	a9 f7       	brne	.-22     	; 0x2b6 <__do_global_ctors+0xa>
     2cc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <main>
     2d0:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <_exit>

000002d4 <__bad_interrupt>:
     2d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d8 <_ZN5Print17availableForWriteEv>:
size_t Print::println(const Printable &x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	08 95       	ret

000002de <_ZN5Print5flushEv>:
     2de:	08 95       	ret

000002e0 <_ZN5Print5writeEPKhj>:
     2e0:	cf 92       	push	r12
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	41 15       	cp	r20, r1
     2f2:	51 05       	cpc	r21, r1
     2f4:	c1 f0       	breq	.+48     	; 0x326 <_ZN5Print5writeEPKhj+0x46>
     2f6:	6a 01       	movw	r12, r20
     2f8:	8c 01       	movw	r16, r24
     2fa:	e6 2e       	mov	r14, r22
     2fc:	f7 2e       	mov	r15, r23
     2fe:	c0 e0       	ldi	r28, 0x00	; 0
     300:	d0 e0       	ldi	r29, 0x00	; 0
     302:	d7 01       	movw	r26, r14
     304:	6d 91       	ld	r22, X+
     306:	7d 01       	movw	r14, r26
     308:	d8 01       	movw	r26, r16
     30a:	ed 91       	ld	r30, X+
     30c:	fc 91       	ld	r31, X
     30e:	01 90       	ld	r0, Z+
     310:	f0 81       	ld	r31, Z
     312:	e0 2d       	mov	r30, r0
     314:	c8 01       	movw	r24, r16
     316:	19 95       	eicall
     318:	89 2b       	or	r24, r25
     31a:	39 f0       	breq	.+14     	; 0x32a <_ZN5Print5writeEPKhj+0x4a>
     31c:	21 96       	adiw	r28, 0x01	; 1
     31e:	cc 16       	cp	r12, r28
     320:	dd 06       	cpc	r13, r29
     322:	79 f7       	brne	.-34     	; 0x302 <_ZN5Print5writeEPKhj+0x22>
     324:	02 c0       	rjmp	.+4      	; 0x32a <_ZN5Print5writeEPKhj+0x4a>
     326:	c0 e0       	ldi	r28, 0x00	; 0
     328:	d0 e0       	ldi	r29, 0x00	; 0
     32a:	ce 01       	movw	r24, r28
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <_ZL14printf_putcharcP6__file>:
     33e:	fb 01       	movw	r30, r22
     340:	a4 85       	ldd	r26, Z+12	; 0x0c
     342:	b5 85       	ldd	r27, Z+13	; 0x0d
     344:	ed 91       	ld	r30, X+
     346:	fc 91       	ld	r31, X
     348:	11 97       	sbiw	r26, 0x01	; 1
     34a:	01 90       	ld	r0, Z+
     34c:	f0 81       	ld	r31, Z
     34e:	e0 2d       	mov	r30, r0
     350:	68 2f       	mov	r22, r24
     352:	cd 01       	movw	r24, r26
     354:	19 95       	eicall
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	08 95       	ret

0000035c <_ZN5Print6printfEPKcz>:
  ((class Print *)(fdev_get_udata(fp)))->write((uint8_t)c);
  return 0;
}

int16_t Print::printf(const char *format, ...)
{
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	2e 97       	sbiw	r28, 0x0e	; 14
     366:	cd bf       	out	0x3d, r28	; 61
     368:	de bf       	out	0x3e, r29	; 62
  FILE f;
  va_list ap;

  fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
     36a:	8f e9       	ldi	r24, 0x9F	; 159
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	89 87       	std	Y+9, r24	; 0x09
     370:	9a 87       	std	Y+10, r25	; 0x0a
     372:	1b 86       	std	Y+11, r1	; 0x0b
     374:	1c 86       	std	Y+12, r1	; 0x0c
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	8c 83       	std	Y+4, r24	; 0x04
  fdev_set_udata(&f, this);
     37a:	8c 89       	ldd	r24, Y+20	; 0x14
     37c:	9d 89       	ldd	r25, Y+21	; 0x15
     37e:	8d 87       	std	Y+13, r24	; 0x0d
     380:	9e 87       	std	Y+14, r25	; 0x0e
  va_start(ap, format);
  return vfprintf(&f, format, ap);
     382:	ae 01       	movw	r20, r28
     384:	48 5e       	subi	r20, 0xE8	; 232
     386:	5f 4f       	sbci	r21, 0xFF	; 255
     388:	6e 89       	ldd	r22, Y+22	; 0x16
     38a:	7f 89       	ldd	r23, Y+23	; 0x17
     38c:	ce 01       	movw	r24, r28
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	0e 94 4b 09 	call	0x1296	; 0x1296 <vfprintf>
}
     394:	2e 96       	adiw	r28, 0x0e	; 14
     396:	cd bf       	out	0x3d, r28	; 61
     398:	de bf       	out	0x3e, r29	; 62
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <initTimer10Ms>:

	// Note: The correct PORTC direction for the Compare Channels
	// outputs is configured in the ports_init function.

	// Save interrupts enabled/disabled state
	s=SREG;
     3a0:	9f b7       	in	r25, 0x3f	; 63
	// Disable interrupts
	cli();
     3a2:	f8 94       	cli

	// Disable and reset the timer/counter just to be sure
	tc_disable(tc_regs[timerNumber]);
     3a4:	e8 2f       	mov	r30, r24
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e0 50       	subi	r30, 0x00	; 0
     3ae:	f0 4e       	sbci	r31, 0xE0	; 224
     3b0:	a0 81       	ld	r26, Z
     3b2:	b1 81       	ldd	r27, Z+1	; 0x01


void tc_disable(TC0_t *ptc)
{
	// Timer/Counter off
	ptc->CTRLA = TC_CLKSEL_OFF_gc;
     3b4:	1c 92       	st	X, r1
	// Issue a reset command
	ptc->CTRLFSET = TC_CMD_RESET_gc;
     3b6:	8c e0       	ldi	r24, 0x0C	; 12
     3b8:	19 96       	adiw	r26, 0x09	; 9
     3ba:	8c 93       	st	X, r24
	cli();

	// Disable and reset the timer/counter just to be sure
	tc_disable(tc_regs[timerNumber]);
	// Clock source: ClkPer/1
	tc_regs[timerNumber]->CTRLA=TC_CLKSEL_DIV1_gc;
     3bc:	a0 81       	ld	r26, Z
     3be:	b1 81       	ldd	r27, Z+1	; 0x01
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	8c 93       	st	X, r24
	// Mode: Normal Operation, Overflow Int./Event on TOP
	// Compare/Capture on channel A: Off
	// Compare/Capture on channel B: Off
	tc_regs[timerNumber]->CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
     3c4:	a0 81       	ld	r26, Z
     3c6:	b1 81       	ldd	r27, Z+1	; 0x01
     3c8:	11 96       	adiw	r26, 0x01	; 1
     3ca:	1c 92       	st	X, r1
	TC_WGMODE_NORMAL_gc;
	// Capture event source: None
	// Capture event action: None
	tc_regs[timerNumber]->CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     3cc:	a0 81       	ld	r26, Z
     3ce:	b1 81       	ldd	r27, Z+1	; 0x01
     3d0:	13 96       	adiw	r26, 0x03	; 3
     3d2:	1c 92       	st	X, r1

	// Set Timer/Counter in Normal mode
	tc_regs[timerNumber]->CTRLE=TC_BYTEM_NORMAL_gc;
     3d4:	a0 81       	ld	r26, Z
     3d6:	b1 81       	ldd	r27, Z+1	; 0x01
     3d8:	14 96       	adiw	r26, 0x04	; 4
     3da:	1c 92       	st	X, r1

	// Overflow interrupt: High Level
	// Error interrupt: Disabled
	tc_regs[timerNumber]->INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_HI_gc;
     3dc:	a0 81       	ld	r26, Z
     3de:	b1 81       	ldd	r27, Z+1	; 0x01
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	16 96       	adiw	r26, 0x06	; 6
     3e4:	8c 93       	st	X, r24

	// Compare/Capture channel A interrupt: Disabled
	// Compare/Capture channel B interrupt: Disabled
	tc_regs[timerNumber]->INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     3e6:	a0 81       	ld	r26, Z
     3e8:	b1 81       	ldd	r27, Z+1	; 0x01
     3ea:	17 96       	adiw	r26, 0x07	; 7
     3ec:	1c 92       	st	X, r1

	// High resolution extension: Off
	tc_regs[timerNumber]->CTRLA&= ~HIRES_HREN1_bm;
     3ee:	a0 81       	ld	r26, Z
     3f0:	b1 81       	ldd	r27, Z+1	; 0x01
     3f2:	8c 91       	ld	r24, X
     3f4:	8d 7f       	andi	r24, 0xFD	; 253
     3f6:	8c 93       	st	X, r24

	// Clear the interrupt flags
	tc_regs[timerNumber]->INTFLAGS=TCC1.INTFLAGS;
     3f8:	01 90       	ld	r0, Z+
     3fa:	f0 81       	ld	r31, Z
     3fc:	e0 2d       	mov	r30, r0
     3fe:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <__TEXT_REGION_LENGTH__+0x70084c>
     402:	84 87       	std	Z+12, r24	; 0x0c
	// Set Counter register
	tc_regs[timerNumber]->CNT=0x0000;
     404:	10 a2       	std	Z+32, r1	; 0x20
     406:	11 a2       	std	Z+33, r1	; 0x21
	// Set Period register
	tc_regs[timerNumber]->PER=0x4E1F;
     408:	2f e1       	ldi	r18, 0x1F	; 31
     40a:	3e e4       	ldi	r19, 0x4E	; 78
     40c:	26 a3       	std	Z+38, r18	; 0x26
     40e:	37 a3       	std	Z+39, r19	; 0x27
	// Set channel A Compare/Capture register
	tc_regs[timerNumber]->CCA=0x0000;
     410:	10 a6       	std	Z+40, r1	; 0x28
     412:	11 a6       	std	Z+41, r1	; 0x29
	// Set channel B Compare/Capture register
	tc_regs[timerNumber]->CCB=0x0000;
     414:	12 a6       	std	Z+42, r1	; 0x2a
     416:	13 a6       	std	Z+43, r1	; 0x2b

	// Restore interrupts enabled/disabled state
	SREG=s;
     418:	9f bf       	out	0x3f, r25	; 63
	sei();
     41a:	78 94       	sei
     41c:	08 95       	ret

0000041e <clockConfig>:


void clockConfig(void){
	unsigned char n,s;
	// Save interrupts enabled/disabled state
	s=SREG;
     41e:	9f b7       	in	r25, 0x3f	; 63
	// Disable interrupts
	cli();
     420:	f8 94       	cli

	// Internal 32 kHz RC oscillator initialization
	// Enable the internal 32 kHz RC oscillator
	OSC.CTRL|=OSC_RC32KEN_bm;
     422:	e0 e5       	ldi	r30, 0x50	; 80
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	84 60       	ori	r24, 0x04	; 4
     42a:	80 83       	st	Z, r24
	// Wait for the internal 32 kHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC32KRDY_bm)==0);
     42c:	81 81       	ldd	r24, Z+1	; 0x01
     42e:	82 ff       	sbrs	r24, 2
     430:	fd cf       	rjmp	.-6      	; 0x42c <clockConfig+0xe>

	// Internal 32 MHz RC oscillator initialization
	// Enable the internal 32 MHz RC oscillator
	OSC.CTRL|=OSC_RC32MEN_bm;
     432:	e0 e5       	ldi	r30, 0x50	; 80
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	82 60       	ori	r24, 0x02	; 2
     43a:	80 83       	st	Z, r24
	// System Clock prescalers B & C division factors: B:1, C:1
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
     43c:	a0 e4       	ldi	r26, 0x40	; 64
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	11 96       	adiw	r26, 0x01	; 1
     442:	8c 91       	ld	r24, X
     444:	11 97       	sbiw	r26, 0x01	; 1
     446:	80 78       	andi	r24, 0x80	; 128
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
	CCP=CCP_IOREG_gc;
     448:	28 ed       	ldi	r18, 0xD8	; 216
     44a:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
     44c:	11 96       	adiw	r26, 0x01	; 1
     44e:	8c 93       	st	X, r24

	// Internal 32 MHz RC osc. calibration reference clock source: 32.768 kHz Internal Osc.
	OSC.DFLLCTRL=(OSC.DFLLCTRL & (~(OSC_RC32MCREF_gm | OSC_RC2MCREF_bm))) | OSC_RC32MCREF_RC32K_gc;
     450:	86 81       	ldd	r24, Z+6	; 0x06
     452:	88 7f       	andi	r24, 0xF8	; 248
     454:	86 83       	std	Z+6, r24	; 0x06
	// Enable the auto-calibration of the internal 32 MHz RC oscillator
	DFLLRC32M.CTRL|=DFLL_ENABLE_bm;
     456:	e0 e6       	ldi	r30, 0x60	; 96
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	80 83       	st	Z, r24

	// Wait for the internal 32 MHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC32MRDY_bm)==0);
     460:	e0 e5       	ldi	r30, 0x50	; 80
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	81 81       	ldd	r24, Z+1	; 0x01
     466:	81 ff       	sbrs	r24, 1
     468:	fd cf       	rjmp	.-6      	; 0x464 <clockConfig+0x46>

	// Select the system clock source: 32 MHz Internal RC Osc.
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC32M_gc;
     46a:	e0 e4       	ldi	r30, 0x40	; 64
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	88 7f       	andi	r24, 0xF8	; 248
     472:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
     474:	28 ed       	ldi	r18, 0xD8	; 216
     476:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
     478:	80 83       	st	Z, r24

	// Disable the unused oscillators: 2 MHz, external clock/crystal oscillator, PLL
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
     47a:	e0 e5       	ldi	r30, 0x50	; 80
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	86 7e       	andi	r24, 0xE6	; 230
     482:	80 83       	st	Z, r24

	// ClkPer output disabled
	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
     484:	e0 eb       	ldi	r30, 0xB0	; 176
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	84 81       	ldd	r24, Z+4	; 0x04
     48a:	80 7f       	andi	r24, 0xF0	; 240
     48c:	84 83       	std	Z+4, r24	; 0x04
	// Restore interrupts enabled/disabled state
	SREG=s;
     48e:	9f bf       	out	0x3f, r25	; 63
     490:	08 95       	ret

00000492 <millisTimerConfig>:

	// Note: The correct PORTC direction for the Compare Channels
	// outputs is configured in the ports_init function.

	// Save interrupts enabled/disabled state
	s=SREG;
     492:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
     494:	f8 94       	cli


void tc_disable(TC0_t *ptc)
{
	// Timer/Counter off
	ptc->CTRLA = TC_CLKSEL_OFF_gc;
     496:	e0 e0       	ldi	r30, 0x00	; 0
     498:	f8 e0       	ldi	r31, 0x08	; 8
     49a:	10 82       	st	Z, r1
	// Issue a reset command
	ptc->CTRLFSET = TC_CMD_RESET_gc;
     49c:	8c e0       	ldi	r24, 0x0C	; 12
     49e:	81 87       	std	Z+9, r24	; 0x09
	cli();

	// Disable and reset the timer/counter just to be sure
	tc_disable(&TCC0);
	// Clock source: ClkPer/1
	TCC0.CTRLA=TC_CLKSEL_DIV1_gc;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 83       	st	Z, r24
	// Mode: Normal Operation, Overflow Int./Event on TOP
	// Compare/Capture on channel A: Off
	// Compare/Capture on channel B: Off
	// Compare/Capture on channel C: Off
	// Compare/Capture on channel D: Off
	TCC0.CTRLB=(0<<TC0_CCDEN_bp) | (0<<TC0_CCCEN_bp) | (0<<TC0_CCBEN_bp) | (0<<TC0_CCAEN_bp) |
     4a4:	11 82       	std	Z+1, r1	; 0x01
	TC_WGMODE_NORMAL_gc;
	// Capture event source: None
	// Capture event action: None
	TCC0.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     4a6:	13 82       	std	Z+3, r1	; 0x03

	// Set Timer/Counter in Normal mode
	TCC0.CTRLE=TC_BYTEM_NORMAL_gc;
     4a8:	14 82       	std	Z+4, r1	; 0x04

	// Overflow interrupt: High Level
	// Error interrupt: Disabled
	TCC0.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_HI_gc;
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	86 83       	std	Z+6, r24	; 0x06

	// Compare/Capture channel A interrupt: Disabled
	// Compare/Capture channel B interrupt: Disabled
	// Compare/Capture channel C interrupt: Disabled
	// Compare/Capture channel D interrupt: Disabled
	TCC0.INTCTRLB=TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     4ae:	17 82       	std	Z+7, r1	; 0x07

	// High resolution extension: Off
	HIRESC.CTRLA&= ~HIRES_HREN0_bm;
     4b0:	a0 e9       	ldi	r26, 0x90	; 144
     4b2:	b8 e0       	ldi	r27, 0x08	; 8
     4b4:	8c 91       	ld	r24, X
     4b6:	8e 7f       	andi	r24, 0xFE	; 254
     4b8:	8c 93       	st	X, r24

	// Advanced Waveform Extension initialization
	// Disable locking the AWEX configuration registers just to be sure
	n=MCU.AWEXLOCK & (~MCU_AWEXCLOCK_bm);
     4ba:	a0 e9       	ldi	r26, 0x90	; 144
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	19 96       	adiw	r26, 0x09	; 9
     4c0:	8c 91       	ld	r24, X
     4c2:	19 97       	sbiw	r26, 0x09	; 9
     4c4:	8e 7f       	andi	r24, 0xFE	; 254
	CCP=CCP_IOREG_gc;
     4c6:	98 ed       	ldi	r25, 0xD8	; 216
     4c8:	94 bf       	out	0x34, r25	; 52
	MCU.AWEXLOCK=n;
     4ca:	19 96       	adiw	r26, 0x09	; 9
     4cc:	8c 93       	st	X, r24
	// Restore optimization for size if needed

	// Pattern generation: Off
	// Dead time insertion: Off
	AWEXC.CTRL=(0<<AWEX_PGM_bp) | (0<<AWEX_CWCM_bp) | (0<<AWEX_DTICCDEN_bp) | (0<<AWEX_DTICCCEN_bp) |
     4ce:	a0 e8       	ldi	r26, 0x80	; 128
     4d0:	b8 e0       	ldi	r27, 0x08	; 8
     4d2:	1c 92       	st	X, r1

	// Fault protection initialization
	// Fault detection on OCD Break detection: On
	// Fault detection restart mode: Latched Mode
	// Fault detection action: None (Fault protection disabled)
	AWEXC.FDCTRL=(AWEXC.FDCTRL & (~(AWEX_FDDBD_bm | AWEX_FDMODE_bm | AWEX_FDACT_gm))) |
     4d4:	13 96       	adiw	r26, 0x03	; 3
     4d6:	8c 91       	ld	r24, X
     4d8:	13 97       	sbiw	r26, 0x03	; 3
     4da:	88 7e       	andi	r24, 0xE8	; 232
     4dc:	13 96       	adiw	r26, 0x03	; 3
     4de:	8c 93       	st	X, r24
     4e0:	13 97       	sbiw	r26, 0x03	; 3
	// Event channel 3: Off
	// Event channel 4: Off
	// Event channel 5: Off
	// Event channel 6: Off
	// Event channel 7: Off
	AWEXC.FDEMASK=0b00000000;
     4e2:	12 96       	adiw	r26, 0x02	; 2
     4e4:	1c 92       	st	X, r1
     4e6:	12 97       	sbiw	r26, 0x02	; 2
	// Make sure the fault detect flag is cleared
	AWEXC.STATUS|=AWEXC.STATUS & AWEX_FDF_bm;
     4e8:	14 96       	adiw	r26, 0x04	; 4
     4ea:	8c 91       	ld	r24, X
     4ec:	14 97       	sbiw	r26, 0x04	; 4
     4ee:	14 96       	adiw	r26, 0x04	; 4
     4f0:	9c 91       	ld	r25, X
     4f2:	14 97       	sbiw	r26, 0x04	; 4
     4f4:	84 70       	andi	r24, 0x04	; 4
     4f6:	89 2b       	or	r24, r25
     4f8:	14 96       	adiw	r26, 0x04	; 4
     4fa:	8c 93       	st	X, r24

	// Clear the interrupt flags
	TCC0.INTFLAGS=TCC0.INTFLAGS;
     4fc:	84 85       	ldd	r24, Z+12	; 0x0c
     4fe:	84 87       	std	Z+12, r24	; 0x0c
	// Set Counter register
	TCC0.CNT=0x0000;
     500:	10 a2       	std	Z+32, r1	; 0x20
     502:	11 a2       	std	Z+33, r1	; 0x21
	// Set Period register
	TCC0.PER=0x7CFF;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	9c e7       	ldi	r25, 0x7C	; 124
     508:	86 a3       	std	Z+38, r24	; 0x26
     50a:	97 a3       	std	Z+39, r25	; 0x27
	// Set channel A Compare/Capture register
	TCC0.CCA=0x0000;
     50c:	10 a6       	std	Z+40, r1	; 0x28
     50e:	11 a6       	std	Z+41, r1	; 0x29
	// Set channel B Compare/Capture register
	TCC0.CCB=0x0000;
     510:	12 a6       	std	Z+42, r1	; 0x2a
     512:	13 a6       	std	Z+43, r1	; 0x2b
	// Set channel C Compare/Capture register
	TCC0.CCC=0x0000;
     514:	14 a6       	std	Z+44, r1	; 0x2c
     516:	15 a6       	std	Z+45, r1	; 0x2d
	// Set channel D Compare/Capture register
	TCC0.CCD=0x0000;
     518:	16 a6       	std	Z+46, r1	; 0x2e
     51a:	17 a6       	std	Z+47, r1	; 0x2f

	// Restore interrupts enabled/disabled state
	SREG=s;
     51c:	2f bf       	out	0x3f, r18	; 63
     51e:	08 95       	ret

00000520 <millis>:
}

inline unsigned long millis(void){
	return millisTimer;
     520:	60 91 06 21 	lds	r22, 0x2106	; 0x802106 <__data_end>
     524:	70 91 07 21 	lds	r23, 0x2107	; 0x802107 <__data_end+0x1>
     528:	80 91 08 21 	lds	r24, 0x2108	; 0x802108 <__data_end+0x2>
     52c:	90 91 09 21 	lds	r25, 0x2109	; 0x802109 <__data_end+0x3>
}
     530:	08 95       	ret

00000532 <__vector_14>:


ISR(TCC0_OVF_vect)
{
     532:	1f 92       	push	r1
     534:	0f 92       	push	r0
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	0f 92       	push	r0
     53a:	11 24       	eor	r1, r1
     53c:	08 b6       	in	r0, 0x38	; 56
     53e:	0f 92       	push	r0
     540:	18 be       	out	0x38, r1	; 56
     542:	09 b6       	in	r0, 0x39	; 57
     544:	0f 92       	push	r0
     546:	19 be       	out	0x39, r1	; 57
     548:	0b b6       	in	r0, 0x3b	; 59
     54a:	0f 92       	push	r0
     54c:	1b be       	out	0x3b, r1	; 59
     54e:	2f 93       	push	r18
     550:	8f 93       	push	r24
     552:	9f 93       	push	r25
     554:	af 93       	push	r26
     556:	bf 93       	push	r27
     558:	ef 93       	push	r30
     55a:	ff 93       	push	r31
	// Save interrupts enabled/disabled state
	unsigned char s = SREG;
     55c:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
     55e:	f8 94       	cli
	millisTimer++;
     560:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <__data_end>
     564:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <__data_end+0x1>
     568:	a0 91 08 21 	lds	r26, 0x2108	; 0x802108 <__data_end+0x2>
     56c:	b0 91 09 21 	lds	r27, 0x2109	; 0x802109 <__data_end+0x3>
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	a1 1d       	adc	r26, r1
     574:	b1 1d       	adc	r27, r1
     576:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <__data_end>
     57a:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <__data_end+0x1>
     57e:	a0 93 08 21 	sts	0x2108, r26	; 0x802108 <__data_end+0x2>
     582:	b0 93 09 21 	sts	0x2109, r27	; 0x802109 <__data_end+0x3>
	// Restore interrupts enabled/disabled state
	TCC0.INTFLAGS=TCC0.INTFLAGS;
     586:	e0 e0       	ldi	r30, 0x00	; 0
     588:	f8 e0       	ldi	r31, 0x08	; 8
     58a:	84 85       	ldd	r24, Z+12	; 0x0c
     58c:	84 87       	std	Z+12, r24	; 0x0c
	SREG = s;
     58e:	2f bf       	out	0x3f, r18	; 63
     590:	ff 91       	pop	r31
     592:	ef 91       	pop	r30
     594:	bf 91       	pop	r27
     596:	af 91       	pop	r26
     598:	9f 91       	pop	r25
     59a:	8f 91       	pop	r24
     59c:	2f 91       	pop	r18
     59e:	0f 90       	pop	r0
     5a0:	0b be       	out	0x3b, r0	; 59
     5a2:	0f 90       	pop	r0
     5a4:	09 be       	out	0x39, r0	; 57
     5a6:	0f 90       	pop	r0
     5a8:	08 be       	out	0x38, r0	; 56
     5aa:	0f 90       	pop	r0
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	0f 90       	pop	r0
     5b0:	1f 90       	pop	r1
     5b2:	18 95       	reti

000005b4 <pinMode>:
#endif



void pinMode(uint8_t pin, uint8_t mode)
{
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
	if (mode == INPUT)
     5b8:	61 11       	cpse	r22, r1
     5ba:	25 c0       	rjmp	.+74     	; 0x606 <pinMode+0x52>
	{
		regs[pin]->DIRSET &= ~_BV(bitNum[pin]);
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	fc 01       	movw	r30, r24
     5c0:	ee 0f       	add	r30, r30
     5c2:	ff 1f       	adc	r31, r31
     5c4:	e6 5f       	subi	r30, 0xF6	; 246
     5c6:	ff 4d       	sbci	r31, 0xDF	; 223
     5c8:	a0 81       	ld	r26, Z
     5ca:	b1 81       	ldd	r27, Z+1	; 0x01
     5cc:	11 96       	adiw	r26, 0x01	; 1
     5ce:	2c 91       	ld	r18, X
     5d0:	11 97       	sbiw	r26, 0x01	; 1
     5d2:	ec 01       	movw	r28, r24
     5d4:	c8 58       	subi	r28, 0x88	; 136
     5d6:	df 4d       	sbci	r29, 0xDF	; 223
     5d8:	38 81       	ld	r19, Y
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	03 2e       	mov	r0, r19
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <pinMode+0x32>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	0a 94       	dec	r0
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <pinMode+0x2e>
     5ea:	80 95       	com	r24
     5ec:	82 23       	and	r24, r18
     5ee:	11 96       	adiw	r26, 0x01	; 1
     5f0:	8c 93       	st	X, r24
		*(((uint8_t *)&regs[pin]->PIN0CTRL) + bitNum[pin]) |= PORT_OPC_PULLDOWN_gc | PORT_ISC_LEVEL_gc;
     5f2:	01 90       	ld	r0, Z+
     5f4:	f0 81       	ld	r31, Z
     5f6:	e0 2d       	mov	r30, r0
     5f8:	70 96       	adiw	r30, 0x10	; 16
     5fa:	e3 0f       	add	r30, r19
     5fc:	f1 1d       	adc	r31, r1
     5fe:	80 81       	ld	r24, Z
     600:	83 61       	ori	r24, 0x13	; 19
     602:	80 83       	st	Z, r24
     604:	72 c0       	rjmp	.+228    	; 0x6ea <pinMode+0x136>
	}
	else if (mode == INPUT_PULLUP)
     606:	62 30       	cpi	r22, 0x02	; 2
     608:	29 f5       	brne	.+74     	; 0x654 <pinMode+0xa0>
	{
		regs[pin]->DIRSET &= ~_BV(bitNum[pin]);
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	fc 01       	movw	r30, r24
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	e6 5f       	subi	r30, 0xF6	; 246
     614:	ff 4d       	sbci	r31, 0xDF	; 223
     616:	a0 81       	ld	r26, Z
     618:	b1 81       	ldd	r27, Z+1	; 0x01
     61a:	11 96       	adiw	r26, 0x01	; 1
     61c:	2c 91       	ld	r18, X
     61e:	11 97       	sbiw	r26, 0x01	; 1
     620:	ec 01       	movw	r28, r24
     622:	c8 58       	subi	r28, 0x88	; 136
     624:	df 4d       	sbci	r29, 0xDF	; 223
     626:	38 81       	ld	r19, Y
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	03 2e       	mov	r0, r19
     62e:	02 c0       	rjmp	.+4      	; 0x634 <pinMode+0x80>
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	0a 94       	dec	r0
     636:	e2 f7       	brpl	.-8      	; 0x630 <pinMode+0x7c>
     638:	80 95       	com	r24
     63a:	82 23       	and	r24, r18
     63c:	11 96       	adiw	r26, 0x01	; 1
     63e:	8c 93       	st	X, r24
		*(((uint8_t *)&regs[pin]->PIN0CTRL) + bitNum[pin]) |= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
     640:	01 90       	ld	r0, Z+
     642:	f0 81       	ld	r31, Z
     644:	e0 2d       	mov	r30, r0
     646:	70 96       	adiw	r30, 0x10	; 16
     648:	e3 0f       	add	r30, r19
     64a:	f1 1d       	adc	r31, r1
     64c:	80 81       	ld	r24, Z
     64e:	8b 61       	ori	r24, 0x1B	; 27
     650:	80 83       	st	Z, r24
     652:	4b c0       	rjmp	.+150    	; 0x6ea <pinMode+0x136>
	}
	else if (mode == OUTPUT)
     654:	61 30       	cpi	r22, 0x01	; 1
     656:	21 f5       	brne	.+72     	; 0x6a0 <pinMode+0xec>
	{
		regs[pin]->DIRSET |= _BV(bitNum[pin]);
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	fc 01       	movw	r30, r24
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	e6 5f       	subi	r30, 0xF6	; 246
     662:	ff 4d       	sbci	r31, 0xDF	; 223
     664:	a0 81       	ld	r26, Z
     666:	b1 81       	ldd	r27, Z+1	; 0x01
     668:	11 96       	adiw	r26, 0x01	; 1
     66a:	3c 91       	ld	r19, X
     66c:	11 97       	sbiw	r26, 0x01	; 1
     66e:	ec 01       	movw	r28, r24
     670:	c8 58       	subi	r28, 0x88	; 136
     672:	df 4d       	sbci	r29, 0xDF	; 223
     674:	28 81       	ld	r18, Y
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	02 2e       	mov	r0, r18
     67c:	02 c0       	rjmp	.+4      	; 0x682 <pinMode+0xce>
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	0a 94       	dec	r0
     684:	e2 f7       	brpl	.-8      	; 0x67e <pinMode+0xca>
     686:	83 2b       	or	r24, r19
     688:	11 96       	adiw	r26, 0x01	; 1
     68a:	8c 93       	st	X, r24
		*(((uint8_t *)(&(regs[pin]->PIN0CTRL))) + bitNum[pin]) |= PORT_OPC_PULLDOWN_gc | PORT_ISC_LEVEL_gc;
     68c:	01 90       	ld	r0, Z+
     68e:	f0 81       	ld	r31, Z
     690:	e0 2d       	mov	r30, r0
     692:	70 96       	adiw	r30, 0x10	; 16
     694:	e2 0f       	add	r30, r18
     696:	f1 1d       	adc	r31, r1
     698:	80 81       	ld	r24, Z
     69a:	83 61       	ori	r24, 0x13	; 19
     69c:	80 83       	st	Z, r24
     69e:	25 c0       	rjmp	.+74     	; 0x6ea <pinMode+0x136>
	}
	else if (mode == OUTPUT_PULLUP)
     6a0:	63 30       	cpi	r22, 0x03	; 3
     6a2:	19 f5       	brne	.+70     	; 0x6ea <pinMode+0x136>
	{
		regs[pin]->DIRSET |= _BV(bitNum[pin]);
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	fc 01       	movw	r30, r24
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	e6 5f       	subi	r30, 0xF6	; 246
     6ae:	ff 4d       	sbci	r31, 0xDF	; 223
     6b0:	a0 81       	ld	r26, Z
     6b2:	b1 81       	ldd	r27, Z+1	; 0x01
     6b4:	11 96       	adiw	r26, 0x01	; 1
     6b6:	3c 91       	ld	r19, X
     6b8:	11 97       	sbiw	r26, 0x01	; 1
     6ba:	ec 01       	movw	r28, r24
     6bc:	c8 58       	subi	r28, 0x88	; 136
     6be:	df 4d       	sbci	r29, 0xDF	; 223
     6c0:	28 81       	ld	r18, Y
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	02 2e       	mov	r0, r18
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <pinMode+0x11a>
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	0a 94       	dec	r0
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <pinMode+0x116>
     6d2:	83 2b       	or	r24, r19
     6d4:	11 96       	adiw	r26, 0x01	; 1
     6d6:	8c 93       	st	X, r24
		*(((uint8_t *)&regs[pin]->PIN0CTRL) + bitNum[pin]) |= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
     6d8:	01 90       	ld	r0, Z+
     6da:	f0 81       	ld	r31, Z
     6dc:	e0 2d       	mov	r30, r0
     6de:	70 96       	adiw	r30, 0x10	; 16
     6e0:	e2 0f       	add	r30, r18
     6e2:	f1 1d       	adc	r31, r1
     6e4:	80 81       	ld	r24, Z
     6e6:	8b 61       	ori	r24, 0x1B	; 27
     6e8:	80 83       	st	Z, r24
	}
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (!val)
     6f0:	61 11       	cpse	r22, r1
     6f2:	17 c0       	rjmp	.+46     	; 0x722 <digitalWrite+0x32>
	{
		regs[pin]->OUTCLR = _BV(bitNum[pin]);
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	fc 01       	movw	r30, r24
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	e6 5f       	subi	r30, 0xF6	; 246
     6fe:	ff 4d       	sbci	r31, 0xDF	; 223
     700:	01 90       	ld	r0, Z+
     702:	f0 81       	ld	r31, Z
     704:	e0 2d       	mov	r30, r0
     706:	dc 01       	movw	r26, r24
     708:	a8 58       	subi	r26, 0x88	; 136
     70a:	bf 4d       	sbci	r27, 0xDF	; 223
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	c9 01       	movw	r24, r18
     712:	0c 90       	ld	r0, X
     714:	02 c0       	rjmp	.+4      	; 0x71a <digitalWrite+0x2a>
     716:	88 0f       	add	r24, r24
     718:	99 1f       	adc	r25, r25
     71a:	0a 94       	dec	r0
     71c:	e2 f7       	brpl	.-8      	; 0x716 <digitalWrite+0x26>
     71e:	86 83       	std	Z+6, r24	; 0x06
     720:	08 95       	ret
	}
	else
	{
		regs[pin]->OUTSET = _BV(bitNum[pin]);
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	fc 01       	movw	r30, r24
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	e6 5f       	subi	r30, 0xF6	; 246
     72c:	ff 4d       	sbci	r31, 0xDF	; 223
     72e:	01 90       	ld	r0, Z+
     730:	f0 81       	ld	r31, Z
     732:	e0 2d       	mov	r30, r0
     734:	dc 01       	movw	r26, r24
     736:	a8 58       	subi	r26, 0x88	; 136
     738:	bf 4d       	sbci	r27, 0xDF	; 223
     73a:	21 e0       	ldi	r18, 0x01	; 1
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	c9 01       	movw	r24, r18
     740:	0c 90       	ld	r0, X
     742:	02 c0       	rjmp	.+4      	; 0x748 <digitalWrite+0x58>
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	0a 94       	dec	r0
     74a:	e2 f7       	brpl	.-8      	; 0x744 <digitalWrite+0x54>
     74c:	85 83       	std	Z+5, r24	; 0x05
     74e:	08 95       	ret

00000750 <digitalRead>:
	}
}

int digitalRead(uint8_t pin)
{
	return bitRead(regs[pin]->IN,bitNum[pin]);
     750:	28 2f       	mov	r18, r24
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	f9 01       	movw	r30, r18
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	e6 5f       	subi	r30, 0xF6	; 246
     75c:	ff 4d       	sbci	r31, 0xDF	; 223
     75e:	01 90       	ld	r0, Z+
     760:	f0 81       	ld	r31, Z
     762:	e0 2d       	mov	r30, r0
     764:	80 85       	ldd	r24, Z+8	; 0x08
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	f9 01       	movw	r30, r18
     76a:	e8 58       	subi	r30, 0x88	; 136
     76c:	ff 4d       	sbci	r31, 0xDF	; 223
     76e:	00 80       	ld	r0, Z
     770:	02 c0       	rjmp	.+4      	; 0x776 <digitalRead+0x26>
     772:	95 95       	asr	r25
     774:	87 95       	ror	r24
     776:	0a 94       	dec	r0
     778:	e2 f7       	brpl	.-8      	; 0x772 <digitalRead+0x22>
}
     77a:	81 70       	andi	r24, 0x01	; 1
     77c:	99 27       	eor	r25, r25
     77e:	08 95       	ret

00000780 <_ZN14HardwareSerial5writeEh>:
	for (uint16_t i = 0; i < len; i++)
	{
		this->write(str[i]);
	}
	return 1;
}
     780:	8f 5e       	subi	r24, 0xEF	; 239
     782:	9b 4f       	sbci	r25, 0xFB	; 251
     784:	dc 01       	movw	r26, r24
     786:	ed 91       	ld	r30, X+
     788:	fc 91       	ld	r31, X
     78a:	81 81       	ldd	r24, Z+1	; 0x01
     78c:	85 ff       	sbrs	r24, 5
     78e:	fd cf       	rjmp	.-6      	; 0x78a <_ZN14HardwareSerial5writeEh+0xa>
     790:	60 83       	st	Z, r22
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	08 95       	ret

00000798 <_ZN14HardwareSerial9availableEv>:
     798:	fc 01       	movw	r30, r24
     79a:	25 85       	ldd	r18, Z+13	; 0x0d
     79c:	36 85       	ldd	r19, Z+14	; 0x0e
     79e:	87 85       	ldd	r24, Z+15	; 0x0f
     7a0:	90 89       	ldd	r25, Z+16	; 0x10
     7a2:	a9 01       	movw	r20, r18
     7a4:	48 1b       	sub	r20, r24
     7a6:	59 0b       	sbc	r21, r25
     7a8:	ca 01       	movw	r24, r20
     7aa:	93 70       	andi	r25, 0x03	; 3
     7ac:	08 95       	ret

000007ae <_ZN14HardwareSerial4peekEv>:
     7ae:	fc 01       	movw	r30, r24
     7b0:	25 85       	ldd	r18, Z+13	; 0x0d
     7b2:	36 85       	ldd	r19, Z+14	; 0x0e
     7b4:	87 85       	ldd	r24, Z+15	; 0x0f
     7b6:	90 89       	ldd	r25, Z+16	; 0x10
     7b8:	28 17       	cp	r18, r24
     7ba:	39 07       	cpc	r19, r25
     7bc:	39 f0       	breq	.+14     	; 0x7cc <_ZN14HardwareSerial4peekEv+0x1e>
     7be:	87 85       	ldd	r24, Z+15	; 0x0f
     7c0:	90 89       	ldd	r25, Z+16	; 0x10
     7c2:	e8 0f       	add	r30, r24
     7c4:	f9 1f       	adc	r31, r25
     7c6:	81 89       	ldd	r24, Z+17	; 0x11
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	08 95       	ret
     7cc:	8f ef       	ldi	r24, 0xFF	; 255
     7ce:	9f ef       	ldi	r25, 0xFF	; 255
     7d0:	08 95       	ret

000007d2 <_ZN14HardwareSerial4readEv>:
     7d2:	fc 01       	movw	r30, r24
     7d4:	25 85       	ldd	r18, Z+13	; 0x0d
     7d6:	36 85       	ldd	r19, Z+14	; 0x0e
     7d8:	87 85       	ldd	r24, Z+15	; 0x0f
     7da:	90 89       	ldd	r25, Z+16	; 0x10
     7dc:	28 17       	cp	r18, r24
     7de:	39 07       	cpc	r19, r25
     7e0:	79 f0       	breq	.+30     	; 0x800 <_ZN14HardwareSerial4readEv+0x2e>
     7e2:	a7 85       	ldd	r26, Z+15	; 0x0f
     7e4:	b0 89       	ldd	r27, Z+16	; 0x10
     7e6:	ae 0f       	add	r26, r30
     7e8:	bf 1f       	adc	r27, r31
     7ea:	51 96       	adiw	r26, 0x11	; 17
     7ec:	8c 91       	ld	r24, X
     7ee:	27 85       	ldd	r18, Z+15	; 0x0f
     7f0:	30 89       	ldd	r19, Z+16	; 0x10
     7f2:	2f 5f       	subi	r18, 0xFF	; 255
     7f4:	3f 4f       	sbci	r19, 0xFF	; 255
     7f6:	33 70       	andi	r19, 0x03	; 3
     7f8:	27 87       	std	Z+15, r18	; 0x0f
     7fa:	30 8b       	std	Z+16, r19	; 0x10
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	08 95       	ret
     800:	8f ef       	ldi	r24, 0xFF	; 255
     802:	9f ef       	ldi	r25, 0xFF	; 255
     804:	08 95       	ret

00000806 <_ZN14HardwareSerial5beginEmh>:
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	dc 01       	movw	r26, r24
     80c:	e0 ea       	ldi	r30, 0xA0	; 160
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	92 81       	ldd	r25, Z+2	; 0x02
     812:	98 73       	andi	r25, 0x38	; 56
     814:	96 60       	ori	r25, 0x06	; 6
     816:	88 ed       	ldi	r24, 0xD8	; 216
     818:	84 bf       	out	0x34, r24	; 52
     81a:	92 83       	std	Z+2, r25	; 0x02
     81c:	11 82       	std	Z+1, r1	; 0x01
     81e:	fd 01       	movw	r30, r26
     820:	ef 5e       	subi	r30, 0xEF	; 239
     822:	fb 4f       	sbci	r31, 0xFB	; 251
     824:	80 81       	ld	r24, Z
     826:	91 81       	ldd	r25, Z+1	; 0x01
     828:	80 3a       	cpi	r24, 0xA0	; 160
     82a:	99 40       	sbci	r25, 0x09	; 9
     82c:	29 f4       	brne	.+10     	; 0x838 <_ZN14HardwareSerial5beginEmh+0x32>
     82e:	e0 e6       	ldi	r30, 0x60	; 96
     830:	f6 e0       	ldi	r31, 0x06	; 6
     832:	88 e0       	ldi	r24, 0x08	; 8
     834:	85 83       	std	Z+5, r24	; 0x05
     836:	81 83       	std	Z+1, r24	; 0x01
     838:	fd 01       	movw	r30, r26
     83a:	ef 5e       	subi	r30, 0xEF	; 239
     83c:	fb 4f       	sbci	r31, 0xFB	; 251
     83e:	80 81       	ld	r24, Z
     840:	91 81       	ldd	r25, Z+1	; 0x01
     842:	80 3a       	cpi	r24, 0xA0	; 160
     844:	9a 40       	sbci	r25, 0x0A	; 10
     846:	29 f4       	brne	.+10     	; 0x852 <_ZN14HardwareSerial5beginEmh+0x4c>
     848:	e0 e8       	ldi	r30, 0x80	; 128
     84a:	f6 e0       	ldi	r31, 0x06	; 6
     84c:	88 e0       	ldi	r24, 0x08	; 8
     84e:	85 83       	std	Z+5, r24	; 0x05
     850:	81 83       	std	Z+1, r24	; 0x01
     852:	fd 01       	movw	r30, r26
     854:	ef 5e       	subi	r30, 0xEF	; 239
     856:	fb 4f       	sbci	r31, 0xFB	; 251
     858:	c0 81       	ld	r28, Z
     85a:	d1 81       	ldd	r29, Z+1	; 0x01
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	8d 83       	std	Y+5, r24	; 0x05
     860:	c0 81       	ld	r28, Z
     862:	d1 81       	ldd	r29, Z+1	; 0x01
     864:	9b 81       	ldd	r25, Y+3	; 0x03
     866:	90 7c       	andi	r25, 0xC0	; 192
     868:	90 63       	ori	r25, 0x30	; 48
     86a:	9b 83       	std	Y+3, r25	; 0x03
     86c:	c0 81       	ld	r28, Z
     86e:	d1 81       	ldd	r29, Z+1	; 0x01
     870:	8e e2       	ldi	r24, 0x2E	; 46
     872:	8e 83       	std	Y+6, r24	; 0x06
     874:	c0 81       	ld	r28, Z
     876:	d1 81       	ldd	r29, Z+1	; 0x01
     878:	88 e9       	ldi	r24, 0x98	; 152
     87a:	8f 83       	std	Y+7, r24	; 0x07
     87c:	01 90       	ld	r0, Z+
     87e:	f0 81       	ld	r31, Z
     880:	e0 2d       	mov	r30, r0
     882:	94 81       	ldd	r25, Z+4	; 0x04
     884:	90 7e       	andi	r25, 0xE0	; 224
     886:	98 61       	ori	r25, 0x18	; 24
     888:	94 83       	std	Z+4, r25	; 0x04
     88a:	1c 96       	adiw	r26, 0x0c	; 12
     88c:	1c 92       	st	X, r1
     88e:	78 94       	sei
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <_ZN14HardwareSerial16_rx_complete_irqEv>:
	}
}

void HardwareSerial::_rx_complete_irq(void)
{
	cli();
     896:	f8 94       	cli
	if ((this->_regs->STATUS & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
     898:	fc 01       	movw	r30, r24
     89a:	ef 5e       	subi	r30, 0xEF	; 239
     89c:	fb 4f       	sbci	r31, 0xFB	; 251
     89e:	01 90       	ld	r0, Z+
     8a0:	f0 81       	ld	r31, Z
     8a2:	e0 2d       	mov	r30, r0
     8a4:	21 81       	ldd	r18, Z+1	; 0x01
     8a6:	2c 71       	andi	r18, 0x1C	; 28
     8a8:	e1 f4       	brne	.+56     	; 0x8e2 <_ZN14HardwareSerial16_rx_complete_irqEv+0x4c>
	{
		// No Parity error, read byte and store it in the buffer if there is
		// room
		unsigned char c = this->_regs->DATA;
     8aa:	60 81       	ld	r22, Z
		rx_buffer_index_t i = (unsigned int)(this->_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     8ac:	dc 01       	movw	r26, r24
     8ae:	1d 96       	adiw	r26, 0x0d	; 13
     8b0:	2d 91       	ld	r18, X+
     8b2:	3c 91       	ld	r19, X
     8b4:	1e 97       	sbiw	r26, 0x0e	; 14
     8b6:	2f 5f       	subi	r18, 0xFF	; 255
     8b8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ba:	33 70       	andi	r19, 0x03	; 3
		// if we should be storing the received character into the location
		// just before the tail (meaning that the head would advance to the
		// current location of the tail), we're about to overflow the buffer
		// and so we don't write the character or advance the head.
		if (i != this->_rx_buffer_tail)
     8bc:	1f 96       	adiw	r26, 0x0f	; 15
     8be:	4d 91       	ld	r20, X+
     8c0:	5c 91       	ld	r21, X
     8c2:	50 97       	sbiw	r26, 0x10	; 16
     8c4:	24 17       	cp	r18, r20
     8c6:	35 07       	cpc	r19, r21
     8c8:	69 f0       	breq	.+26     	; 0x8e4 <_ZN14HardwareSerial16_rx_complete_irqEv+0x4e>
		{
			this->_rx_buffer[this->_rx_buffer_head] = c;
     8ca:	1d 96       	adiw	r26, 0x0d	; 13
     8cc:	ed 91       	ld	r30, X+
     8ce:	fc 91       	ld	r31, X
     8d0:	1e 97       	sbiw	r26, 0x0e	; 14
     8d2:	e8 0f       	add	r30, r24
     8d4:	f9 1f       	adc	r31, r25
     8d6:	61 8b       	std	Z+17, r22	; 0x11
			this->_rx_buffer_head = i;
     8d8:	1d 96       	adiw	r26, 0x0d	; 13
     8da:	2d 93       	st	X+, r18
     8dc:	3c 93       	st	X, r19
     8de:	1e 97       	sbiw	r26, 0x0e	; 14
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <_ZN14HardwareSerial16_rx_complete_irqEv+0x4e>
		}
	}
	else
	{
		// Parity error, read byte but discard it
		this->_regs->DATA;
     8e2:	80 81       	ld	r24, Z
	};

	sei();
     8e4:	78 94       	sei
     8e6:	08 95       	ret

000008e8 <__vector_88>:
}
#endif

#ifdef D0
ISR(USARTD0_RXC_vect)
{
     8e8:	1f 92       	push	r1
     8ea:	0f 92       	push	r0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	0f 92       	push	r0
     8f0:	11 24       	eor	r1, r1
     8f2:	08 b6       	in	r0, 0x38	; 56
     8f4:	0f 92       	push	r0
     8f6:	18 be       	out	0x38, r1	; 56
     8f8:	09 b6       	in	r0, 0x39	; 57
     8fa:	0f 92       	push	r0
     8fc:	19 be       	out	0x39, r1	; 57
     8fe:	0b b6       	in	r0, 0x3b	; 59
     900:	0f 92       	push	r0
     902:	1b be       	out	0x3b, r1	; 59
     904:	2f 93       	push	r18
     906:	3f 93       	push	r19
     908:	4f 93       	push	r20
     90a:	5f 93       	push	r21
     90c:	6f 93       	push	r22
     90e:	7f 93       	push	r23
     910:	8f 93       	push	r24
     912:	9f 93       	push	r25
     914:	af 93       	push	r26
     916:	bf 93       	push	r27
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
	Serial3._rx_complete_irq();
     91c:	8d e1       	ldi	r24, 0x1D	; 29
     91e:	95 e2       	ldi	r25, 0x25	; 37
     920:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	bf 91       	pop	r27
     92a:	af 91       	pop	r26
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	7f 91       	pop	r23
     932:	6f 91       	pop	r22
     934:	5f 91       	pop	r21
     936:	4f 91       	pop	r20
     938:	3f 91       	pop	r19
     93a:	2f 91       	pop	r18
     93c:	0f 90       	pop	r0
     93e:	0b be       	out	0x3b, r0	; 59
     940:	0f 90       	pop	r0
     942:	09 be       	out	0x39, r0	; 57
     944:	0f 90       	pop	r0
     946:	08 be       	out	0x38, r0	; 56
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f 90       	pop	r0
     94e:	1f 90       	pop	r1
     950:	18 95       	reti

00000952 <__vector_58>:
}
#endif

#ifdef E0
ISR(USARTE0_RXC_vect)
{
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	08 b6       	in	r0, 0x38	; 56
     95e:	0f 92       	push	r0
     960:	18 be       	out	0x38, r1	; 56
     962:	09 b6       	in	r0, 0x39	; 57
     964:	0f 92       	push	r0
     966:	19 be       	out	0x39, r1	; 57
     968:	0b b6       	in	r0, 0x3b	; 59
     96a:	0f 92       	push	r0
     96c:	1b be       	out	0x3b, r1	; 59
     96e:	2f 93       	push	r18
     970:	3f 93       	push	r19
     972:	4f 93       	push	r20
     974:	5f 93       	push	r21
     976:	6f 93       	push	r22
     978:	7f 93       	push	r23
     97a:	8f 93       	push	r24
     97c:	9f 93       	push	r25
     97e:	af 93       	push	r26
     980:	bf 93       	push	r27
     982:	ef 93       	push	r30
     984:	ff 93       	push	r31
	Serial5._rx_complete_irq();
     986:	8a e0       	ldi	r24, 0x0A	; 10
     988:	91 e2       	ldi	r25, 0x21	; 33
     98a:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0b be       	out	0x3b, r0	; 59
     9aa:	0f 90       	pop	r0
     9ac:	09 be       	out	0x39, r0	; 57
     9ae:	0f 90       	pop	r0
     9b0:	08 be       	out	0x38, r0	; 56
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <_GLOBAL__sub_I_Serial3>:
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     9c8:	ed e1       	ldi	r30, 0x1D	; 29
     9ca:	f5 e2       	ldi	r31, 0x25	; 37
     9cc:	12 82       	std	Z+2, r1	; 0x02
     9ce:	13 82       	std	Z+3, r1	; 0x03
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f8 ee       	ldi	r31, 0xE8	; 232
     9d4:	cf 2e       	mov	r12, r31
     9d6:	f3 e0       	ldi	r31, 0x03	; 3
     9d8:	df 2e       	mov	r13, r31
     9da:	e1 2c       	mov	r14, r1
     9dc:	f1 2c       	mov	r15, r1
     9de:	f0 2d       	mov	r31, r0
     9e0:	c4 82       	std	Z+4, r12	; 0x04
     9e2:	d5 82       	std	Z+5, r13	; 0x05
     9e4:	e6 82       	std	Z+6, r14	; 0x06
     9e6:	f7 82       	std	Z+7, r15	; 0x07
	volatile rx_buffer_index_t _rx_buffer_tail;
	unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];

public:
	USART_t *_regs;
	HardwareSerial(USART_t *serial) : _regs(serial)
     9e8:	ce e9       	ldi	r28, 0x9E	; 158
     9ea:	d0 e2       	ldi	r29, 0x20	; 32
     9ec:	c0 83       	st	Z, r28
     9ee:	d1 83       	std	Z+1, r29	; 0x01
     9f0:	80 ea       	ldi	r24, 0xA0	; 160
     9f2:	99 e0       	ldi	r25, 0x09	; 9
     9f4:	80 93 2e 29 	sts	0x292E, r24	; 0x80292e <Serial3+0x411>
     9f8:	90 93 2f 29 	sts	0x292F, r25	; 0x80292f <Serial3+0x412>
		this->begin(115200);
	}
	~HardwareSerial()
	{
	}
	void begin(const uint32_t baud) { begin(baud, SERIAL_8N1); }
     9fc:	26 e0       	ldi	r18, 0x06	; 6
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	52 ec       	ldi	r21, 0xC2	; 194
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	cf 01       	movw	r24, r30
     a08:	0e 94 03 04 	call	0x806	; 0x806 <_ZN14HardwareSerial5beginEmh>
     a0c:	ea e0       	ldi	r30, 0x0A	; 10
     a0e:	f1 e2       	ldi	r31, 0x21	; 33
     a10:	12 82       	std	Z+2, r1	; 0x02
     a12:	13 82       	std	Z+3, r1	; 0x03
     a14:	c4 82       	std	Z+4, r12	; 0x04
     a16:	d5 82       	std	Z+5, r13	; 0x05
     a18:	e6 82       	std	Z+6, r14	; 0x06
     a1a:	f7 82       	std	Z+7, r15	; 0x07
	volatile rx_buffer_index_t _rx_buffer_tail;
	unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];

public:
	USART_t *_regs;
	HardwareSerial(USART_t *serial) : _regs(serial)
     a1c:	c0 83       	st	Z, r28
     a1e:	d1 83       	std	Z+1, r29	; 0x01
     a20:	80 ea       	ldi	r24, 0xA0	; 160
     a22:	9a e0       	ldi	r25, 0x0A	; 10
     a24:	80 93 1b 25 	sts	0x251B, r24	; 0x80251b <Serial5+0x411>
     a28:	90 93 1c 25 	sts	0x251C, r25	; 0x80251c <Serial5+0x412>
		this->begin(115200);
	}
	~HardwareSerial()
	{
	}
	void begin(const uint32_t baud) { begin(baud, SERIAL_8N1); }
     a2c:	26 e0       	ldi	r18, 0x06	; 6
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	52 ec       	ldi	r21, 0xC2	; 194
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	cf 01       	movw	r24, r30
     a38:	0e 94 03 04 	call	0x806	; 0x806 <_ZN14HardwareSerial5beginEmh>
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	08 95       	ret

00000a4a <_ZN17SingleInputKeypad6notifyEv>:
	}
	initTimer10Ms(this->timerNumber);
	this->debounceTime = 500;
	this->holdTime = 3000;
}
SingleInputKeypad::~SingleInputKeypad()
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	dc 01       	movw	r26, r24
     a50:	51 96       	adiw	r26, 0x11	; 17
     a52:	9c 91       	ld	r25, X
     a54:	51 97       	sbiw	r26, 0x11	; 17
     a56:	91 30       	cpi	r25, 0x01	; 1
     a58:	71 f4       	brne	.+28     	; 0xa76 <_ZN17SingleInputKeypad6notifyEv+0x2c>
     a5a:	12 96       	adiw	r26, 0x02	; 2
     a5c:	8d 91       	ld	r24, X+
     a5e:	9c 91       	ld	r25, X
     a60:	13 97       	sbiw	r26, 0x03	; 3
     a62:	ec 01       	movw	r28, r24
     a64:	e8 81       	ld	r30, Y
     a66:	f9 81       	ldd	r31, Y+1	; 0x01
     a68:	01 90       	ld	r0, Z+
     a6a:	f0 81       	ld	r31, Z
     a6c:	e0 2d       	mov	r30, r0
     a6e:	1e 96       	adiw	r26, 0x0e	; 14
     a70:	6c 91       	ld	r22, X
     a72:	19 95       	eicall
     a74:	1f c0       	rjmp	.+62     	; 0xab4 <_ZN17SingleInputKeypad6notifyEv+0x6a>
     a76:	93 30       	cpi	r25, 0x03	; 3
     a78:	71 f4       	brne	.+28     	; 0xa96 <_ZN17SingleInputKeypad6notifyEv+0x4c>
     a7a:	12 96       	adiw	r26, 0x02	; 2
     a7c:	8d 91       	ld	r24, X+
     a7e:	9c 91       	ld	r25, X
     a80:	13 97       	sbiw	r26, 0x03	; 3
     a82:	ec 01       	movw	r28, r24
     a84:	e8 81       	ld	r30, Y
     a86:	f9 81       	ldd	r31, Y+1	; 0x01
     a88:	02 80       	ldd	r0, Z+2	; 0x02
     a8a:	f3 81       	ldd	r31, Z+3	; 0x03
     a8c:	e0 2d       	mov	r30, r0
     a8e:	1e 96       	adiw	r26, 0x0e	; 14
     a90:	6c 91       	ld	r22, X
     a92:	19 95       	eicall
     a94:	0f c0       	rjmp	.+30     	; 0xab4 <_ZN17SingleInputKeypad6notifyEv+0x6a>
     a96:	92 30       	cpi	r25, 0x02	; 2
     a98:	69 f4       	brne	.+26     	; 0xab4 <_ZN17SingleInputKeypad6notifyEv+0x6a>
     a9a:	12 96       	adiw	r26, 0x02	; 2
     a9c:	8d 91       	ld	r24, X+
     a9e:	9c 91       	ld	r25, X
     aa0:	13 97       	sbiw	r26, 0x03	; 3
     aa2:	ec 01       	movw	r28, r24
     aa4:	e8 81       	ld	r30, Y
     aa6:	f9 81       	ldd	r31, Y+1	; 0x01
     aa8:	04 80       	ldd	r0, Z+4	; 0x04
     aaa:	f5 81       	ldd	r31, Z+5	; 0x05
     aac:	e0 2d       	mov	r30, r0
     aae:	1e 96       	adiw	r26, 0x0e	; 14
     ab0:	6c 91       	ld	r22, X
     ab2:	19 95       	eicall
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <_ZN17SingleInputKeypad10registerObEP11KeyObserver>:
     aba:	fc 01       	movw	r30, r24
     abc:	62 83       	std	Z+2, r22	; 0x02
     abe:	73 83       	std	Z+3, r23	; 0x03
     ac0:	08 95       	ret

00000ac2 <_ZN17SingleInputKeypad4scanEv>:
     ac2:	8f 92       	push	r8
     ac4:	9f 92       	push	r9
     ac6:	af 92       	push	r10
     ac8:	bf 92       	push	r11
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	ec 01       	movw	r28, r24
     ad6:	80 91 30 29 	lds	r24, 0x2930	; 0x802930 <pinNumber>
     ada:	ee 81       	ldd	r30, Y+6	; 0x06
     adc:	ff 81       	ldd	r31, Y+7	; 0x07
     ade:	e8 0f       	add	r30, r24
     ae0:	f1 1d       	adc	r31, r1
     ae2:	80 81       	ld	r24, Z
     ae4:	0e 94 a8 03 	call	0x750	; 0x750 <digitalRead>
     ae8:	89 2b       	or	r24, r25
     aea:	09 f0       	breq	.+2      	; 0xaee <_ZN17SingleInputKeypad4scanEv+0x2c>
     aec:	72 c0       	rjmp	.+228    	; 0xbd2 <_ZN17SingleInputKeypad4scanEv+0x110>
     aee:	f0 90 30 29 	lds	r15, 0x2930	; 0x802930 <pinNumber>
     af2:	0f 2d       	mov	r16, r15
     af4:	10 e0       	ldi	r17, 0x00	; 0
     af6:	8f 85       	ldd	r24, Y+15	; 0x0f
     af8:	98 89       	ldd	r25, Y+16	; 0x10
     afa:	08 17       	cp	r16, r24
     afc:	19 07       	cpc	r17, r25
     afe:	09 f0       	breq	.+2      	; 0xb02 <_ZN17SingleInputKeypad4scanEv+0x40>
     b00:	62 c0       	rjmp	.+196    	; 0xbc6 <_ZN17SingleInputKeypad4scanEv+0x104>
     b02:	0e 94 90 02 	call	0x520	; 0x520 <millis>
     b06:	8a 88       	ldd	r8, Y+18	; 0x12
     b08:	9b 88       	ldd	r9, Y+19	; 0x13
     b0a:	ac 88       	ldd	r10, Y+20	; 0x14
     b0c:	bd 88       	ldd	r11, Y+21	; 0x15
     b0e:	ab 01       	movw	r20, r22
     b10:	bc 01       	movw	r22, r24
     b12:	48 19       	sub	r20, r8
     b14:	59 09       	sbc	r21, r9
     b16:	6a 09       	sbc	r22, r10
     b18:	7b 09       	sbc	r23, r11
     b1a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b1c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	84 17       	cp	r24, r20
     b24:	95 07       	cpc	r25, r21
     b26:	a6 07       	cpc	r26, r22
     b28:	b7 07       	cpc	r27, r23
     b2a:	e0 f4       	brcc	.+56     	; 0xb64 <_ZN17SingleInputKeypad4scanEv+0xa2>
     b2c:	89 89       	ldd	r24, Y+17	; 0x11
     b2e:	81 11       	cpse	r24, r1
     b30:	19 c0       	rjmp	.+50     	; 0xb64 <_ZN17SingleInputKeypad4scanEv+0xa2>
     b32:	0f 87       	std	Y+15, r16	; 0x0f
     b34:	18 8b       	std	Y+16, r17	; 0x10
     b36:	ec 81       	ldd	r30, Y+4	; 0x04
     b38:	fd 81       	ldd	r31, Y+5	; 0x05
     b3a:	ef 0d       	add	r30, r15
     b3c:	f1 1d       	adc	r31, r1
     b3e:	80 81       	ld	r24, Z
     b40:	8e 87       	std	Y+14, r24	; 0x0e
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	89 8b       	std	Y+17, r24	; 0x11
     b46:	f8 94       	cli
     b48:	e8 81       	ld	r30, Y
     b4a:	f9 81       	ldd	r31, Y+1	; 0x01
     b4c:	02 80       	ldd	r0, Z+2	; 0x02
     b4e:	f3 81       	ldd	r31, Z+3	; 0x03
     b50:	e0 2d       	mov	r30, r0
     b52:	ce 01       	movw	r24, r28
     b54:	19 95       	eicall
     b56:	78 94       	sei
     b58:	0e 94 90 02 	call	0x520	; 0x520 <millis>
     b5c:	6a 8b       	std	Y+18, r22	; 0x12
     b5e:	7b 8b       	std	Y+19, r23	; 0x13
     b60:	8c 8b       	std	Y+20, r24	; 0x14
     b62:	9d 8b       	std	Y+21, r25	; 0x15
     b64:	0e 94 90 02 	call	0x520	; 0x520 <millis>
     b68:	8a 88       	ldd	r8, Y+18	; 0x12
     b6a:	9b 88       	ldd	r9, Y+19	; 0x13
     b6c:	ac 88       	ldd	r10, Y+20	; 0x14
     b6e:	bd 88       	ldd	r11, Y+21	; 0x15
     b70:	ab 01       	movw	r20, r22
     b72:	bc 01       	movw	r22, r24
     b74:	48 19       	sub	r20, r8
     b76:	59 09       	sbc	r21, r9
     b78:	6a 09       	sbc	r22, r10
     b7a:	7b 09       	sbc	r23, r11
     b7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b7e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b80:	a0 e0       	ldi	r26, 0x00	; 0
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	84 17       	cp	r24, r20
     b86:	95 07       	cpc	r25, r21
     b88:	a6 07       	cpc	r26, r22
     b8a:	b7 07       	cpc	r27, r23
     b8c:	e0 f4       	brcc	.+56     	; 0xbc6 <_ZN17SingleInputKeypad4scanEv+0x104>
     b8e:	89 89       	ldd	r24, Y+17	; 0x11
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	c9 f4       	brne	.+50     	; 0xbc6 <_ZN17SingleInputKeypad4scanEv+0x104>
     b94:	0f 87       	std	Y+15, r16	; 0x0f
     b96:	18 8b       	std	Y+16, r17	; 0x10
     b98:	ec 81       	ldd	r30, Y+4	; 0x04
     b9a:	fd 81       	ldd	r31, Y+5	; 0x05
     b9c:	ef 0d       	add	r30, r15
     b9e:	f1 1d       	adc	r31, r1
     ba0:	80 81       	ld	r24, Z
     ba2:	8e 87       	std	Y+14, r24	; 0x0e
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	89 8b       	std	Y+17, r24	; 0x11
     ba8:	f8 94       	cli
     baa:	e8 81       	ld	r30, Y
     bac:	f9 81       	ldd	r31, Y+1	; 0x01
     bae:	02 80       	ldd	r0, Z+2	; 0x02
     bb0:	f3 81       	ldd	r31, Z+3	; 0x03
     bb2:	e0 2d       	mov	r30, r0
     bb4:	ce 01       	movw	r24, r28
     bb6:	19 95       	eicall
     bb8:	78 94       	sei
     bba:	0e 94 90 02 	call	0x520	; 0x520 <millis>
     bbe:	6a 8b       	std	Y+18, r22	; 0x12
     bc0:	7b 8b       	std	Y+19, r23	; 0x13
     bc2:	8c 8b       	std	Y+20, r24	; 0x14
     bc4:	9d 8b       	std	Y+21, r25	; 0x15
     bc6:	0f 87       	std	Y+15, r16	; 0x0f
     bc8:	18 8b       	std	Y+16, r17	; 0x10
     bca:	89 89       	ldd	r24, Y+17	; 0x11
     bcc:	81 11       	cpse	r24, r1
     bce:	16 c0       	rjmp	.+44     	; 0xbfc <_ZN17SingleInputKeypad4scanEv+0x13a>
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <_ZN17SingleInputKeypad4scanEv+0x130>
     bd2:	89 89       	ldd	r24, Y+17	; 0x11
     bd4:	81 50       	subi	r24, 0x01	; 1
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	58 f4       	brcc	.+22     	; 0xbf0 <_ZN17SingleInputKeypad4scanEv+0x12e>
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	89 8b       	std	Y+17, r24	; 0x11
     bde:	f8 94       	cli
     be0:	e8 81       	ld	r30, Y
     be2:	f9 81       	ldd	r31, Y+1	; 0x01
     be4:	02 80       	ldd	r0, Z+2	; 0x02
     be6:	f3 81       	ldd	r31, Z+3	; 0x03
     be8:	e0 2d       	mov	r30, r0
     bea:	ce 01       	movw	r24, r28
     bec:	19 95       	eicall
     bee:	78 94       	sei
     bf0:	19 8a       	std	Y+17, r1	; 0x11
     bf2:	80 91 30 29 	lds	r24, 0x2930	; 0x802930 <pinNumber>
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	80 93 30 29 	sts	0x2930, r24	; 0x802930 <pinNumber>
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	bf 90       	pop	r11
     c08:	af 90       	pop	r10
     c0a:	9f 90       	pop	r9
     c0c:	8f 90       	pop	r8
     c0e:	08 95       	ret

00000c10 <_ZN17SingleInputKeypadC1EhPcPhh>:
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	7c 01       	movw	r14, r24
     c22:	ea 01       	movw	r28, r20
     c24:	69 01       	movw	r12, r18
     c26:	80 eb       	ldi	r24, 0xB0	; 176
     c28:	90 e2       	ldi	r25, 0x20	; 32
     c2a:	f7 01       	movw	r30, r14
     c2c:	80 83       	st	Z, r24
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	c7 01       	movw	r24, r14
     c32:	0e 96       	adiw	r24, 0x0e	; 14
     c34:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN3KeyC1Ev>
     c38:	f7 01       	movw	r30, r14
     c3a:	c4 83       	std	Z+4, r28	; 0x04
     c3c:	d5 83       	std	Z+5, r29	; 0x05
     c3e:	c6 82       	std	Z+6, r12	; 0x06
     c40:	d7 82       	std	Z+7, r13	; 0x07
     c42:	00 87       	std	Z+8, r16	; 0x08
     c44:	00 23       	and	r16, r16
     c46:	71 f0       	breq	.+28     	; 0xc64 <_ZN17SingleInputKeypadC1EhPcPhh+0x54>
     c48:	e6 01       	movw	r28, r12
     c4a:	01 50       	subi	r16, 0x01	; 1
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	0f 5f       	subi	r16, 0xFF	; 255
     c50:	1f 4f       	sbci	r17, 0xFF	; 255
     c52:	0c 0d       	add	r16, r12
     c54:	1d 1d       	adc	r17, r13
     c56:	62 e0       	ldi	r22, 0x02	; 2
     c58:	89 91       	ld	r24, Y+
     c5a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <pinMode>
     c5e:	c0 17       	cp	r28, r16
     c60:	d1 07       	cpc	r29, r17
     c62:	c9 f7       	brne	.-14     	; 0xc56 <_ZN17SingleInputKeypadC1EhPcPhh+0x46>
     c64:	f7 01       	movw	r30, r14
     c66:	81 85       	ldd	r24, Z+9	; 0x09
     c68:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <initTimer10Ms>
     c6c:	84 ef       	ldi	r24, 0xF4	; 244
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	f7 01       	movw	r30, r14
     c72:	84 87       	std	Z+12, r24	; 0x0c
     c74:	95 87       	std	Z+13, r25	; 0x0d
     c76:	88 eb       	ldi	r24, 0xB8	; 184
     c78:	9b e0       	ldi	r25, 0x0B	; 11
     c7a:	82 87       	std	Z+10, r24	; 0x0a
     c7c:	93 87       	std	Z+11, r25	; 0x0b
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	08 95       	ret

00000c90 <_GLOBAL__sub_I_pinsList>:
	}
	if(this->key.kstate == IDLE)
	{
	pinNumber++;
	}
     c90:	0f 93       	push	r16
	'4', '5', '6',
	'7', '8', '9',
	'r', '0', 'g',
'A', 'B', 'C','D'};

SingleInputKeypad iKeys(TIM1,iKeyChar,pinsList,KEPAD_SIZE);
     c92:	03 e1       	ldi	r16, 0x13	; 19
     c94:	27 e4       	ldi	r18, 0x47	; 71
     c96:	39 e2       	ldi	r19, 0x29	; 41
     c98:	4e e4       	ldi	r20, 0x4E	; 78
     c9a:	50 e2       	ldi	r21, 0x20	; 32
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	81 e3       	ldi	r24, 0x31	; 49
     ca0:	99 e2       	ldi	r25, 0x29	; 41
     ca2:	0e 94 08 06 	call	0xc10	; 0xc10 <_ZN17SingleInputKeypadC1EhPcPhh>
	}
	if(this->key.kstate == IDLE)
	{
	pinNumber++;
	}
     ca6:	0f 91       	pop	r16
     ca8:	08 95       	ret

00000caa <_ZN3KeyC1Ev>:
#include "Key.h"


// default constructor
Key::Key() {
	kchar = NO_KEY;
     caa:	fc 01       	movw	r30, r24
     cac:	10 82       	st	Z, r1
	kstate = IDLE;
     cae:	13 82       	std	Z+3, r1	; 0x03
     cb0:	08 95       	ret

00000cb2 <_ZN12MatrixKeypad6notifyEv>:
	initTimer10Ms(this->timerNumber);
	this->debounceTime = 500;
	this->holdTime = 3000;
}

MatrixKeypad::~MatrixKeypad(){
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	dc 01       	movw	r26, r24
     cb8:	1c 96       	adiw	r26, 0x0c	; 12
     cba:	9c 91       	ld	r25, X
     cbc:	1c 97       	sbiw	r26, 0x0c	; 12
     cbe:	91 30       	cpi	r25, 0x01	; 1
     cc0:	71 f4       	brne	.+28     	; 0xcde <_ZN12MatrixKeypad6notifyEv+0x2c>
     cc2:	12 96       	adiw	r26, 0x02	; 2
     cc4:	8d 91       	ld	r24, X+
     cc6:	9c 91       	ld	r25, X
     cc8:	13 97       	sbiw	r26, 0x03	; 3
     cca:	ec 01       	movw	r28, r24
     ccc:	e8 81       	ld	r30, Y
     cce:	f9 81       	ldd	r31, Y+1	; 0x01
     cd0:	01 90       	ld	r0, Z+
     cd2:	f0 81       	ld	r31, Z
     cd4:	e0 2d       	mov	r30, r0
     cd6:	19 96       	adiw	r26, 0x09	; 9
     cd8:	6c 91       	ld	r22, X
     cda:	19 95       	eicall
     cdc:	1f c0       	rjmp	.+62     	; 0xd1c <_ZN12MatrixKeypad6notifyEv+0x6a>
     cde:	93 30       	cpi	r25, 0x03	; 3
     ce0:	71 f4       	brne	.+28     	; 0xcfe <_ZN12MatrixKeypad6notifyEv+0x4c>
     ce2:	12 96       	adiw	r26, 0x02	; 2
     ce4:	8d 91       	ld	r24, X+
     ce6:	9c 91       	ld	r25, X
     ce8:	13 97       	sbiw	r26, 0x03	; 3
     cea:	ec 01       	movw	r28, r24
     cec:	e8 81       	ld	r30, Y
     cee:	f9 81       	ldd	r31, Y+1	; 0x01
     cf0:	02 80       	ldd	r0, Z+2	; 0x02
     cf2:	f3 81       	ldd	r31, Z+3	; 0x03
     cf4:	e0 2d       	mov	r30, r0
     cf6:	19 96       	adiw	r26, 0x09	; 9
     cf8:	6c 91       	ld	r22, X
     cfa:	19 95       	eicall
     cfc:	0f c0       	rjmp	.+30     	; 0xd1c <_ZN12MatrixKeypad6notifyEv+0x6a>
     cfe:	92 30       	cpi	r25, 0x02	; 2
     d00:	69 f4       	brne	.+26     	; 0xd1c <_ZN12MatrixKeypad6notifyEv+0x6a>
     d02:	12 96       	adiw	r26, 0x02	; 2
     d04:	8d 91       	ld	r24, X+
     d06:	9c 91       	ld	r25, X
     d08:	13 97       	sbiw	r26, 0x03	; 3
     d0a:	ec 01       	movw	r28, r24
     d0c:	e8 81       	ld	r30, Y
     d0e:	f9 81       	ldd	r31, Y+1	; 0x01
     d10:	04 80       	ldd	r0, Z+4	; 0x04
     d12:	f5 81       	ldd	r31, Z+5	; 0x05
     d14:	e0 2d       	mov	r30, r0
     d16:	19 96       	adiw	r26, 0x09	; 9
     d18:	6c 91       	ld	r22, X
     d1a:	19 95       	eicall
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <_ZN12MatrixKeypad10registerObEP11KeyObserver>:
     d22:	fc 01       	movw	r30, r24
     d24:	62 83       	std	Z+2, r22	; 0x02
     d26:	73 83       	std	Z+3, r23	; 0x03
     d28:	08 95       	ret

00000d2a <_ZN12MatrixKeypad4scanEv>:
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	ec 01       	movw	r28, r24
     d3c:	80 91 5a 29 	lds	r24, 0x295A	; 0x80295a <_ZL1c>
     d40:	ef 89       	ldd	r30, Y+23	; 0x17
     d42:	f8 8d       	ldd	r31, Y+24	; 0x18
     d44:	e8 0f       	add	r30, r24
     d46:	f1 1d       	adc	r31, r1
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <digitalWrite>
     d50:	e0 91 5b 29 	lds	r30, 0x295B	; 0x80295b <_ZL1r>
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	e4 5a       	subi	r30, 0xA4	; 164
     d58:	f6 4d       	sbci	r31, 0xD6	; 214
     d5a:	10 82       	st	Z, r1
     d5c:	80 91 5b 29 	lds	r24, 0x295B	; 0x80295b <_ZL1r>
     d60:	ed 89       	ldd	r30, Y+21	; 0x15
     d62:	fe 89       	ldd	r31, Y+22	; 0x16
     d64:	e8 0f       	add	r30, r24
     d66:	f1 1d       	adc	r31, r1
     d68:	80 81       	ld	r24, Z
     d6a:	0e 94 a8 03 	call	0x750	; 0x750 <digitalRead>
     d6e:	89 2b       	or	r24, r25
     d70:	b1 f4       	brne	.+44     	; 0xd9e <_ZN12MatrixKeypad4scanEv+0x74>
     d72:	30 91 5a 29 	lds	r19, 0x295A	; 0x80295a <_ZL1c>
     d76:	e0 91 5b 29 	lds	r30, 0x295B	; 0x80295b <_ZL1r>
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	e4 5a       	subi	r30, 0xA4	; 164
     d7e:	f6 4d       	sbci	r31, 0xD6	; 214
     d80:	20 81       	ld	r18, Z
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <_ZN12MatrixKeypad4scanEv+0x6a>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	aa 1f       	adc	r26, r26
     d92:	bb 1f       	adc	r27, r27
     d94:	3a 95       	dec	r19
     d96:	d2 f7       	brpl	.-12     	; 0xd8c <_ZN12MatrixKeypad4scanEv+0x62>
     d98:	82 2b       	or	r24, r18
     d9a:	80 83       	st	Z, r24
     d9c:	19 c0       	rjmp	.+50     	; 0xdd0 <_ZN12MatrixKeypad4scanEv+0xa6>
     d9e:	30 91 5a 29 	lds	r19, 0x295A	; 0x80295a <_ZL1c>
     da2:	e0 91 5b 29 	lds	r30, 0x295B	; 0x80295b <_ZL1r>
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	e4 5a       	subi	r30, 0xA4	; 164
     daa:	f6 4d       	sbci	r31, 0xD6	; 214
     dac:	20 81       	ld	r18, Z
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 e0       	ldi	r26, 0x00	; 0
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <_ZN12MatrixKeypad4scanEv+0x96>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	aa 1f       	adc	r26, r26
     dbe:	bb 1f       	adc	r27, r27
     dc0:	3a 95       	dec	r19
     dc2:	d2 f7       	brpl	.-12     	; 0xdb8 <_ZN12MatrixKeypad4scanEv+0x8e>
     dc4:	80 95       	com	r24
     dc6:	90 95       	com	r25
     dc8:	a0 95       	com	r26
     dca:	b0 95       	com	r27
     dcc:	82 23       	and	r24, r18
     dce:	80 83       	st	Z, r24
     dd0:	e0 91 5b 29 	lds	r30, 0x295B	; 0x80295b <_ZL1r>
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	e4 5a       	subi	r30, 0xA4	; 164
     dd8:	f6 4d       	sbci	r31, 0xD6	; 214
     dda:	80 81       	ld	r24, Z
     ddc:	88 23       	and	r24, r24
     dde:	09 f4       	brne	.+2      	; 0xde2 <_ZN12MatrixKeypad4scanEv+0xb8>
     de0:	78 c0       	rjmp	.+240    	; 0xed2 <_ZN12MatrixKeypad4scanEv+0x1a8>
     de2:	80 91 5b 29 	lds	r24, 0x295B	; 0x80295b <_ZL1r>
     de6:	00 91 5a 29 	lds	r16, 0x295A	; 0x80295a <_ZL1c>
     dea:	9c 89       	ldd	r25, Y+20	; 0x14
     dec:	10 e0       	ldi	r17, 0x00	; 0
     dee:	98 9f       	mul	r25, r24
     df0:	00 0d       	add	r16, r0
     df2:	11 1d       	adc	r17, r1
     df4:	11 24       	eor	r1, r1
     df6:	8a 85       	ldd	r24, Y+10	; 0x0a
     df8:	9b 85       	ldd	r25, Y+11	; 0x0b
     dfa:	08 17       	cp	r16, r24
     dfc:	19 07       	cpc	r17, r25
     dfe:	09 f0       	breq	.+2      	; 0xe02 <_ZN12MatrixKeypad4scanEv+0xd8>
     e00:	62 c0       	rjmp	.+196    	; 0xec6 <_ZN12MatrixKeypad4scanEv+0x19c>
     e02:	0e 94 90 02 	call	0x520	; 0x520 <millis>
     e06:	cd 84       	ldd	r12, Y+13	; 0x0d
     e08:	de 84       	ldd	r13, Y+14	; 0x0e
     e0a:	ef 84       	ldd	r14, Y+15	; 0x0f
     e0c:	f8 88       	ldd	r15, Y+16	; 0x10
     e0e:	ab 01       	movw	r20, r22
     e10:	bc 01       	movw	r22, r24
     e12:	4c 19       	sub	r20, r12
     e14:	5d 09       	sbc	r21, r13
     e16:	6e 09       	sbc	r22, r14
     e18:	7f 09       	sbc	r23, r15
     e1a:	8f 81       	ldd	r24, Y+7	; 0x07
     e1c:	98 85       	ldd	r25, Y+8	; 0x08
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	84 17       	cp	r24, r20
     e24:	95 07       	cpc	r25, r21
     e26:	a6 07       	cpc	r26, r22
     e28:	b7 07       	cpc	r27, r23
     e2a:	e0 f4       	brcc	.+56     	; 0xe64 <_ZN12MatrixKeypad4scanEv+0x13a>
     e2c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e2e:	81 11       	cpse	r24, r1
     e30:	19 c0       	rjmp	.+50     	; 0xe64 <_ZN12MatrixKeypad4scanEv+0x13a>
     e32:	0a 87       	std	Y+10, r16	; 0x0a
     e34:	1b 87       	std	Y+11, r17	; 0x0b
     e36:	e9 89       	ldd	r30, Y+17	; 0x11
     e38:	fa 89       	ldd	r31, Y+18	; 0x12
     e3a:	e0 0f       	add	r30, r16
     e3c:	f1 1f       	adc	r31, r17
     e3e:	80 81       	ld	r24, Z
     e40:	89 87       	std	Y+9, r24	; 0x09
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	8c 87       	std	Y+12, r24	; 0x0c
     e46:	f8 94       	cli
     e48:	e8 81       	ld	r30, Y
     e4a:	f9 81       	ldd	r31, Y+1	; 0x01
     e4c:	02 80       	ldd	r0, Z+2	; 0x02
     e4e:	f3 81       	ldd	r31, Z+3	; 0x03
     e50:	e0 2d       	mov	r30, r0
     e52:	ce 01       	movw	r24, r28
     e54:	19 95       	eicall
     e56:	78 94       	sei
     e58:	0e 94 90 02 	call	0x520	; 0x520 <millis>
     e5c:	6d 87       	std	Y+13, r22	; 0x0d
     e5e:	7e 87       	std	Y+14, r23	; 0x0e
     e60:	8f 87       	std	Y+15, r24	; 0x0f
     e62:	98 8b       	std	Y+16, r25	; 0x10
     e64:	0e 94 90 02 	call	0x520	; 0x520 <millis>
     e68:	cd 84       	ldd	r12, Y+13	; 0x0d
     e6a:	de 84       	ldd	r13, Y+14	; 0x0e
     e6c:	ef 84       	ldd	r14, Y+15	; 0x0f
     e6e:	f8 88       	ldd	r15, Y+16	; 0x10
     e70:	ab 01       	movw	r20, r22
     e72:	bc 01       	movw	r22, r24
     e74:	4c 19       	sub	r20, r12
     e76:	5d 09       	sbc	r21, r13
     e78:	6e 09       	sbc	r22, r14
     e7a:	7f 09       	sbc	r23, r15
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	a0 e0       	ldi	r26, 0x00	; 0
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	84 17       	cp	r24, r20
     e86:	95 07       	cpc	r25, r21
     e88:	a6 07       	cpc	r26, r22
     e8a:	b7 07       	cpc	r27, r23
     e8c:	e0 f4       	brcc	.+56     	; 0xec6 <_ZN12MatrixKeypad4scanEv+0x19c>
     e8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	c9 f4       	brne	.+50     	; 0xec6 <_ZN12MatrixKeypad4scanEv+0x19c>
     e94:	0a 87       	std	Y+10, r16	; 0x0a
     e96:	1b 87       	std	Y+11, r17	; 0x0b
     e98:	e9 89       	ldd	r30, Y+17	; 0x11
     e9a:	fa 89       	ldd	r31, Y+18	; 0x12
     e9c:	e0 0f       	add	r30, r16
     e9e:	f1 1f       	adc	r31, r17
     ea0:	80 81       	ld	r24, Z
     ea2:	89 87       	std	Y+9, r24	; 0x09
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	8c 87       	std	Y+12, r24	; 0x0c
     ea8:	f8 94       	cli
     eaa:	e8 81       	ld	r30, Y
     eac:	f9 81       	ldd	r31, Y+1	; 0x01
     eae:	02 80       	ldd	r0, Z+2	; 0x02
     eb0:	f3 81       	ldd	r31, Z+3	; 0x03
     eb2:	e0 2d       	mov	r30, r0
     eb4:	ce 01       	movw	r24, r28
     eb6:	19 95       	eicall
     eb8:	78 94       	sei
     eba:	0e 94 90 02 	call	0x520	; 0x520 <millis>
     ebe:	6d 87       	std	Y+13, r22	; 0x0d
     ec0:	7e 87       	std	Y+14, r23	; 0x0e
     ec2:	8f 87       	std	Y+15, r24	; 0x0f
     ec4:	98 8b       	std	Y+16, r25	; 0x10
     ec6:	0a 87       	std	Y+10, r16	; 0x0a
     ec8:	1b 87       	std	Y+11, r17	; 0x0b
     eca:	8c 85       	ldd	r24, Y+12	; 0x0c
     ecc:	81 11       	cpse	r24, r1
     ece:	33 c0       	rjmp	.+102    	; 0xf36 <_ZN12MatrixKeypad4scanEv+0x20c>
     ed0:	10 c0       	rjmp	.+32     	; 0xef2 <_ZN12MatrixKeypad4scanEv+0x1c8>
     ed2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed4:	81 50       	subi	r24, 0x01	; 1
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	58 f4       	brcc	.+22     	; 0xef0 <_ZN12MatrixKeypad4scanEv+0x1c6>
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	8c 87       	std	Y+12, r24	; 0x0c
     ede:	f8 94       	cli
     ee0:	e8 81       	ld	r30, Y
     ee2:	f9 81       	ldd	r31, Y+1	; 0x01
     ee4:	02 80       	ldd	r0, Z+2	; 0x02
     ee6:	f3 81       	ldd	r31, Z+3	; 0x03
     ee8:	e0 2d       	mov	r30, r0
     eea:	ce 01       	movw	r24, r28
     eec:	19 95       	eicall
     eee:	78 94       	sei
     ef0:	1c 86       	std	Y+12, r1	; 0x0c
     ef2:	80 91 5b 29 	lds	r24, 0x295B	; 0x80295b <_ZL1r>
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	80 93 5b 29 	sts	0x295B, r24	; 0x80295b <_ZL1r>
     efc:	80 91 5b 29 	lds	r24, 0x295B	; 0x80295b <_ZL1r>
     f00:	9b 89       	ldd	r25, Y+19	; 0x13
     f02:	89 17       	cp	r24, r25
     f04:	c0 f0       	brcs	.+48     	; 0xf36 <_ZN12MatrixKeypad4scanEv+0x20c>
     f06:	10 92 5b 29 	sts	0x295B, r1	; 0x80295b <_ZL1r>
     f0a:	80 91 5a 29 	lds	r24, 0x295A	; 0x80295a <_ZL1c>
     f0e:	ef 89       	ldd	r30, Y+23	; 0x17
     f10:	f8 8d       	ldd	r31, Y+24	; 0x18
     f12:	e8 0f       	add	r30, r24
     f14:	f1 1d       	adc	r31, r1
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	80 81       	ld	r24, Z
     f1a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <digitalWrite>
     f1e:	80 91 5a 29 	lds	r24, 0x295A	; 0x80295a <_ZL1c>
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 5a 29 	sts	0x295A, r24	; 0x80295a <_ZL1c>
     f28:	80 91 5a 29 	lds	r24, 0x295A	; 0x80295a <_ZL1c>
     f2c:	9c 89       	ldd	r25, Y+20	; 0x14
     f2e:	89 17       	cp	r24, r25
     f30:	10 f0       	brcs	.+4      	; 0xf36 <_ZN12MatrixKeypad4scanEv+0x20c>
     f32:	10 92 5a 29 	sts	0x295A, r1	; 0x80295a <_ZL1c>
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	08 95       	ret

00000f48 <_ZN12MatrixKeypadC1EhPcPhS1_hh>:
     f48:	8f 92       	push	r8
     f4a:	9f 92       	push	r9
     f4c:	af 92       	push	r10
     f4e:	bf 92       	push	r11
     f50:	cf 92       	push	r12
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	ec 01       	movw	r28, r24
     f60:	f6 2e       	mov	r15, r22
     f62:	4a 01       	movw	r8, r20
     f64:	59 01       	movw	r10, r18
     f66:	8a eb       	ldi	r24, 0xBA	; 186
     f68:	90 e2       	ldi	r25, 0x20	; 32
     f6a:	88 83       	st	Y, r24
     f6c:	99 83       	std	Y+1, r25	; 0x01
     f6e:	ce 01       	movw	r24, r28
     f70:	09 96       	adiw	r24, 0x09	; 9
     f72:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN3KeyC1Ev>
     f76:	fc 82       	std	Y+4, r15	; 0x04
     f78:	89 8a       	std	Y+17, r8	; 0x11
     f7a:	9a 8a       	std	Y+18, r9	; 0x12
     f7c:	ad 8a       	std	Y+21, r10	; 0x15
     f7e:	be 8a       	std	Y+22, r11	; 0x16
     f80:	0f 8b       	std	Y+23, r16	; 0x17
     f82:	18 8f       	std	Y+24, r17	; 0x18
     f84:	eb 8a       	std	Y+19, r14	; 0x13
     f86:	cc 8a       	std	Y+20, r12	; 0x14
     f88:	e1 10       	cpse	r14, r1
     f8a:	05 c0       	rjmp	.+10     	; 0xf96 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x4e>
     f8c:	8c 89       	ldd	r24, Y+20	; 0x14
     f8e:	88 23       	and	r24, r24
     f90:	39 f1       	breq	.+78     	; 0xfe0 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x98>
     f92:	f1 2c       	mov	r15, r1
     f94:	0e c0       	rjmp	.+28     	; 0xfb2 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x6a>
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	ed 89       	ldd	r30, Y+21	; 0x15
     f9a:	fe 89       	ldd	r31, Y+22	; 0x16
     f9c:	e1 0f       	add	r30, r17
     f9e:	f1 1d       	adc	r31, r1
     fa0:	62 e0       	ldi	r22, 0x02	; 2
     fa2:	80 81       	ld	r24, Z
     fa4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <pinMode>
     fa8:	1f 5f       	subi	r17, 0xFF	; 255
     faa:	8b 89       	ldd	r24, Y+19	; 0x13
     fac:	18 17       	cp	r17, r24
     fae:	a0 f3       	brcs	.-24     	; 0xf98 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x50>
     fb0:	ed cf       	rjmp	.-38     	; 0xf8c <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x44>
     fb2:	0f 2d       	mov	r16, r15
     fb4:	10 e0       	ldi	r17, 0x00	; 0
     fb6:	ef 89       	ldd	r30, Y+23	; 0x17
     fb8:	f8 8d       	ldd	r31, Y+24	; 0x18
     fba:	e0 0f       	add	r30, r16
     fbc:	f1 1f       	adc	r31, r17
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	80 81       	ld	r24, Z
     fc2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <pinMode>
     fc6:	8f 89       	ldd	r24, Y+23	; 0x17
     fc8:	98 8d       	ldd	r25, Y+24	; 0x18
     fca:	fc 01       	movw	r30, r24
     fcc:	e0 0f       	add	r30, r16
     fce:	f1 1f       	adc	r31, r17
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	80 81       	ld	r24, Z
     fd4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <digitalWrite>
     fd8:	f3 94       	inc	r15
     fda:	8c 89       	ldd	r24, Y+20	; 0x14
     fdc:	f8 16       	cp	r15, r24
     fde:	48 f3       	brcs	.-46     	; 0xfb2 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x6a>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <initTimer10Ms>
     fe6:	84 ef       	ldi	r24, 0xF4	; 244
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	8f 83       	std	Y+7, r24	; 0x07
     fec:	98 87       	std	Y+8, r25	; 0x08
     fee:	88 eb       	ldi	r24, 0xB8	; 184
     ff0:	9b e0       	ldi	r25, 0x0B	; 11
     ff2:	8d 83       	std	Y+5, r24	; 0x05
     ff4:	9e 83       	std	Y+6, r25	; 0x06
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	cf 90       	pop	r12
    1004:	bf 90       	pop	r11
    1006:	af 90       	pop	r10
    1008:	9f 90       	pop	r9
    100a:	8f 90       	pop	r8
    100c:	08 95       	ret

0000100e <_GLOBAL__sub_I_rows>:
			{
				c=0;
			}
		}
	}
}
    100e:	cf 92       	push	r12
    1010:	ef 92       	push	r14
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
{'1', '2', '3'},
{'4', '5', '6'},
{'7', '8', '9'},
{'r', '0', 'g'}};

MatrixKeypad matrixKeypad(TIM1,(char*)hexaKeys,rows,cols,5,3);
    1016:	0f 2e       	mov	r0, r31
    1018:	f3 e0       	ldi	r31, 0x03	; 3
    101a:	cf 2e       	mov	r12, r31
    101c:	f0 2d       	mov	r31, r0
    101e:	0f 2e       	mov	r0, r31
    1020:	f5 e0       	ldi	r31, 0x05	; 5
    1022:	ef 2e       	mov	r14, r31
    1024:	f0 2d       	mov	r31, r0
    1026:	00 e7       	ldi	r16, 0x70	; 112
    1028:	10 e2       	ldi	r17, 0x20	; 32
    102a:	23 e7       	ldi	r18, 0x73	; 115
    102c:	30 e2       	ldi	r19, 0x20	; 32
    102e:	41 e6       	ldi	r20, 0x61	; 97
    1030:	50 e2       	ldi	r21, 0x20	; 32
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	81 e6       	ldi	r24, 0x61	; 97
    1036:	99 e2       	ldi	r25, 0x29	; 41
    1038:	0e 94 a4 07 	call	0xf48	; 0xf48 <_ZN12MatrixKeypadC1EhPcPhS1_hh>
			{
				c=0;
			}
		}
	}
}
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	ef 90       	pop	r14
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

00001046 <_ZN7IOClass6toggleEv>:
		this->state = HIGH;
		else
		this->state = LOW;
		digitalWrite(this->pin, this->state);
	}
	inline void toggle(void) override
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	ec 01       	movw	r28, r24
	{
		if (this->readstate())
    104c:	e8 81       	ld	r30, Y
    104e:	f9 81       	ldd	r31, Y+1	; 0x01
    1050:	01 90       	ld	r0, Z+
    1052:	f0 81       	ld	r31, Z
    1054:	e0 2d       	mov	r30, r0
    1056:	19 95       	eicall
    1058:	88 23       	and	r24, r24
    105a:	11 f0       	breq	.+4      	; 0x1060 <_ZN7IOClass6toggleEv+0x1a>
		this->state = LOW;
    105c:	1c 82       	std	Y+4, r1	; 0x04
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <_ZN7IOClass6toggleEv+0x1e>
		else
		this->state = HIGH;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	8c 83       	std	Y+4, r24	; 0x04
		digitalWrite(this->pin, this->state);
    1064:	6c 81       	ldd	r22, Y+4	; 0x04
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	0e 94 78 03 	call	0x6f0	; 0x6f0 <digitalWrite>
	}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <_ZN7IOClass2onEv>:
	
	inline bool readstate(void) override
	{
		return (bool)digitalRead(this->pin);
	};
	inline void on(void)
    1072:	fc 01       	movw	r30, r24
	{
		if (!this->activeLevel)
    1074:	83 81       	ldd	r24, Z+3	; 0x03
    1076:	81 11       	cpse	r24, r1
    1078:	02 c0       	rjmp	.+4      	; 0x107e <_ZN7IOClass2onEv+0xc>
		this->state = LOW;
    107a:	14 82       	std	Z+4, r1	; 0x04
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <_ZN7IOClass2onEv+0x10>
		else
		this->state = HIGH;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	84 83       	std	Z+4, r24	; 0x04
		digitalWrite(this->pin, this->state);
    1082:	64 81       	ldd	r22, Z+4	; 0x04
    1084:	82 81       	ldd	r24, Z+2	; 0x02
    1086:	0e 94 78 03 	call	0x6f0	; 0x6f0 <digitalWrite>
    108a:	08 95       	ret

0000108c <_ZN7IOClass3offEv>:
	};
	inline void off(void) override
    108c:	fc 01       	movw	r30, r24
	{
		if (!this->activeLevel)
    108e:	83 81       	ldd	r24, Z+3	; 0x03
    1090:	81 11       	cpse	r24, r1
    1092:	03 c0       	rjmp	.+6      	; 0x109a <_ZN7IOClass3offEv+0xe>
		this->state = HIGH;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	84 83       	std	Z+4, r24	; 0x04
    1098:	01 c0       	rjmp	.+2      	; 0x109c <_ZN7IOClass3offEv+0x10>
		else
		this->state = LOW;
    109a:	14 82       	std	Z+4, r1	; 0x04
		digitalWrite(this->pin, this->state);
    109c:	64 81       	ldd	r22, Z+4	; 0x04
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <digitalWrite>
    10a4:	08 95       	ret

000010a6 <_ZN7IOClass9readstateEv>:
	};
	~IOClass(){};
	
	inline bool readstate(void) override
	{
		return (bool)digitalRead(this->pin);
    10a6:	fc 01       	movw	r30, r24
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	0e 94 a8 03 	call	0x750	; 0x750 <digitalRead>
    10ae:	21 e0       	ldi	r18, 0x01	; 1
    10b0:	89 2b       	or	r24, r25
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <_ZN7IOClass9readstateEv+0x10>
    10b4:	20 e0       	ldi	r18, 0x00	; 0
	};
    10b6:	82 2f       	mov	r24, r18
    10b8:	08 95       	ret

000010ba <_ZN5logic9onKeyHoldEh>:
		{
			pBuzzer->off();
		}
	}
	void onKeyHold(uint8_t ch) override {
		pDebugPort->printf("holdKey : %c\n" , ch);
    10ba:	1f 92       	push	r1
    10bc:	6f 93       	push	r22
    10be:	80 ec       	ldi	r24, 0xC0	; 192
    10c0:	90 e2       	ldi	r25, 0x20	; 32
    10c2:	9f 93       	push	r25
    10c4:	8f 93       	push	r24
    10c6:	80 91 84 29 	lds	r24, 0x2984	; 0x802984 <pDebugPort+0x1>
    10ca:	8f 93       	push	r24
    10cc:	80 91 83 29 	lds	r24, 0x2983	; 0x802983 <pDebugPort>
    10d0:	8f 93       	push	r24
    10d2:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN5Print6printfEPKcz>
	}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	08 95       	ret

000010e4 <_ZN5logic12onKeyReleaseEh>:
		if(ch == '2')
		{
			pBuzzer->on();
		}
	}
	void onKeyRelease(uint8_t ch) override {
    10e4:	cf 93       	push	r28
    10e6:	c6 2f       	mov	r28, r22
		pDebugPort->printf("released : %c\n" , ch);
    10e8:	1f 92       	push	r1
    10ea:	6f 93       	push	r22
    10ec:	8e ec       	ldi	r24, 0xCE	; 206
    10ee:	90 e2       	ldi	r25, 0x20	; 32
    10f0:	9f 93       	push	r25
    10f2:	8f 93       	push	r24
    10f4:	80 91 84 29 	lds	r24, 0x2984	; 0x802984 <pDebugPort+0x1>
    10f8:	8f 93       	push	r24
    10fa:	80 91 83 29 	lds	r24, 0x2983	; 0x802983 <pDebugPort>
    10fe:	8f 93       	push	r24
    1100:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN5Print6printfEPKcz>
		if(ch == '2')
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	c2 33       	cpi	r28, 0x32	; 50
    1112:	59 f4       	brne	.+22     	; 0x112a <_ZN5logic12onKeyReleaseEh+0x46>
		{
			pBuzzer->off();
    1114:	80 91 81 29 	lds	r24, 0x2981	; 0x802981 <pBuzzer>
    1118:	90 91 82 29 	lds	r25, 0x2982	; 0x802982 <pBuzzer+0x1>
    111c:	dc 01       	movw	r26, r24
    111e:	ed 91       	ld	r30, X+
    1120:	fc 91       	ld	r31, X
    1122:	04 80       	ldd	r0, Z+4	; 0x04
    1124:	f5 81       	ldd	r31, Z+5	; 0x05
    1126:	e0 2d       	mov	r30, r0
    1128:	19 95       	eicall
		}
	}
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <_ZN5logic12onKeyPressedEh>:
{
public:
	logic(){}
	~logic(){}
protected:
	void onKeyPressed(uint8_t ch) override {
    112e:	cf 93       	push	r28
    1130:	c6 2f       	mov	r28, r22
		pDebugPort->printf("pressed Key : %c\n" , ch);
    1132:	1f 92       	push	r1
    1134:	6f 93       	push	r22
    1136:	8d ed       	ldi	r24, 0xDD	; 221
    1138:	90 e2       	ldi	r25, 0x20	; 32
    113a:	9f 93       	push	r25
    113c:	8f 93       	push	r24
    113e:	80 91 84 29 	lds	r24, 0x2984	; 0x802984 <pDebugPort+0x1>
    1142:	8f 93       	push	r24
    1144:	80 91 83 29 	lds	r24, 0x2983	; 0x802983 <pDebugPort>
    1148:	8f 93       	push	r24
    114a:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN5Print6printfEPKcz>
		if(ch == '2')
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	c2 33       	cpi	r28, 0x32	; 50
    115c:	59 f4       	brne	.+22     	; 0x1174 <_ZN5logic12onKeyPressedEh+0x46>
		{
			pBuzzer->on();
    115e:	80 91 81 29 	lds	r24, 0x2981	; 0x802981 <pBuzzer>
    1162:	90 91 82 29 	lds	r25, 0x2982	; 0x802982 <pBuzzer+0x1>
    1166:	dc 01       	movw	r26, r24
    1168:	ed 91       	ld	r30, X+
    116a:	fc 91       	ld	r31, X
    116c:	02 80       	ldd	r0, Z+2	; 0x02
    116e:	f3 81       	ldd	r31, Z+3	; 0x03
    1170:	e0 2d       	mov	r30, r0
    1172:	19 95       	eicall
		}
	}
    1174:	cf 91       	pop	r28
    1176:	08 95       	ret

00001178 <__vector_20>:
private:
};


ISR(TCC1_OVF_vect)
{
    1178:	1f 92       	push	r1
    117a:	0f 92       	push	r0
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	08 b6       	in	r0, 0x38	; 56
    1184:	0f 92       	push	r0
    1186:	18 be       	out	0x38, r1	; 56
    1188:	09 b6       	in	r0, 0x39	; 57
    118a:	0f 92       	push	r0
    118c:	19 be       	out	0x39, r1	; 57
    118e:	0b b6       	in	r0, 0x3b	; 59
    1190:	0f 92       	push	r0
    1192:	1b be       	out	0x3b, r1	; 59
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	pKeypad->scan();
    11ac:	80 91 85 29 	lds	r24, 0x2985	; 0x802985 <pKeypad>
    11b0:	90 91 86 29 	lds	r25, 0x2986	; 0x802986 <pKeypad+0x1>
    11b4:	dc 01       	movw	r26, r24
    11b6:	ed 91       	ld	r30, X+
    11b8:	fc 91       	ld	r31, X
    11ba:	04 80       	ldd	r0, Z+4	; 0x04
    11bc:	f5 81       	ldd	r31, Z+5	; 0x05
    11be:	e0 2d       	mov	r30, r0
    11c0:	19 95       	eicall
}
    11c2:	ff 91       	pop	r31
    11c4:	ef 91       	pop	r30
    11c6:	bf 91       	pop	r27
    11c8:	af 91       	pop	r26
    11ca:	9f 91       	pop	r25
    11cc:	8f 91       	pop	r24
    11ce:	7f 91       	pop	r23
    11d0:	6f 91       	pop	r22
    11d2:	5f 91       	pop	r21
    11d4:	4f 91       	pop	r20
    11d6:	3f 91       	pop	r19
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0b be       	out	0x3b, r0	; 59
    11de:	0f 90       	pop	r0
    11e0:	09 be       	out	0x39, r0	; 57
    11e2:	0f 90       	pop	r0
    11e4:	08 be       	out	0x38, r0	; 56
    11e6:	0f 90       	pop	r0
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	0f 90       	pop	r0
    11ec:	1f 90       	pop	r1
    11ee:	18 95       	reti

000011f0 <main>:

logic posLogic;

int main(void)
{
	pKeypad = &matrixKeypad;
    11f0:	81 e6       	ldi	r24, 0x61	; 97
    11f2:	99 e2       	ldi	r25, 0x29	; 41
    11f4:	80 93 85 29 	sts	0x2985, r24	; 0x802985 <pKeypad>
    11f8:	90 93 86 29 	sts	0x2986, r25	; 0x802986 <pKeypad+0x1>
	//posKeypad = &iKeys;
	pDebugPort=&Serial5;
    11fc:	8a e0       	ldi	r24, 0x0A	; 10
    11fe:	91 e2       	ldi	r25, 0x21	; 33
    1200:	80 93 83 29 	sts	0x2983, r24	; 0x802983 <pDebugPort>
    1204:	90 93 84 29 	sts	0x2984, r25	; 0x802984 <pDebugPort+0x1>
	pBuzzer =&buzzer;
    1208:	8c e7       	ldi	r24, 0x7C	; 124
    120a:	99 e2       	ldi	r25, 0x29	; 41
    120c:	80 93 81 29 	sts	0x2981, r24	; 0x802981 <pBuzzer>
    1210:	90 93 82 29 	sts	0x2982, r25	; 0x802982 <pBuzzer+0x1>
	
	
	clockConfig();
    1214:	0e 94 0f 02 	call	0x41e	; 0x41e <clockConfig>
	millisTimerConfig();
    1218:	0e 94 49 02 	call	0x492	; 0x492 <millisTimerConfig>
	pKeypad->registerOb(&posLogic);
    121c:	80 91 85 29 	lds	r24, 0x2985	; 0x802985 <pKeypad>
    1220:	90 91 86 29 	lds	r25, 0x2986	; 0x802986 <pKeypad+0x1>
    1224:	dc 01       	movw	r26, r24
    1226:	ed 91       	ld	r30, X+
    1228:	fc 91       	ld	r31, X
    122a:	01 90       	ld	r0, Z+
    122c:	f0 81       	ld	r31, Z
    122e:	e0 2d       	mov	r30, r0
    1230:	6a e7       	ldi	r22, 0x7A	; 122
    1232:	79 e2       	ldi	r23, 0x29	; 41
    1234:	19 95       	eicall
    1236:	ff cf       	rjmp	.-2      	; 0x1236 <main+0x46>

00001238 <_GLOBAL__sub_I_pKeypad>:
	
	while (1)
	{
	}
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
	uint8_t pin;
	bool activeLevel;
	bool state;
	public:
	IOClass(uint8_t pin, uint8_t dir, bool activeLevel = HIGH)
	{
    123c:	cc e7       	ldi	r28, 0x7C	; 124
    123e:	d9 e2       	ldi	r29, 0x29	; 41
    1240:	83 ef       	ldi	r24, 0xF3	; 243
    1242:	90 e2       	ldi	r25, 0x20	; 32
    1244:	88 83       	st	Y, r24
    1246:	99 83       	std	Y+1, r25	; 0x01
		this->pin = pin;
    1248:	8d e1       	ldi	r24, 0x1D	; 29
    124a:	8a 83       	std	Y+2, r24	; 0x02
		this->activeLevel = activeLevel;
    124c:	1b 82       	std	Y+3, r1	; 0x03
		pinMode(pin, dir);
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	0e 94 da 02 	call	0x5b4	; 0x5b4 <pinMode>
		this->state = HIGH;
		digitalWrite(this->pin, this->state);
	};
	inline void off(void) override
	{
		if (!this->activeLevel)
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	81 11       	cpse	r24, r1
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <_GLOBAL__sub_I_pKeypad+0x2a>
		this->state = HIGH;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 80 29 	sts	0x2980, r24	; 0x802980 <buzzer+0x4>
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <_GLOBAL__sub_I_pKeypad+0x2e>
		else
		this->state = LOW;
    1262:	10 92 80 29 	sts	0x2980, r1	; 0x802980 <buzzer+0x4>
		digitalWrite(this->pin, this->state);
    1266:	ec e7       	ldi	r30, 0x7C	; 124
    1268:	f9 e2       	ldi	r31, 0x29	; 41
    126a:	64 81       	ldd	r22, Z+4	; 0x04
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <digitalWrite>


class logic : public KeyObserver
{
public:
	logic(){}
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	90 e2       	ldi	r25, 0x20	; 32
    1276:	80 93 7a 29 	sts	0x297A, r24	; 0x80297a <posLogic>
    127a:	90 93 7b 29 	sts	0x297B, r25	; 0x80297b <posLogic+0x1>
	pKeypad->registerOb(&posLogic);
	
	while (1)
	{
	}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <__tablejump2__>:
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	88 1f       	adc	r24, r24
    128a:	8b bf       	out	0x3b, r24	; 59
    128c:	07 90       	elpm	r0, Z+
    128e:	f6 91       	elpm	r31, Z
    1290:	e0 2d       	mov	r30, r0
    1292:	1b be       	out	0x3b, r1	; 59
    1294:	19 94       	eijmp

00001296 <vfprintf>:
    1296:	2f 92       	push	r2
    1298:	3f 92       	push	r3
    129a:	4f 92       	push	r4
    129c:	5f 92       	push	r5
    129e:	6f 92       	push	r6
    12a0:	7f 92       	push	r7
    12a2:	8f 92       	push	r8
    12a4:	9f 92       	push	r9
    12a6:	af 92       	push	r10
    12a8:	bf 92       	push	r11
    12aa:	cf 92       	push	r12
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	2b 97       	sbiw	r28, 0x0b	; 11
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	6c 01       	movw	r12, r24
    12c6:	7b 01       	movw	r14, r22
    12c8:	8a 01       	movw	r16, r20
    12ca:	fc 01       	movw	r30, r24
    12cc:	16 82       	std	Z+6, r1	; 0x06
    12ce:	17 82       	std	Z+7, r1	; 0x07
    12d0:	83 81       	ldd	r24, Z+3	; 0x03
    12d2:	81 ff       	sbrs	r24, 1
    12d4:	cc c1       	rjmp	.+920    	; 0x166e <vfprintf+0x3d8>
    12d6:	ce 01       	movw	r24, r28
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	3c 01       	movw	r6, r24
    12dc:	f6 01       	movw	r30, r12
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	f7 01       	movw	r30, r14
    12e2:	93 fd       	sbrc	r25, 3
    12e4:	85 91       	lpm	r24, Z+
    12e6:	93 ff       	sbrs	r25, 3
    12e8:	81 91       	ld	r24, Z+
    12ea:	7f 01       	movw	r14, r30
    12ec:	88 23       	and	r24, r24
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <vfprintf+0x5c>
    12f0:	ba c1       	rjmp	.+884    	; 0x1666 <vfprintf+0x3d0>
    12f2:	85 32       	cpi	r24, 0x25	; 37
    12f4:	39 f4       	brne	.+14     	; 0x1304 <vfprintf+0x6e>
    12f6:	93 fd       	sbrc	r25, 3
    12f8:	85 91       	lpm	r24, Z+
    12fa:	93 ff       	sbrs	r25, 3
    12fc:	81 91       	ld	r24, Z+
    12fe:	7f 01       	movw	r14, r30
    1300:	85 32       	cpi	r24, 0x25	; 37
    1302:	29 f4       	brne	.+10     	; 0x130e <vfprintf+0x78>
    1304:	b6 01       	movw	r22, r12
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 65 0b 	call	0x16ca	; 0x16ca <fputc>
    130c:	e7 cf       	rjmp	.-50     	; 0x12dc <vfprintf+0x46>
    130e:	91 2c       	mov	r9, r1
    1310:	21 2c       	mov	r2, r1
    1312:	31 2c       	mov	r3, r1
    1314:	ff e1       	ldi	r31, 0x1F	; 31
    1316:	f3 15       	cp	r31, r3
    1318:	d8 f0       	brcs	.+54     	; 0x1350 <vfprintf+0xba>
    131a:	8b 32       	cpi	r24, 0x2B	; 43
    131c:	79 f0       	breq	.+30     	; 0x133c <vfprintf+0xa6>
    131e:	38 f4       	brcc	.+14     	; 0x132e <vfprintf+0x98>
    1320:	80 32       	cpi	r24, 0x20	; 32
    1322:	79 f0       	breq	.+30     	; 0x1342 <vfprintf+0xac>
    1324:	83 32       	cpi	r24, 0x23	; 35
    1326:	a1 f4       	brne	.+40     	; 0x1350 <vfprintf+0xba>
    1328:	23 2d       	mov	r18, r3
    132a:	20 61       	ori	r18, 0x10	; 16
    132c:	1d c0       	rjmp	.+58     	; 0x1368 <vfprintf+0xd2>
    132e:	8d 32       	cpi	r24, 0x2D	; 45
    1330:	61 f0       	breq	.+24     	; 0x134a <vfprintf+0xb4>
    1332:	80 33       	cpi	r24, 0x30	; 48
    1334:	69 f4       	brne	.+26     	; 0x1350 <vfprintf+0xba>
    1336:	23 2d       	mov	r18, r3
    1338:	21 60       	ori	r18, 0x01	; 1
    133a:	16 c0       	rjmp	.+44     	; 0x1368 <vfprintf+0xd2>
    133c:	83 2d       	mov	r24, r3
    133e:	82 60       	ori	r24, 0x02	; 2
    1340:	38 2e       	mov	r3, r24
    1342:	e3 2d       	mov	r30, r3
    1344:	e4 60       	ori	r30, 0x04	; 4
    1346:	3e 2e       	mov	r3, r30
    1348:	2a c0       	rjmp	.+84     	; 0x139e <vfprintf+0x108>
    134a:	f3 2d       	mov	r31, r3
    134c:	f8 60       	ori	r31, 0x08	; 8
    134e:	1d c0       	rjmp	.+58     	; 0x138a <vfprintf+0xf4>
    1350:	37 fc       	sbrc	r3, 7
    1352:	2d c0       	rjmp	.+90     	; 0x13ae <vfprintf+0x118>
    1354:	20 ed       	ldi	r18, 0xD0	; 208
    1356:	28 0f       	add	r18, r24
    1358:	2a 30       	cpi	r18, 0x0A	; 10
    135a:	40 f0       	brcs	.+16     	; 0x136c <vfprintf+0xd6>
    135c:	8e 32       	cpi	r24, 0x2E	; 46
    135e:	b9 f4       	brne	.+46     	; 0x138e <vfprintf+0xf8>
    1360:	36 fc       	sbrc	r3, 6
    1362:	81 c1       	rjmp	.+770    	; 0x1666 <vfprintf+0x3d0>
    1364:	23 2d       	mov	r18, r3
    1366:	20 64       	ori	r18, 0x40	; 64
    1368:	32 2e       	mov	r3, r18
    136a:	19 c0       	rjmp	.+50     	; 0x139e <vfprintf+0x108>
    136c:	36 fe       	sbrs	r3, 6
    136e:	06 c0       	rjmp	.+12     	; 0x137c <vfprintf+0xe6>
    1370:	8a e0       	ldi	r24, 0x0A	; 10
    1372:	98 9e       	mul	r9, r24
    1374:	20 0d       	add	r18, r0
    1376:	11 24       	eor	r1, r1
    1378:	92 2e       	mov	r9, r18
    137a:	11 c0       	rjmp	.+34     	; 0x139e <vfprintf+0x108>
    137c:	ea e0       	ldi	r30, 0x0A	; 10
    137e:	2e 9e       	mul	r2, r30
    1380:	20 0d       	add	r18, r0
    1382:	11 24       	eor	r1, r1
    1384:	22 2e       	mov	r2, r18
    1386:	f3 2d       	mov	r31, r3
    1388:	f0 62       	ori	r31, 0x20	; 32
    138a:	3f 2e       	mov	r3, r31
    138c:	08 c0       	rjmp	.+16     	; 0x139e <vfprintf+0x108>
    138e:	8c 36       	cpi	r24, 0x6C	; 108
    1390:	21 f4       	brne	.+8      	; 0x139a <vfprintf+0x104>
    1392:	83 2d       	mov	r24, r3
    1394:	80 68       	ori	r24, 0x80	; 128
    1396:	38 2e       	mov	r3, r24
    1398:	02 c0       	rjmp	.+4      	; 0x139e <vfprintf+0x108>
    139a:	88 36       	cpi	r24, 0x68	; 104
    139c:	41 f4       	brne	.+16     	; 0x13ae <vfprintf+0x118>
    139e:	f7 01       	movw	r30, r14
    13a0:	93 fd       	sbrc	r25, 3
    13a2:	85 91       	lpm	r24, Z+
    13a4:	93 ff       	sbrs	r25, 3
    13a6:	81 91       	ld	r24, Z+
    13a8:	7f 01       	movw	r14, r30
    13aa:	81 11       	cpse	r24, r1
    13ac:	b3 cf       	rjmp	.-154    	; 0x1314 <vfprintf+0x7e>
    13ae:	98 2f       	mov	r25, r24
    13b0:	9f 7d       	andi	r25, 0xDF	; 223
    13b2:	95 54       	subi	r25, 0x45	; 69
    13b4:	93 30       	cpi	r25, 0x03	; 3
    13b6:	28 f4       	brcc	.+10     	; 0x13c2 <vfprintf+0x12c>
    13b8:	0c 5f       	subi	r16, 0xFC	; 252
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	9f e3       	ldi	r25, 0x3F	; 63
    13be:	99 83       	std	Y+1, r25	; 0x01
    13c0:	0d c0       	rjmp	.+26     	; 0x13dc <vfprintf+0x146>
    13c2:	83 36       	cpi	r24, 0x63	; 99
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <vfprintf+0x13c>
    13c6:	83 37       	cpi	r24, 0x73	; 115
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <vfprintf+0x150>
    13ca:	83 35       	cpi	r24, 0x53	; 83
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <vfprintf+0x13a>
    13ce:	59 c0       	rjmp	.+178    	; 0x1482 <vfprintf+0x1ec>
    13d0:	21 c0       	rjmp	.+66     	; 0x1414 <vfprintf+0x17e>
    13d2:	f8 01       	movw	r30, r16
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	0e 5f       	subi	r16, 0xFE	; 254
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	88 24       	eor	r8, r8
    13de:	83 94       	inc	r8
    13e0:	91 2c       	mov	r9, r1
    13e2:	53 01       	movw	r10, r6
    13e4:	13 c0       	rjmp	.+38     	; 0x140c <vfprintf+0x176>
    13e6:	28 01       	movw	r4, r16
    13e8:	f2 e0       	ldi	r31, 0x02	; 2
    13ea:	4f 0e       	add	r4, r31
    13ec:	51 1c       	adc	r5, r1
    13ee:	f8 01       	movw	r30, r16
    13f0:	a0 80       	ld	r10, Z
    13f2:	b1 80       	ldd	r11, Z+1	; 0x01
    13f4:	36 fe       	sbrs	r3, 6
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <vfprintf+0x168>
    13f8:	69 2d       	mov	r22, r9
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <vfprintf+0x16c>
    13fe:	6f ef       	ldi	r22, 0xFF	; 255
    1400:	7f ef       	ldi	r23, 0xFF	; 255
    1402:	c5 01       	movw	r24, r10
    1404:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <strnlen>
    1408:	4c 01       	movw	r8, r24
    140a:	82 01       	movw	r16, r4
    140c:	f3 2d       	mov	r31, r3
    140e:	ff 77       	andi	r31, 0x7F	; 127
    1410:	3f 2e       	mov	r3, r31
    1412:	16 c0       	rjmp	.+44     	; 0x1440 <vfprintf+0x1aa>
    1414:	28 01       	movw	r4, r16
    1416:	22 e0       	ldi	r18, 0x02	; 2
    1418:	42 0e       	add	r4, r18
    141a:	51 1c       	adc	r5, r1
    141c:	f8 01       	movw	r30, r16
    141e:	a0 80       	ld	r10, Z
    1420:	b1 80       	ldd	r11, Z+1	; 0x01
    1422:	36 fe       	sbrs	r3, 6
    1424:	03 c0       	rjmp	.+6      	; 0x142c <vfprintf+0x196>
    1426:	69 2d       	mov	r22, r9
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <vfprintf+0x19a>
    142c:	6f ef       	ldi	r22, 0xFF	; 255
    142e:	7f ef       	ldi	r23, 0xFF	; 255
    1430:	c5 01       	movw	r24, r10
    1432:	0e 94 4f 0b 	call	0x169e	; 0x169e <strnlen_P>
    1436:	4c 01       	movw	r8, r24
    1438:	f3 2d       	mov	r31, r3
    143a:	f0 68       	ori	r31, 0x80	; 128
    143c:	3f 2e       	mov	r3, r31
    143e:	82 01       	movw	r16, r4
    1440:	33 fc       	sbrc	r3, 3
    1442:	1b c0       	rjmp	.+54     	; 0x147a <vfprintf+0x1e4>
    1444:	82 2d       	mov	r24, r2
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	88 16       	cp	r8, r24
    144a:	99 06       	cpc	r9, r25
    144c:	b0 f4       	brcc	.+44     	; 0x147a <vfprintf+0x1e4>
    144e:	b6 01       	movw	r22, r12
    1450:	80 e2       	ldi	r24, 0x20	; 32
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 65 0b 	call	0x16ca	; 0x16ca <fputc>
    1458:	2a 94       	dec	r2
    145a:	f4 cf       	rjmp	.-24     	; 0x1444 <vfprintf+0x1ae>
    145c:	f5 01       	movw	r30, r10
    145e:	37 fc       	sbrc	r3, 7
    1460:	85 91       	lpm	r24, Z+
    1462:	37 fe       	sbrs	r3, 7
    1464:	81 91       	ld	r24, Z+
    1466:	5f 01       	movw	r10, r30
    1468:	b6 01       	movw	r22, r12
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <fputc>
    1470:	21 10       	cpse	r2, r1
    1472:	2a 94       	dec	r2
    1474:	21 e0       	ldi	r18, 0x01	; 1
    1476:	82 1a       	sub	r8, r18
    1478:	91 08       	sbc	r9, r1
    147a:	81 14       	cp	r8, r1
    147c:	91 04       	cpc	r9, r1
    147e:	71 f7       	brne	.-36     	; 0x145c <vfprintf+0x1c6>
    1480:	e8 c0       	rjmp	.+464    	; 0x1652 <vfprintf+0x3bc>
    1482:	84 36       	cpi	r24, 0x64	; 100
    1484:	11 f0       	breq	.+4      	; 0x148a <vfprintf+0x1f4>
    1486:	89 36       	cpi	r24, 0x69	; 105
    1488:	41 f5       	brne	.+80     	; 0x14da <vfprintf+0x244>
    148a:	f8 01       	movw	r30, r16
    148c:	37 fe       	sbrs	r3, 7
    148e:	07 c0       	rjmp	.+14     	; 0x149e <vfprintf+0x208>
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	0c 5f       	subi	r16, 0xFC	; 252
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	08 c0       	rjmp	.+16     	; 0x14ae <vfprintf+0x218>
    149e:	60 81       	ld	r22, Z
    14a0:	71 81       	ldd	r23, Z+1	; 0x01
    14a2:	07 2e       	mov	r0, r23
    14a4:	00 0c       	add	r0, r0
    14a6:	88 0b       	sbc	r24, r24
    14a8:	99 0b       	sbc	r25, r25
    14aa:	0e 5f       	subi	r16, 0xFE	; 254
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	f3 2d       	mov	r31, r3
    14b0:	ff 76       	andi	r31, 0x6F	; 111
    14b2:	3f 2e       	mov	r3, r31
    14b4:	97 ff       	sbrs	r25, 7
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <vfprintf+0x234>
    14b8:	90 95       	com	r25
    14ba:	80 95       	com	r24
    14bc:	70 95       	com	r23
    14be:	61 95       	neg	r22
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	8f 4f       	sbci	r24, 0xFF	; 255
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	f0 68       	ori	r31, 0x80	; 128
    14c8:	3f 2e       	mov	r3, r31
    14ca:	2a e0       	ldi	r18, 0x0A	; 10
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	a3 01       	movw	r20, r6
    14d0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__ultoa_invert>
    14d4:	88 2e       	mov	r8, r24
    14d6:	86 18       	sub	r8, r6
    14d8:	45 c0       	rjmp	.+138    	; 0x1564 <vfprintf+0x2ce>
    14da:	85 37       	cpi	r24, 0x75	; 117
    14dc:	31 f4       	brne	.+12     	; 0x14ea <vfprintf+0x254>
    14de:	23 2d       	mov	r18, r3
    14e0:	2f 7e       	andi	r18, 0xEF	; 239
    14e2:	b2 2e       	mov	r11, r18
    14e4:	2a e0       	ldi	r18, 0x0A	; 10
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	25 c0       	rjmp	.+74     	; 0x1534 <vfprintf+0x29e>
    14ea:	93 2d       	mov	r25, r3
    14ec:	99 7f       	andi	r25, 0xF9	; 249
    14ee:	b9 2e       	mov	r11, r25
    14f0:	8f 36       	cpi	r24, 0x6F	; 111
    14f2:	c1 f0       	breq	.+48     	; 0x1524 <vfprintf+0x28e>
    14f4:	18 f4       	brcc	.+6      	; 0x14fc <vfprintf+0x266>
    14f6:	88 35       	cpi	r24, 0x58	; 88
    14f8:	79 f0       	breq	.+30     	; 0x1518 <vfprintf+0x282>
    14fa:	b5 c0       	rjmp	.+362    	; 0x1666 <vfprintf+0x3d0>
    14fc:	80 37       	cpi	r24, 0x70	; 112
    14fe:	19 f0       	breq	.+6      	; 0x1506 <vfprintf+0x270>
    1500:	88 37       	cpi	r24, 0x78	; 120
    1502:	21 f0       	breq	.+8      	; 0x150c <vfprintf+0x276>
    1504:	b0 c0       	rjmp	.+352    	; 0x1666 <vfprintf+0x3d0>
    1506:	e9 2f       	mov	r30, r25
    1508:	e0 61       	ori	r30, 0x10	; 16
    150a:	be 2e       	mov	r11, r30
    150c:	b4 fe       	sbrs	r11, 4
    150e:	0d c0       	rjmp	.+26     	; 0x152a <vfprintf+0x294>
    1510:	fb 2d       	mov	r31, r11
    1512:	f4 60       	ori	r31, 0x04	; 4
    1514:	bf 2e       	mov	r11, r31
    1516:	09 c0       	rjmp	.+18     	; 0x152a <vfprintf+0x294>
    1518:	34 fe       	sbrs	r3, 4
    151a:	0a c0       	rjmp	.+20     	; 0x1530 <vfprintf+0x29a>
    151c:	29 2f       	mov	r18, r25
    151e:	26 60       	ori	r18, 0x06	; 6
    1520:	b2 2e       	mov	r11, r18
    1522:	06 c0       	rjmp	.+12     	; 0x1530 <vfprintf+0x29a>
    1524:	28 e0       	ldi	r18, 0x08	; 8
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <vfprintf+0x29e>
    152a:	20 e1       	ldi	r18, 0x10	; 16
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <vfprintf+0x29e>
    1530:	20 e1       	ldi	r18, 0x10	; 16
    1532:	32 e0       	ldi	r19, 0x02	; 2
    1534:	f8 01       	movw	r30, r16
    1536:	b7 fe       	sbrs	r11, 7
    1538:	07 c0       	rjmp	.+14     	; 0x1548 <vfprintf+0x2b2>
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	0c 5f       	subi	r16, 0xFC	; 252
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <vfprintf+0x2be>
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 5f       	subi	r16, 0xFE	; 254
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	a3 01       	movw	r20, r6
    1556:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__ultoa_invert>
    155a:	88 2e       	mov	r8, r24
    155c:	86 18       	sub	r8, r6
    155e:	fb 2d       	mov	r31, r11
    1560:	ff 77       	andi	r31, 0x7F	; 127
    1562:	3f 2e       	mov	r3, r31
    1564:	36 fe       	sbrs	r3, 6
    1566:	0d c0       	rjmp	.+26     	; 0x1582 <vfprintf+0x2ec>
    1568:	23 2d       	mov	r18, r3
    156a:	2e 7f       	andi	r18, 0xFE	; 254
    156c:	a2 2e       	mov	r10, r18
    156e:	89 14       	cp	r8, r9
    1570:	58 f4       	brcc	.+22     	; 0x1588 <vfprintf+0x2f2>
    1572:	34 fe       	sbrs	r3, 4
    1574:	0b c0       	rjmp	.+22     	; 0x158c <vfprintf+0x2f6>
    1576:	32 fc       	sbrc	r3, 2
    1578:	09 c0       	rjmp	.+18     	; 0x158c <vfprintf+0x2f6>
    157a:	83 2d       	mov	r24, r3
    157c:	8e 7e       	andi	r24, 0xEE	; 238
    157e:	a8 2e       	mov	r10, r24
    1580:	05 c0       	rjmp	.+10     	; 0x158c <vfprintf+0x2f6>
    1582:	b8 2c       	mov	r11, r8
    1584:	a3 2c       	mov	r10, r3
    1586:	03 c0       	rjmp	.+6      	; 0x158e <vfprintf+0x2f8>
    1588:	b8 2c       	mov	r11, r8
    158a:	01 c0       	rjmp	.+2      	; 0x158e <vfprintf+0x2f8>
    158c:	b9 2c       	mov	r11, r9
    158e:	a4 fe       	sbrs	r10, 4
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <vfprintf+0x31a>
    1592:	fe 01       	movw	r30, r28
    1594:	e8 0d       	add	r30, r8
    1596:	f1 1d       	adc	r31, r1
    1598:	80 81       	ld	r24, Z
    159a:	80 33       	cpi	r24, 0x30	; 48
    159c:	21 f4       	brne	.+8      	; 0x15a6 <vfprintf+0x310>
    159e:	9a 2d       	mov	r25, r10
    15a0:	99 7e       	andi	r25, 0xE9	; 233
    15a2:	a9 2e       	mov	r10, r25
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <vfprintf+0x322>
    15a6:	a2 fe       	sbrs	r10, 2
    15a8:	06 c0       	rjmp	.+12     	; 0x15b6 <vfprintf+0x320>
    15aa:	b3 94       	inc	r11
    15ac:	b3 94       	inc	r11
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <vfprintf+0x322>
    15b0:	8a 2d       	mov	r24, r10
    15b2:	86 78       	andi	r24, 0x86	; 134
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <vfprintf+0x322>
    15b6:	b3 94       	inc	r11
    15b8:	a3 fc       	sbrc	r10, 3
    15ba:	11 c0       	rjmp	.+34     	; 0x15de <vfprintf+0x348>
    15bc:	a0 fe       	sbrs	r10, 0
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <vfprintf+0x336>
    15c0:	b2 14       	cp	r11, r2
    15c2:	88 f4       	brcc	.+34     	; 0x15e6 <vfprintf+0x350>
    15c4:	28 0c       	add	r2, r8
    15c6:	92 2c       	mov	r9, r2
    15c8:	9b 18       	sub	r9, r11
    15ca:	0e c0       	rjmp	.+28     	; 0x15e8 <vfprintf+0x352>
    15cc:	b2 14       	cp	r11, r2
    15ce:	60 f4       	brcc	.+24     	; 0x15e8 <vfprintf+0x352>
    15d0:	b6 01       	movw	r22, r12
    15d2:	80 e2       	ldi	r24, 0x20	; 32
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <fputc>
    15da:	b3 94       	inc	r11
    15dc:	f7 cf       	rjmp	.-18     	; 0x15cc <vfprintf+0x336>
    15de:	b2 14       	cp	r11, r2
    15e0:	18 f4       	brcc	.+6      	; 0x15e8 <vfprintf+0x352>
    15e2:	2b 18       	sub	r2, r11
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <vfprintf+0x354>
    15e6:	98 2c       	mov	r9, r8
    15e8:	21 2c       	mov	r2, r1
    15ea:	a4 fe       	sbrs	r10, 4
    15ec:	10 c0       	rjmp	.+32     	; 0x160e <vfprintf+0x378>
    15ee:	b6 01       	movw	r22, r12
    15f0:	80 e3       	ldi	r24, 0x30	; 48
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <fputc>
    15f8:	a2 fe       	sbrs	r10, 2
    15fa:	17 c0       	rjmp	.+46     	; 0x162a <vfprintf+0x394>
    15fc:	a1 fc       	sbrc	r10, 1
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <vfprintf+0x370>
    1600:	88 e7       	ldi	r24, 0x78	; 120
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 c0       	rjmp	.+4      	; 0x160a <vfprintf+0x374>
    1606:	88 e5       	ldi	r24, 0x58	; 88
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	b6 01       	movw	r22, r12
    160c:	0c c0       	rjmp	.+24     	; 0x1626 <vfprintf+0x390>
    160e:	8a 2d       	mov	r24, r10
    1610:	86 78       	andi	r24, 0x86	; 134
    1612:	59 f0       	breq	.+22     	; 0x162a <vfprintf+0x394>
    1614:	a1 fe       	sbrs	r10, 1
    1616:	02 c0       	rjmp	.+4      	; 0x161c <vfprintf+0x386>
    1618:	8b e2       	ldi	r24, 0x2B	; 43
    161a:	01 c0       	rjmp	.+2      	; 0x161e <vfprintf+0x388>
    161c:	80 e2       	ldi	r24, 0x20	; 32
    161e:	a7 fc       	sbrc	r10, 7
    1620:	8d e2       	ldi	r24, 0x2D	; 45
    1622:	b6 01       	movw	r22, r12
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 65 0b 	call	0x16ca	; 0x16ca <fputc>
    162a:	89 14       	cp	r8, r9
    162c:	38 f4       	brcc	.+14     	; 0x163c <vfprintf+0x3a6>
    162e:	b6 01       	movw	r22, r12
    1630:	80 e3       	ldi	r24, 0x30	; 48
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 65 0b 	call	0x16ca	; 0x16ca <fputc>
    1638:	9a 94       	dec	r9
    163a:	f7 cf       	rjmp	.-18     	; 0x162a <vfprintf+0x394>
    163c:	8a 94       	dec	r8
    163e:	f3 01       	movw	r30, r6
    1640:	e8 0d       	add	r30, r8
    1642:	f1 1d       	adc	r31, r1
    1644:	80 81       	ld	r24, Z
    1646:	b6 01       	movw	r22, r12
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <fputc>
    164e:	81 10       	cpse	r8, r1
    1650:	f5 cf       	rjmp	.-22     	; 0x163c <vfprintf+0x3a6>
    1652:	22 20       	and	r2, r2
    1654:	09 f4       	brne	.+2      	; 0x1658 <vfprintf+0x3c2>
    1656:	42 ce       	rjmp	.-892    	; 0x12dc <vfprintf+0x46>
    1658:	b6 01       	movw	r22, r12
    165a:	80 e2       	ldi	r24, 0x20	; 32
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <fputc>
    1662:	2a 94       	dec	r2
    1664:	f6 cf       	rjmp	.-20     	; 0x1652 <vfprintf+0x3bc>
    1666:	f6 01       	movw	r30, r12
    1668:	86 81       	ldd	r24, Z+6	; 0x06
    166a:	97 81       	ldd	r25, Z+7	; 0x07
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <vfprintf+0x3dc>
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	9f ef       	ldi	r25, 0xFF	; 255
    1672:	2b 96       	adiw	r28, 0x0b	; 11
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	af 90       	pop	r10
    168c:	9f 90       	pop	r9
    168e:	8f 90       	pop	r8
    1690:	7f 90       	pop	r7
    1692:	6f 90       	pop	r6
    1694:	5f 90       	pop	r5
    1696:	4f 90       	pop	r4
    1698:	3f 90       	pop	r3
    169a:	2f 90       	pop	r2
    169c:	08 95       	ret

0000169e <strnlen_P>:
    169e:	fc 01       	movw	r30, r24
    16a0:	05 90       	lpm	r0, Z+
    16a2:	61 50       	subi	r22, 0x01	; 1
    16a4:	70 40       	sbci	r23, 0x00	; 0
    16a6:	01 10       	cpse	r0, r1
    16a8:	d8 f7       	brcc	.-10     	; 0x16a0 <strnlen_P+0x2>
    16aa:	80 95       	com	r24
    16ac:	90 95       	com	r25
    16ae:	8e 0f       	add	r24, r30
    16b0:	9f 1f       	adc	r25, r31
    16b2:	08 95       	ret

000016b4 <strnlen>:
    16b4:	fc 01       	movw	r30, r24
    16b6:	61 50       	subi	r22, 0x01	; 1
    16b8:	70 40       	sbci	r23, 0x00	; 0
    16ba:	01 90       	ld	r0, Z+
    16bc:	01 10       	cpse	r0, r1
    16be:	d8 f7       	brcc	.-10     	; 0x16b6 <strnlen+0x2>
    16c0:	80 95       	com	r24
    16c2:	90 95       	com	r25
    16c4:	8e 0f       	add	r24, r30
    16c6:	9f 1f       	adc	r25, r31
    16c8:	08 95       	ret

000016ca <fputc>:
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	fb 01       	movw	r30, r22
    16d4:	23 81       	ldd	r18, Z+3	; 0x03
    16d6:	21 fd       	sbrc	r18, 1
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <fputc+0x16>
    16da:	8f ef       	ldi	r24, 0xFF	; 255
    16dc:	9f ef       	ldi	r25, 0xFF	; 255
    16de:	2c c0       	rjmp	.+88     	; 0x1738 <fputc+0x6e>
    16e0:	22 ff       	sbrs	r18, 2
    16e2:	16 c0       	rjmp	.+44     	; 0x1710 <fputc+0x46>
    16e4:	46 81       	ldd	r20, Z+6	; 0x06
    16e6:	57 81       	ldd	r21, Z+7	; 0x07
    16e8:	24 81       	ldd	r18, Z+4	; 0x04
    16ea:	35 81       	ldd	r19, Z+5	; 0x05
    16ec:	42 17       	cp	r20, r18
    16ee:	53 07       	cpc	r21, r19
    16f0:	44 f4       	brge	.+16     	; 0x1702 <fputc+0x38>
    16f2:	a0 81       	ld	r26, Z
    16f4:	b1 81       	ldd	r27, Z+1	; 0x01
    16f6:	9d 01       	movw	r18, r26
    16f8:	2f 5f       	subi	r18, 0xFF	; 255
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	20 83       	st	Z, r18
    16fe:	31 83       	std	Z+1, r19	; 0x01
    1700:	8c 93       	st	X, r24
    1702:	26 81       	ldd	r18, Z+6	; 0x06
    1704:	37 81       	ldd	r19, Z+7	; 0x07
    1706:	2f 5f       	subi	r18, 0xFF	; 255
    1708:	3f 4f       	sbci	r19, 0xFF	; 255
    170a:	26 83       	std	Z+6, r18	; 0x06
    170c:	37 83       	std	Z+7, r19	; 0x07
    170e:	14 c0       	rjmp	.+40     	; 0x1738 <fputc+0x6e>
    1710:	8b 01       	movw	r16, r22
    1712:	ec 01       	movw	r28, r24
    1714:	fb 01       	movw	r30, r22
    1716:	00 84       	ldd	r0, Z+8	; 0x08
    1718:	f1 85       	ldd	r31, Z+9	; 0x09
    171a:	e0 2d       	mov	r30, r0
    171c:	19 95       	eicall
    171e:	89 2b       	or	r24, r25
    1720:	e1 f6       	brne	.-72     	; 0x16da <fputc+0x10>
    1722:	d8 01       	movw	r26, r16
    1724:	16 96       	adiw	r26, 0x06	; 6
    1726:	8d 91       	ld	r24, X+
    1728:	9c 91       	ld	r25, X
    172a:	17 97       	sbiw	r26, 0x07	; 7
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	16 96       	adiw	r26, 0x06	; 6
    1730:	8d 93       	st	X+, r24
    1732:	9c 93       	st	X, r25
    1734:	17 97       	sbiw	r26, 0x07	; 7
    1736:	ce 01       	movw	r24, r28
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <__ultoa_invert>:
    1742:	fa 01       	movw	r30, r20
    1744:	aa 27       	eor	r26, r26
    1746:	28 30       	cpi	r18, 0x08	; 8
    1748:	51 f1       	breq	.+84     	; 0x179e <__ultoa_invert+0x5c>
    174a:	20 31       	cpi	r18, 0x10	; 16
    174c:	81 f1       	breq	.+96     	; 0x17ae <__ultoa_invert+0x6c>
    174e:	e8 94       	clt
    1750:	6f 93       	push	r22
    1752:	6e 7f       	andi	r22, 0xFE	; 254
    1754:	6e 5f       	subi	r22, 0xFE	; 254
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	8f 4f       	sbci	r24, 0xFF	; 255
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	af 4f       	sbci	r26, 0xFF	; 255
    175e:	b1 e0       	ldi	r27, 0x01	; 1
    1760:	3e d0       	rcall	.+124    	; 0x17de <__ultoa_invert+0x9c>
    1762:	b4 e0       	ldi	r27, 0x04	; 4
    1764:	3c d0       	rcall	.+120    	; 0x17de <__ultoa_invert+0x9c>
    1766:	67 0f       	add	r22, r23
    1768:	78 1f       	adc	r23, r24
    176a:	89 1f       	adc	r24, r25
    176c:	9a 1f       	adc	r25, r26
    176e:	a1 1d       	adc	r26, r1
    1770:	68 0f       	add	r22, r24
    1772:	79 1f       	adc	r23, r25
    1774:	8a 1f       	adc	r24, r26
    1776:	91 1d       	adc	r25, r1
    1778:	a1 1d       	adc	r26, r1
    177a:	6a 0f       	add	r22, r26
    177c:	71 1d       	adc	r23, r1
    177e:	81 1d       	adc	r24, r1
    1780:	91 1d       	adc	r25, r1
    1782:	a1 1d       	adc	r26, r1
    1784:	20 d0       	rcall	.+64     	; 0x17c6 <__ultoa_invert+0x84>
    1786:	09 f4       	brne	.+2      	; 0x178a <__ultoa_invert+0x48>
    1788:	68 94       	set
    178a:	3f 91       	pop	r19
    178c:	2a e0       	ldi	r18, 0x0A	; 10
    178e:	26 9f       	mul	r18, r22
    1790:	11 24       	eor	r1, r1
    1792:	30 19       	sub	r19, r0
    1794:	30 5d       	subi	r19, 0xD0	; 208
    1796:	31 93       	st	Z+, r19
    1798:	de f6       	brtc	.-74     	; 0x1750 <__ultoa_invert+0xe>
    179a:	cf 01       	movw	r24, r30
    179c:	08 95       	ret
    179e:	46 2f       	mov	r20, r22
    17a0:	47 70       	andi	r20, 0x07	; 7
    17a2:	40 5d       	subi	r20, 0xD0	; 208
    17a4:	41 93       	st	Z+, r20
    17a6:	b3 e0       	ldi	r27, 0x03	; 3
    17a8:	0f d0       	rcall	.+30     	; 0x17c8 <__ultoa_invert+0x86>
    17aa:	c9 f7       	brne	.-14     	; 0x179e <__ultoa_invert+0x5c>
    17ac:	f6 cf       	rjmp	.-20     	; 0x179a <__ultoa_invert+0x58>
    17ae:	46 2f       	mov	r20, r22
    17b0:	4f 70       	andi	r20, 0x0F	; 15
    17b2:	40 5d       	subi	r20, 0xD0	; 208
    17b4:	4a 33       	cpi	r20, 0x3A	; 58
    17b6:	18 f0       	brcs	.+6      	; 0x17be <__ultoa_invert+0x7c>
    17b8:	49 5d       	subi	r20, 0xD9	; 217
    17ba:	31 fd       	sbrc	r19, 1
    17bc:	40 52       	subi	r20, 0x20	; 32
    17be:	41 93       	st	Z+, r20
    17c0:	02 d0       	rcall	.+4      	; 0x17c6 <__ultoa_invert+0x84>
    17c2:	a9 f7       	brne	.-22     	; 0x17ae <__ultoa_invert+0x6c>
    17c4:	ea cf       	rjmp	.-44     	; 0x179a <__ultoa_invert+0x58>
    17c6:	b4 e0       	ldi	r27, 0x04	; 4
    17c8:	a6 95       	lsr	r26
    17ca:	97 95       	ror	r25
    17cc:	87 95       	ror	r24
    17ce:	77 95       	ror	r23
    17d0:	67 95       	ror	r22
    17d2:	ba 95       	dec	r27
    17d4:	c9 f7       	brne	.-14     	; 0x17c8 <__ultoa_invert+0x86>
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	61 05       	cpc	r22, r1
    17da:	71 05       	cpc	r23, r1
    17dc:	08 95       	ret
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	0a 2e       	mov	r0, r26
    17e4:	06 94       	lsr	r0
    17e6:	57 95       	ror	r21
    17e8:	47 95       	ror	r20
    17ea:	37 95       	ror	r19
    17ec:	27 95       	ror	r18
    17ee:	ba 95       	dec	r27
    17f0:	c9 f7       	brne	.-14     	; 0x17e4 <__ultoa_invert+0xa2>
    17f2:	62 0f       	add	r22, r18
    17f4:	73 1f       	adc	r23, r19
    17f6:	84 1f       	adc	r24, r20
    17f8:	95 1f       	adc	r25, r21
    17fa:	a0 1d       	adc	r26, r0
    17fc:	08 95       	ret

000017fe <_exit>:
    17fe:	f8 94       	cli

00001800 <__stop_program>:
    1800:	ff cf       	rjmp	.-2      	; 0x1800 <__stop_program>
