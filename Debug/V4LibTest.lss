
V4LibTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000239c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00802000  0000239c  00002430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000871  0080213a  0080213a  0000256a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000256a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c24c  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003efe  00000000  00000000  0000eb94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d81  00000000  00000000  00012a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a30  00000000  00000000  00014814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004da7  00000000  00000000  00015244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000308b  00000000  00000000  00019feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0001d076  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__ctors_end>
       4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
       8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
       c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      10:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      14:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      18:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      1c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      20:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      24:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      28:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      2c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      30:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      34:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      38:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__vector_14>
      3c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      40:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      44:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      48:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      4c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      50:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__vector_20>
      54:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      58:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      5c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      60:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      64:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      68:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      6c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      70:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      74:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      78:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      7c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      80:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      84:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      88:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      8c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      90:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      94:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      98:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      9c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      a0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      a4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      a8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      ac:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      b0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      b4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      b8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      bc:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      c0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      c4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      c8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      cc:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      d0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      d4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      d8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      dc:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      e0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      e4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      e8:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__vector_58>
      ec:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      f0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      f4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      f8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      fc:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     100:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     104:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     108:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     10c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     110:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     114:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     118:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     11c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     120:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     124:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     128:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     12c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     130:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     134:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     138:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     13c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     140:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     144:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     148:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     14c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     150:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     154:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     158:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     15c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     160:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_88>
     164:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     168:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     16c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     170:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     174:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     178:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     17c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     180:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     184:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     188:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     18c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     190:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     194:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     198:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     19c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1a0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1a4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1a8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1ac:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1b0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1b4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1b8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1bc:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1c0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1c4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1c8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1cc:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1d0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1d4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1d8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1dc:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1e0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1e4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1e8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1ec:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1f0:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1f4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
     1f8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <_ZN17SingleInputKeypad4scanEv>
     200:	0c 94 99 09 	jmp	0x1332	; 0x1332 <_GLOBAL__sub_I_pinsList>
     204:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <_GLOBAL__sub_I_rows>
     208:	0c 94 02 02 	jmp	0x404	; 0x404 <_ZN5Print7printlnERK6String>
     20c:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <_ZL14printf_putcharcP6__file>
     210:	0c 94 47 08 	jmp	0x108e	; 0x108e <_GLOBAL__sub_I_Serial3>
     214:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <_ZN12MatrixKeypad4scanEv>
     218:	0c 94 8b 03 	jmp	0x716	; 0x716 <_ZN5Print7printlnEPK19__FlashStringHelper>
     21c:	0c 94 3a 04 	jmp	0x874	; 0x874 <_ZN5Print5printEmi>
     220:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <_ZN5Print5printEii>
     224:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_ZN5Print5printEc>
     228:	0c 94 96 01 	jmp	0x32c	; 0x32c <_ZN5Print5writeEPKhj>
     22c:	0c 94 92 01 	jmp	0x324	; 0x324 <_ZN5Print17availableForWriteEv>
     230:	0c 94 60 07 	jmp	0xec0	; 0xec0 <_ZN14HardwareSerial5writeEh>
     234:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <_ZN12MatrixKeypad6notifyEv>
     238:	0c 94 3f 03 	jmp	0x67e	; 0x67e <_ZN5Print7printlnEv>
     23c:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_ZN5Print7printlnEli>
     240:	0c 94 05 0c 	jmp	0x180a	; 0x180a <_ZN7IOClass3offEv>
     244:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <_GLOBAL__sub_I_pKeypad>
     248:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <_ZN5logic9onKeyHoldEh>
     24c:	0c 94 95 01 	jmp	0x32a	; 0x32a <_ZN5Print5flushEv>
     250:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <_ZN5logic12onKeyPressedEh>
     254:	0c 94 b8 02 	jmp	0x570	; 0x570 <_ZN5Print7printlnEmi>
     258:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <_ZN5Print5printEji>
     25c:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <_ZN17SingleInputKeypad6notifyEv>
     260:	0c 94 1d 03 	jmp	0x63a	; 0x63a <_ZN5Print6printfEPK19__FlashStringHelperz>
     264:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_ZN5Print7printlnEii>
     268:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <_ZN5Print6printfEPKcz>
     26c:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <_ZN7IOClass6toggleEv>
     270:	0c 94 84 02 	jmp	0x508	; 0x508 <_ZN5Print7printlnEji>
     274:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <_ZN12MatrixKeypad10registerObEP11KeyObserver>
     278:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <_ZN5logic12onKeyReleaseEh>
     27c:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <_ZN7IOClass2onEv>
     280:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <_ZN5Print5printEli>
     284:	0c 94 6d 05 	jmp	0xada	; 0xada <_ZN5Print5printEdi>
     288:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_ZN5Print5printERK6String>
     28c:	0c 94 1c 02 	jmp	0x438	; 0x438 <_ZN5Print7printlnEPKc>
     290:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <_ZN5Print7printlnEdi>
     294:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <_ZN7IOClass9readstateEv>
     298:	0c 94 4b 03 	jmp	0x696	; 0x696 <_ZN5Print5printEPKc>
     29c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <_ZN5Print7printlnEhi>
     2a0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <_ZN5Print5printEhi>
     2a4:	0c 94 36 02 	jmp	0x46c	; 0x46c <_ZN5Print7printlnEc>
     2a8:	0c 94 ae 08 	jmp	0x115c	; 0x115c <_ZN17SingleInputKeypad10registerObEP11KeyObserver>

000002ac <__ctors_start>:
     2ac:	47 08       	sbc	r4, r7
     2ae:	99 09       	sbc	r25, r9
     2b0:	58 0b       	sbc	r21, r24
     2b2:	7c 0c       	add	r7, r12

000002b4 <__ctors_end>:
     2b4:	11 24       	eor	r1, r1
     2b6:	1f be       	out	0x3f, r1	; 63
     2b8:	cf ef       	ldi	r28, 0xFF	; 255
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	df e3       	ldi	r29, 0x3F	; 63
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	00 e0       	ldi	r16, 0x00	; 0
     2c2:	0c bf       	out	0x3c, r16	; 60
     2c4:	18 be       	out	0x38, r1	; 56
     2c6:	19 be       	out	0x39, r1	; 57
     2c8:	1a be       	out	0x3a, r1	; 58
     2ca:	1b be       	out	0x3b, r1	; 59

000002cc <__do_copy_data>:
     2cc:	11 e2       	ldi	r17, 0x21	; 33
     2ce:	a0 e0       	ldi	r26, 0x00	; 0
     2d0:	b0 e2       	ldi	r27, 0x20	; 32
     2d2:	ec e9       	ldi	r30, 0x9C	; 156
     2d4:	f3 e2       	ldi	r31, 0x23	; 35
     2d6:	00 e0       	ldi	r16, 0x00	; 0
     2d8:	0b bf       	out	0x3b, r16	; 59
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <__do_copy_data+0x14>
     2dc:	07 90       	elpm	r0, Z+
     2de:	0d 92       	st	X+, r0
     2e0:	aa 33       	cpi	r26, 0x3A	; 58
     2e2:	b1 07       	cpc	r27, r17
     2e4:	d9 f7       	brne	.-10     	; 0x2dc <__do_copy_data+0x10>
     2e6:	1b be       	out	0x3b, r1	; 59

000002e8 <__do_clear_bss>:
     2e8:	29 e2       	ldi	r18, 0x29	; 41
     2ea:	aa e3       	ldi	r26, 0x3A	; 58
     2ec:	b1 e2       	ldi	r27, 0x21	; 33
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <.do_clear_bss_start>

000002f0 <.do_clear_bss_loop>:
     2f0:	1d 92       	st	X+, r1

000002f2 <.do_clear_bss_start>:
     2f2:	ab 3a       	cpi	r26, 0xAB	; 171
     2f4:	b2 07       	cpc	r27, r18
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <.do_clear_bss_loop>

000002f8 <__do_global_ctors>:
     2f8:	11 e0       	ldi	r17, 0x01	; 1
     2fa:	ca e5       	ldi	r28, 0x5A	; 90
     2fc:	d1 e0       	ldi	r29, 0x01	; 1
     2fe:	00 e0       	ldi	r16, 0x00	; 0
     300:	06 c0       	rjmp	.+12     	; 0x30e <__do_global_ctors+0x16>
     302:	21 97       	sbiw	r28, 0x01	; 1
     304:	01 09       	sbc	r16, r1
     306:	80 2f       	mov	r24, r16
     308:	fe 01       	movw	r30, r28
     30a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__tablejump2__>
     30e:	c6 35       	cpi	r28, 0x56	; 86
     310:	d1 07       	cpc	r29, r17
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	08 07       	cpc	r16, r24
     316:	a9 f7       	brne	.-22     	; 0x302 <__do_global_ctors+0xa>
     318:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <main>
     31c:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <_exit>

00000320 <__bad_interrupt>:
     320:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000324 <_ZN5Print17availableForWriteEv>:
size_t Print::println(const Printable &x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	08 95       	ret

0000032a <_ZN5Print5flushEv>:
     32a:	08 95       	ret

0000032c <_ZN5Print5writeEPKhj>:
     32c:	cf 92       	push	r12
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	41 15       	cp	r20, r1
     33e:	51 05       	cpc	r21, r1
     340:	c1 f0       	breq	.+48     	; 0x372 <_ZN5Print5writeEPKhj+0x46>
     342:	6a 01       	movw	r12, r20
     344:	8c 01       	movw	r16, r24
     346:	e6 2e       	mov	r14, r22
     348:	f7 2e       	mov	r15, r23
     34a:	c0 e0       	ldi	r28, 0x00	; 0
     34c:	d0 e0       	ldi	r29, 0x00	; 0
     34e:	d7 01       	movw	r26, r14
     350:	6d 91       	ld	r22, X+
     352:	7d 01       	movw	r14, r26
     354:	d8 01       	movw	r26, r16
     356:	ed 91       	ld	r30, X+
     358:	fc 91       	ld	r31, X
     35a:	04 a4       	ldd	r0, Z+44	; 0x2c
     35c:	f5 a5       	ldd	r31, Z+45	; 0x2d
     35e:	e0 2d       	mov	r30, r0
     360:	c8 01       	movw	r24, r16
     362:	19 95       	eicall
     364:	89 2b       	or	r24, r25
     366:	39 f0       	breq	.+14     	; 0x376 <_ZN5Print5writeEPKhj+0x4a>
     368:	21 96       	adiw	r28, 0x01	; 1
     36a:	cc 16       	cp	r12, r28
     36c:	dd 06       	cpc	r13, r29
     36e:	79 f7       	brne	.-34     	; 0x34e <_ZN5Print5writeEPKhj+0x22>
     370:	02 c0       	rjmp	.+4      	; 0x376 <_ZN5Print5writeEPKhj+0x4a>
     372:	c0 e0       	ldi	r28, 0x00	; 0
     374:	d0 e0       	ldi	r29, 0x00	; 0
     376:	ce 01       	movw	r24, r28
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	df 90       	pop	r13
     386:	cf 90       	pop	r12
     388:	08 95       	ret

0000038a <_ZN5Print5printERK6String>:
     38a:	db 01       	movw	r26, r22
     38c:	14 96       	adiw	r26, 0x04	; 4
     38e:	4d 91       	ld	r20, X+
     390:	5c 91       	ld	r21, X
     392:	15 97       	sbiw	r26, 0x05	; 5
     394:	6d 91       	ld	r22, X+
     396:	7c 91       	ld	r23, X
     398:	dc 01       	movw	r26, r24
     39a:	ed 91       	ld	r30, X+
     39c:	fc 91       	ld	r31, X
     39e:	06 a4       	ldd	r0, Z+46	; 0x2e
     3a0:	f7 a5       	ldd	r31, Z+47	; 0x2f
     3a2:	e0 2d       	mov	r30, r0
     3a4:	19 95       	eicall
     3a6:	08 95       	ret

000003a8 <_ZN5Print5printEc>:
     3a8:	dc 01       	movw	r26, r24
     3aa:	ed 91       	ld	r30, X+
     3ac:	fc 91       	ld	r31, X
     3ae:	04 a4       	ldd	r0, Z+44	; 0x2c
     3b0:	f5 a5       	ldd	r31, Z+45	; 0x2d
     3b2:	e0 2d       	mov	r30, r0
     3b4:	19 95       	eicall
     3b6:	08 95       	ret

000003b8 <_ZN5Print5printEhi>:
     3b8:	9a 01       	movw	r18, r20
     3ba:	46 2f       	mov	r20, r22
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	dc 01       	movw	r26, r24
     3c4:	ed 91       	ld	r30, X+
     3c6:	fc 91       	ld	r31, X
     3c8:	06 84       	ldd	r0, Z+14	; 0x0e
     3ca:	f7 85       	ldd	r31, Z+15	; 0x0f
     3cc:	e0 2d       	mov	r30, r0
     3ce:	19 95       	eicall
     3d0:	08 95       	ret

000003d2 <_ZN5Print5printEii>:
     3d2:	9a 01       	movw	r18, r20
     3d4:	ab 01       	movw	r20, r22
     3d6:	77 0f       	add	r23, r23
     3d8:	66 0b       	sbc	r22, r22
     3da:	77 0b       	sbc	r23, r23
     3dc:	dc 01       	movw	r26, r24
     3de:	ed 91       	ld	r30, X+
     3e0:	fc 91       	ld	r31, X
     3e2:	04 84       	ldd	r0, Z+12	; 0x0c
     3e4:	f5 85       	ldd	r31, Z+13	; 0x0d
     3e6:	e0 2d       	mov	r30, r0
     3e8:	19 95       	eicall
     3ea:	08 95       	ret

000003ec <_ZN5Print5printEji>:
     3ec:	9a 01       	movw	r18, r20
     3ee:	ab 01       	movw	r20, r22
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	dc 01       	movw	r26, r24
     3f6:	ed 91       	ld	r30, X+
     3f8:	fc 91       	ld	r31, X
     3fa:	06 84       	ldd	r0, Z+14	; 0x0e
     3fc:	f7 85       	ldd	r31, Z+15	; 0x0f
     3fe:	e0 2d       	mov	r30, r0
     400:	19 95       	eicall
     402:	08 95       	ret

00000404 <_ZN5Print7printlnERK6String>:
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	ec 01       	movw	r28, r24
     40e:	e8 81       	ld	r30, Y
     410:	f9 81       	ldd	r31, Y+1	; 0x01
     412:	01 90       	ld	r0, Z+
     414:	f0 81       	ld	r31, Z
     416:	e0 2d       	mov	r30, r0
     418:	19 95       	eicall
     41a:	8c 01       	movw	r16, r24
     41c:	e8 81       	ld	r30, Y
     41e:	f9 81       	ldd	r31, Y+1	; 0x01
     420:	06 a0       	ldd	r0, Z+38	; 0x26
     422:	f7 a1       	ldd	r31, Z+39	; 0x27
     424:	e0 2d       	mov	r30, r0
     426:	ce 01       	movw	r24, r28
     428:	19 95       	eicall
     42a:	80 0f       	add	r24, r16
     42c:	91 1f       	adc	r25, r17
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	08 95       	ret

00000438 <_ZN5Print7printlnEPKc>:
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ec 01       	movw	r28, r24
     442:	e8 81       	ld	r30, Y
     444:	f9 81       	ldd	r31, Y+1	; 0x01
     446:	02 80       	ldd	r0, Z+2	; 0x02
     448:	f3 81       	ldd	r31, Z+3	; 0x03
     44a:	e0 2d       	mov	r30, r0
     44c:	19 95       	eicall
     44e:	8c 01       	movw	r16, r24
     450:	e8 81       	ld	r30, Y
     452:	f9 81       	ldd	r31, Y+1	; 0x01
     454:	06 a0       	ldd	r0, Z+38	; 0x26
     456:	f7 a1       	ldd	r31, Z+39	; 0x27
     458:	e0 2d       	mov	r30, r0
     45a:	ce 01       	movw	r24, r28
     45c:	19 95       	eicall
     45e:	80 0f       	add	r24, r16
     460:	91 1f       	adc	r25, r17
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	08 95       	ret

0000046c <_ZN5Print7printlnEc>:
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24
     476:	e8 81       	ld	r30, Y
     478:	f9 81       	ldd	r31, Y+1	; 0x01
     47a:	04 80       	ldd	r0, Z+4	; 0x04
     47c:	f5 81       	ldd	r31, Z+5	; 0x05
     47e:	e0 2d       	mov	r30, r0
     480:	19 95       	eicall
     482:	8c 01       	movw	r16, r24
     484:	e8 81       	ld	r30, Y
     486:	f9 81       	ldd	r31, Y+1	; 0x01
     488:	06 a0       	ldd	r0, Z+38	; 0x26
     48a:	f7 a1       	ldd	r31, Z+39	; 0x27
     48c:	e0 2d       	mov	r30, r0
     48e:	ce 01       	movw	r24, r28
     490:	19 95       	eicall
     492:	80 0f       	add	r24, r16
     494:	91 1f       	adc	r25, r17
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	08 95       	ret

000004a0 <_ZN5Print7printlnEhi>:
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ec 01       	movw	r28, r24
     4aa:	e8 81       	ld	r30, Y
     4ac:	f9 81       	ldd	r31, Y+1	; 0x01
     4ae:	06 80       	ldd	r0, Z+6	; 0x06
     4b0:	f7 81       	ldd	r31, Z+7	; 0x07
     4b2:	e0 2d       	mov	r30, r0
     4b4:	19 95       	eicall
     4b6:	8c 01       	movw	r16, r24
     4b8:	e8 81       	ld	r30, Y
     4ba:	f9 81       	ldd	r31, Y+1	; 0x01
     4bc:	06 a0       	ldd	r0, Z+38	; 0x26
     4be:	f7 a1       	ldd	r31, Z+39	; 0x27
     4c0:	e0 2d       	mov	r30, r0
     4c2:	ce 01       	movw	r24, r28
     4c4:	19 95       	eicall
     4c6:	80 0f       	add	r24, r16
     4c8:	91 1f       	adc	r25, r17
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	08 95       	ret

000004d4 <_ZN5Print7printlnEii>:
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	ec 01       	movw	r28, r24
     4de:	e8 81       	ld	r30, Y
     4e0:	f9 81       	ldd	r31, Y+1	; 0x01
     4e2:	00 84       	ldd	r0, Z+8	; 0x08
     4e4:	f1 85       	ldd	r31, Z+9	; 0x09
     4e6:	e0 2d       	mov	r30, r0
     4e8:	19 95       	eicall
     4ea:	8c 01       	movw	r16, r24
     4ec:	e8 81       	ld	r30, Y
     4ee:	f9 81       	ldd	r31, Y+1	; 0x01
     4f0:	06 a0       	ldd	r0, Z+38	; 0x26
     4f2:	f7 a1       	ldd	r31, Z+39	; 0x27
     4f4:	e0 2d       	mov	r30, r0
     4f6:	ce 01       	movw	r24, r28
     4f8:	19 95       	eicall
     4fa:	80 0f       	add	r24, r16
     4fc:	91 1f       	adc	r25, r17
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <_ZN5Print7printlnEji>:
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	ec 01       	movw	r28, r24
     512:	e8 81       	ld	r30, Y
     514:	f9 81       	ldd	r31, Y+1	; 0x01
     516:	02 84       	ldd	r0, Z+10	; 0x0a
     518:	f3 85       	ldd	r31, Z+11	; 0x0b
     51a:	e0 2d       	mov	r30, r0
     51c:	19 95       	eicall
     51e:	8c 01       	movw	r16, r24
     520:	e8 81       	ld	r30, Y
     522:	f9 81       	ldd	r31, Y+1	; 0x01
     524:	06 a0       	ldd	r0, Z+38	; 0x26
     526:	f7 a1       	ldd	r31, Z+39	; 0x27
     528:	e0 2d       	mov	r30, r0
     52a:	ce 01       	movw	r24, r28
     52c:	19 95       	eicall
     52e:	80 0f       	add	r24, r16
     530:	91 1f       	adc	r25, r17
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	08 95       	ret

0000053c <_ZN5Print7printlnEli>:
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	ec 01       	movw	r28, r24
     546:	e8 81       	ld	r30, Y
     548:	f9 81       	ldd	r31, Y+1	; 0x01
     54a:	04 84       	ldd	r0, Z+12	; 0x0c
     54c:	f5 85       	ldd	r31, Z+13	; 0x0d
     54e:	e0 2d       	mov	r30, r0
     550:	19 95       	eicall
     552:	8c 01       	movw	r16, r24
     554:	e8 81       	ld	r30, Y
     556:	f9 81       	ldd	r31, Y+1	; 0x01
     558:	06 a0       	ldd	r0, Z+38	; 0x26
     55a:	f7 a1       	ldd	r31, Z+39	; 0x27
     55c:	e0 2d       	mov	r30, r0
     55e:	ce 01       	movw	r24, r28
     560:	19 95       	eicall
     562:	80 0f       	add	r24, r16
     564:	91 1f       	adc	r25, r17
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	08 95       	ret

00000570 <_ZN5Print7printlnEmi>:
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	ec 01       	movw	r28, r24
     57a:	e8 81       	ld	r30, Y
     57c:	f9 81       	ldd	r31, Y+1	; 0x01
     57e:	06 84       	ldd	r0, Z+14	; 0x0e
     580:	f7 85       	ldd	r31, Z+15	; 0x0f
     582:	e0 2d       	mov	r30, r0
     584:	19 95       	eicall
     586:	8c 01       	movw	r16, r24
     588:	e8 81       	ld	r30, Y
     58a:	f9 81       	ldd	r31, Y+1	; 0x01
     58c:	06 a0       	ldd	r0, Z+38	; 0x26
     58e:	f7 a1       	ldd	r31, Z+39	; 0x27
     590:	e0 2d       	mov	r30, r0
     592:	ce 01       	movw	r24, r28
     594:	19 95       	eicall
     596:	80 0f       	add	r24, r16
     598:	91 1f       	adc	r25, r17
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	08 95       	ret

000005a4 <_ZN5Print7printlnEdi>:
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	ec 01       	movw	r28, r24
     5ae:	e8 81       	ld	r30, Y
     5b0:	f9 81       	ldd	r31, Y+1	; 0x01
     5b2:	00 88       	ldd	r0, Z+16	; 0x10
     5b4:	f1 89       	ldd	r31, Z+17	; 0x11
     5b6:	e0 2d       	mov	r30, r0
     5b8:	19 95       	eicall
     5ba:	8c 01       	movw	r16, r24
     5bc:	e8 81       	ld	r30, Y
     5be:	f9 81       	ldd	r31, Y+1	; 0x01
     5c0:	06 a0       	ldd	r0, Z+38	; 0x26
     5c2:	f7 a1       	ldd	r31, Z+39	; 0x27
     5c4:	e0 2d       	mov	r30, r0
     5c6:	ce 01       	movw	r24, r28
     5c8:	19 95       	eicall
     5ca:	80 0f       	add	r24, r16
     5cc:	91 1f       	adc	r25, r17
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <_ZL14printf_putcharcP6__file>:
     5d8:	fb 01       	movw	r30, r22
     5da:	a4 85       	ldd	r26, Z+12	; 0x0c
     5dc:	b5 85       	ldd	r27, Z+13	; 0x0d
     5de:	ed 91       	ld	r30, X+
     5e0:	fc 91       	ld	r31, X
     5e2:	11 97       	sbiw	r26, 0x01	; 1
     5e4:	04 a4       	ldd	r0, Z+44	; 0x2c
     5e6:	f5 a5       	ldd	r31, Z+45	; 0x2d
     5e8:	e0 2d       	mov	r30, r0
     5ea:	68 2f       	mov	r22, r24
     5ec:	cd 01       	movw	r24, r26
     5ee:	19 95       	eicall
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	08 95       	ret

000005f6 <_ZN5Print6printfEPKcz>:
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	2e 97       	sbiw	r28, 0x0e	; 14
     600:	cd bf       	out	0x3d, r28	; 61
     602:	de bf       	out	0x3e, r29	; 62
     604:	8c ee       	ldi	r24, 0xEC	; 236
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	89 87       	std	Y+9, r24	; 0x09
     60a:	9a 87       	std	Y+10, r25	; 0x0a
     60c:	1b 86       	std	Y+11, r1	; 0x0b
     60e:	1c 86       	std	Y+12, r1	; 0x0c
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	8c 83       	std	Y+4, r24	; 0x04
     614:	8c 89       	ldd	r24, Y+20	; 0x14
     616:	9d 89       	ldd	r25, Y+21	; 0x15
     618:	8d 87       	std	Y+13, r24	; 0x0d
     61a:	9e 87       	std	Y+14, r25	; 0x0e
     61c:	ae 01       	movw	r20, r28
     61e:	48 5e       	subi	r20, 0xE8	; 232
     620:	5f 4f       	sbci	r21, 0xFF	; 255
     622:	6e 89       	ldd	r22, Y+22	; 0x16
     624:	7f 89       	ldd	r23, Y+23	; 0x17
     626:	ce 01       	movw	r24, r28
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <vfprintf>
     62e:	2e 96       	adiw	r28, 0x0e	; 14
     630:	cd bf       	out	0x3d, r28	; 61
     632:	de bf       	out	0x3e, r29	; 62
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <_ZN5Print6printfEPK19__FlashStringHelperz>:
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	2e 97       	sbiw	r28, 0x0e	; 14
     644:	cd bf       	out	0x3d, r28	; 61
     646:	de bf       	out	0x3e, r29	; 62
     648:	8c ee       	ldi	r24, 0xEC	; 236
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	89 87       	std	Y+9, r24	; 0x09
     64e:	9a 87       	std	Y+10, r25	; 0x0a
     650:	1b 86       	std	Y+11, r1	; 0x0b
     652:	1c 86       	std	Y+12, r1	; 0x0c
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	8c 83       	std	Y+4, r24	; 0x04
     658:	8c 89       	ldd	r24, Y+20	; 0x14
     65a:	9d 89       	ldd	r25, Y+21	; 0x15
     65c:	8d 87       	std	Y+13, r24	; 0x0d
     65e:	9e 87       	std	Y+14, r25	; 0x0e
     660:	ae 01       	movw	r20, r28
     662:	48 5e       	subi	r20, 0xE8	; 232
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	6e 89       	ldd	r22, Y+22	; 0x16
     668:	7f 89       	ldd	r23, Y+23	; 0x17
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <vfprintf_P>
     672:	2e 96       	adiw	r28, 0x0e	; 14
     674:	cd bf       	out	0x3d, r28	; 61
     676:	de bf       	out	0x3e, r29	; 62
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <_ZN5Print7printlnEv>:
     67e:	dc 01       	movw	r26, r24
     680:	ed 91       	ld	r30, X+
     682:	fc 91       	ld	r31, X
     684:	06 a4       	ldd	r0, Z+46	; 0x2e
     686:	f7 a5       	ldd	r31, Z+47	; 0x2f
     688:	e0 2d       	mov	r30, r0
     68a:	42 e0       	ldi	r20, 0x02	; 2
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	68 e7       	ldi	r22, 0x78	; 120
     690:	70 e2       	ldi	r23, 0x20	; 32
     692:	19 95       	eicall
     694:	08 95       	ret

00000696 <_ZN5Print5printEPKc>:
     696:	61 15       	cp	r22, r1
     698:	71 05       	cpc	r23, r1
     69a:	81 f0       	breq	.+32     	; 0x6bc <_ZN5Print5printEPKc+0x26>
     69c:	fb 01       	movw	r30, r22
     69e:	01 90       	ld	r0, Z+
     6a0:	00 20       	and	r0, r0
     6a2:	e9 f7       	brne	.-6      	; 0x69e <_ZN5Print5printEPKc+0x8>
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	af 01       	movw	r20, r30
     6a8:	46 1b       	sub	r20, r22
     6aa:	57 0b       	sbc	r21, r23
     6ac:	dc 01       	movw	r26, r24
     6ae:	ed 91       	ld	r30, X+
     6b0:	fc 91       	ld	r31, X
     6b2:	06 a4       	ldd	r0, Z+46	; 0x2e
     6b4:	f7 a5       	ldd	r31, Z+47	; 0x2f
     6b6:	e0 2d       	mov	r30, r0
     6b8:	19 95       	eicall
     6ba:	08 95       	ret
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	08 95       	ret

000006c2 <_ZN5Print5printEPK19__FlashStringHelper>:
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	fb 01       	movw	r30, r22
     6d0:	64 91       	lpm	r22, Z
     6d2:	66 23       	and	r22, r22
     6d4:	b1 f0       	breq	.+44     	; 0x702 <_ZN5Print5printEPK19__FlashStringHelper+0x40>
     6d6:	7f 01       	movw	r14, r30
     6d8:	8c 01       	movw	r16, r24
     6da:	c0 e0       	ldi	r28, 0x00	; 0
     6dc:	d0 e0       	ldi	r29, 0x00	; 0
     6de:	d8 01       	movw	r26, r16
     6e0:	ed 91       	ld	r30, X+
     6e2:	fc 91       	ld	r31, X
     6e4:	04 a4       	ldd	r0, Z+44	; 0x2c
     6e6:	f5 a5       	ldd	r31, Z+45	; 0x2d
     6e8:	e0 2d       	mov	r30, r0
     6ea:	c8 01       	movw	r24, r16
     6ec:	19 95       	eicall
     6ee:	89 2b       	or	r24, r25
     6f0:	51 f0       	breq	.+20     	; 0x706 <_ZN5Print5printEPK19__FlashStringHelper+0x44>
     6f2:	21 96       	adiw	r28, 0x01	; 1
     6f4:	f7 01       	movw	r30, r14
     6f6:	ec 0f       	add	r30, r28
     6f8:	fd 1f       	adc	r31, r29
     6fa:	64 91       	lpm	r22, Z
     6fc:	61 11       	cpse	r22, r1
     6fe:	ef cf       	rjmp	.-34     	; 0x6de <_ZN5Print5printEPK19__FlashStringHelper+0x1c>
     700:	02 c0       	rjmp	.+4      	; 0x706 <_ZN5Print5printEPK19__FlashStringHelper+0x44>
     702:	c0 e0       	ldi	r28, 0x00	; 0
     704:	d0 e0       	ldi	r29, 0x00	; 0
     706:	ce 01       	movw	r24, r28
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	08 95       	ret

00000716 <_ZN5Print7printlnEPK19__FlashStringHelper>:
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	ec 01       	movw	r28, r24
     720:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN5Print5printEPK19__FlashStringHelper>
     724:	8c 01       	movw	r16, r24
     726:	e8 81       	ld	r30, Y
     728:	f9 81       	ldd	r31, Y+1	; 0x01
     72a:	06 a0       	ldd	r0, Z+38	; 0x26
     72c:	f7 a1       	ldd	r31, Z+39	; 0x27
     72e:	e0 2d       	mov	r30, r0
     730:	ce 01       	movw	r24, r28
     732:	19 95       	eicall
     734:	80 0f       	add	r24, r16
     736:	91 1f       	adc	r25, r17
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     742:	8f 92       	push	r8
     744:	9f 92       	push	r9
     746:	af 92       	push	r10
     748:	bf 92       	push	r11
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	a1 97       	sbiw	r28, 0x21	; 33
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	de bf       	out	0x3e, r29	; 62
     760:	7c 01       	movw	r14, r24
     762:	cb 01       	movw	r24, r22
     764:	ba 01       	movw	r22, r20
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     766:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2)
     768:	22 30       	cpi	r18, 0x02	; 2
     76a:	08 f4       	brcc	.+2      	; 0x76e <_ZN5Print11printNumberEmh+0x2c>
    base = 10;
     76c:	2a e0       	ldi	r18, 0x0A	; 10
     76e:	8e 01       	movw	r16, r28
     770:	0f 5d       	subi	r16, 0xDF	; 223
     772:	1f 4f       	sbci	r17, 0xFF	; 255

  do
  {
    char c = n % base;
     774:	82 2e       	mov	r8, r18
     776:	91 2c       	mov	r9, r1
     778:	a1 2c       	mov	r10, r1
     77a:	b1 2c       	mov	r11, r1
     77c:	a5 01       	movw	r20, r10
     77e:	94 01       	movw	r18, r8
     780:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__udivmodsi4>
     784:	e6 2f       	mov	r30, r22
    n /= base;
     786:	62 2f       	mov	r22, r18
     788:	73 2f       	mov	r23, r19
     78a:	84 2f       	mov	r24, r20
     78c:	95 2f       	mov	r25, r21

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     78e:	01 50       	subi	r16, 0x01	; 1
     790:	11 09       	sbc	r17, r1
     792:	ea 30       	cpi	r30, 0x0A	; 10
     794:	10 f4       	brcc	.+4      	; 0x79a <_ZN5Print11printNumberEmh+0x58>
     796:	e0 5d       	subi	r30, 0xD0	; 208
     798:	01 c0       	rjmp	.+2      	; 0x79c <_ZN5Print11printNumberEmh+0x5a>
     79a:	e9 5c       	subi	r30, 0xC9	; 201
     79c:	d8 01       	movw	r26, r16
     79e:	ec 93       	st	X, r30

  // prevent crash if called with base == 1
  if (base < 2)
    base = 10;

  do
     7a0:	61 15       	cp	r22, r1
     7a2:	71 05       	cpc	r23, r1
     7a4:	81 05       	cpc	r24, r1
     7a6:	91 05       	cpc	r25, r1
     7a8:	49 f7       	brne	.-46     	; 0x77c <_ZN5Print11printNumberEmh+0x3a>
  void clearWriteError() { setWriteError(0); }

  virtual size_t write(uint8_t) = 0;
  size_t write(const char *str)
  {
    if (str == NULL)
     7aa:	01 15       	cp	r16, r1
     7ac:	11 05       	cpc	r17, r1
     7ae:	91 f0       	breq	.+36     	; 0x7d4 <_ZN5Print11printNumberEmh+0x92>
      return 0;
    return write((const uint8_t *)str, strlen(str));
     7b0:	f8 01       	movw	r30, r16
     7b2:	01 90       	ld	r0, Z+
     7b4:	00 20       	and	r0, r0
     7b6:	e9 f7       	brne	.-6      	; 0x7b2 <_ZN5Print11printNumberEmh+0x70>
     7b8:	31 97       	sbiw	r30, 0x01	; 1
     7ba:	af 01       	movw	r20, r30
     7bc:	40 1b       	sub	r20, r16
     7be:	51 0b       	sbc	r21, r17
     7c0:	d7 01       	movw	r26, r14
     7c2:	ed 91       	ld	r30, X+
     7c4:	fc 91       	ld	r31, X
     7c6:	06 a4       	ldd	r0, Z+46	; 0x2e
     7c8:	f7 a5       	ldd	r31, Z+47	; 0x2f
     7ca:	e0 2d       	mov	r30, r0
     7cc:	b8 01       	movw	r22, r16
     7ce:	c7 01       	movw	r24, r14
     7d0:	19 95       	eicall
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <_ZN5Print11printNumberEmh+0x96>

  virtual size_t write(uint8_t) = 0;
  size_t write(const char *str)
  {
    if (str == NULL)
      return 0;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while (n);

  return write(str);
}
     7d8:	a1 96       	adiw	r28, 0x21	; 33
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	08 95       	ret

000007f4 <_ZN5Print5printEli>:
{
  return print((unsigned long)n, base);
}

size_t Print::print(long n, int base)
{
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
     806:	6a 01       	movw	r12, r20
     808:	7b 01       	movw	r14, r22
  if (base == 0)
     80a:	21 15       	cp	r18, r1
     80c:	31 05       	cpc	r19, r1
     80e:	41 f4       	brne	.+16     	; 0x820 <_ZN5Print5printEli+0x2c>
  {
    return write(n);
     810:	e8 81       	ld	r30, Y
     812:	f9 81       	ldd	r31, Y+1	; 0x01
     814:	04 a4       	ldd	r0, Z+44	; 0x2c
     816:	f5 a5       	ldd	r31, Z+45	; 0x2d
     818:	e0 2d       	mov	r30, r0
     81a:	64 2f       	mov	r22, r20
     81c:	19 95       	eicall
     81e:	21 c0       	rjmp	.+66     	; 0x862 <_ZN5Print5printEli+0x6e>
  }
  else if (base == 10)
     820:	2a 30       	cpi	r18, 0x0A	; 10
     822:	31 05       	cpc	r19, r1
     824:	e1 f4       	brne	.+56     	; 0x85e <_ZN5Print5printEli+0x6a>
  {
    if (n < 0)
     826:	77 23       	and	r23, r23
     828:	b4 f4       	brge	.+44     	; 0x856 <_ZN5Print5printEli+0x62>
    {
      int t = print('-');
     82a:	e8 81       	ld	r30, Y
     82c:	f9 81       	ldd	r31, Y+1	; 0x01
     82e:	04 80       	ldd	r0, Z+4	; 0x04
     830:	f5 81       	ldd	r31, Z+5	; 0x05
     832:	e0 2d       	mov	r30, r0
     834:	6d e2       	ldi	r22, 0x2D	; 45
     836:	19 95       	eicall
     838:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     83a:	44 27       	eor	r20, r20
     83c:	55 27       	eor	r21, r21
     83e:	ba 01       	movw	r22, r20
     840:	4c 19       	sub	r20, r12
     842:	5d 09       	sbc	r21, r13
     844:	6e 09       	sbc	r22, r14
     846:	7f 09       	sbc	r23, r15
     848:	2a e0       	ldi	r18, 0x0A	; 10
     84a:	ce 01       	movw	r24, r28
     84c:	0e 94 a1 03 	call	0x742	; 0x742 <_ZN5Print11printNumberEmh>
     850:	80 0f       	add	r24, r16
     852:	91 1f       	adc	r25, r17
     854:	06 c0       	rjmp	.+12     	; 0x862 <_ZN5Print5printEli+0x6e>
    }
    return printNumber(n, 10);
     856:	2a e0       	ldi	r18, 0x0A	; 10
     858:	0e 94 a1 03 	call	0x742	; 0x742 <_ZN5Print11printNumberEmh>
     85c:	02 c0       	rjmp	.+4      	; 0x862 <_ZN5Print5printEli+0x6e>
  }
  else
  {
    return printNumber(n, base);
     85e:	0e 94 a1 03 	call	0x742	; 0x742 <_ZN5Print11printNumberEmh>
  }
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	08 95       	ret

00000874 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
  if (base == 0)
     874:	21 15       	cp	r18, r1
     876:	31 05       	cpc	r19, r1
     878:	49 f4       	brne	.+18     	; 0x88c <_ZN5Print5printEmi+0x18>
    return write(n);
     87a:	dc 01       	movw	r26, r24
     87c:	ed 91       	ld	r30, X+
     87e:	fc 91       	ld	r31, X
     880:	04 a4       	ldd	r0, Z+44	; 0x2c
     882:	f5 a5       	ldd	r31, Z+45	; 0x2d
     884:	e0 2d       	mov	r30, r0
     886:	64 2f       	mov	r22, r20
     888:	19 95       	eicall
     88a:	08 95       	ret
  else
    return printNumber(n, base);
     88c:	0e 94 a1 03 	call	0x742	; 0x742 <_ZN5Print11printNumberEmh>
}
     890:	08 95       	ret

00000892 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
     892:	4f 92       	push	r4
     894:	5f 92       	push	r5
     896:	6f 92       	push	r6
     898:	7f 92       	push	r7
     89a:	8f 92       	push	r8
     89c:	9f 92       	push	r9
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	8c 01       	movw	r16, r24
     8b2:	2a 01       	movw	r4, r20
     8b4:	3b 01       	movw	r6, r22
     8b6:	c2 2f       	mov	r28, r18
  size_t n = 0;

  if (isnan(number))
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	c3 01       	movw	r24, r6
     8be:	b2 01       	movw	r22, r4
     8c0:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__unordsf2>
     8c4:	88 23       	and	r24, r24
     8c6:	59 f0       	breq	.+22     	; 0x8de <_ZN5Print10printFloatEdh+0x4c>
    return print("nan");
     8c8:	d8 01       	movw	r26, r16
     8ca:	ed 91       	ld	r30, X+
     8cc:	fc 91       	ld	r31, X
     8ce:	02 80       	ldd	r0, Z+2	; 0x02
     8d0:	f3 81       	ldd	r31, Z+3	; 0x03
     8d2:	e0 2d       	mov	r30, r0
     8d4:	6b e7       	ldi	r22, 0x7B	; 123
     8d6:	70 e2       	ldi	r23, 0x20	; 32
     8d8:	c8 01       	movw	r24, r16
     8da:	19 95       	eicall
     8dc:	ee c0       	rjmp	.+476    	; 0xaba <_ZN5Print10printFloatEdh+0x228>
  if (isinf(number))
     8de:	73 01       	movw	r14, r6
     8e0:	62 01       	movw	r12, r4
     8e2:	e8 94       	clt
     8e4:	f7 f8       	bld	r15, 7
     8e6:	2f ef       	ldi	r18, 0xFF	; 255
     8e8:	3f ef       	ldi	r19, 0xFF	; 255
     8ea:	4f e7       	ldi	r20, 0x7F	; 127
     8ec:	5f e7       	ldi	r21, 0x7F	; 127
     8ee:	c7 01       	movw	r24, r14
     8f0:	b6 01       	movw	r22, r12
     8f2:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__unordsf2>
     8f6:	81 11       	cpse	r24, r1
     8f8:	15 c0       	rjmp	.+42     	; 0x924 <_ZN5Print10printFloatEdh+0x92>
     8fa:	2f ef       	ldi	r18, 0xFF	; 255
     8fc:	3f ef       	ldi	r19, 0xFF	; 255
     8fe:	4f e7       	ldi	r20, 0x7F	; 127
     900:	5f e7       	ldi	r21, 0x7F	; 127
     902:	c7 01       	movw	r24, r14
     904:	b6 01       	movw	r22, r12
     906:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__cmpsf2>
     90a:	18 16       	cp	r1, r24
     90c:	5c f4       	brge	.+22     	; 0x924 <_ZN5Print10printFloatEdh+0x92>
    return print("inf");
     90e:	d8 01       	movw	r26, r16
     910:	ed 91       	ld	r30, X+
     912:	fc 91       	ld	r31, X
     914:	02 80       	ldd	r0, Z+2	; 0x02
     916:	f3 81       	ldd	r31, Z+3	; 0x03
     918:	e0 2d       	mov	r30, r0
     91a:	6f e7       	ldi	r22, 0x7F	; 127
     91c:	70 e2       	ldi	r23, 0x20	; 32
     91e:	c8 01       	movw	r24, r16
     920:	19 95       	eicall
     922:	cb c0       	rjmp	.+406    	; 0xaba <_ZN5Print10printFloatEdh+0x228>
  if (number > 4294967040.0)
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f e7       	ldi	r20, 0x7F	; 127
     92a:	5f e4       	ldi	r21, 0x4F	; 79
     92c:	c3 01       	movw	r24, r6
     92e:	b2 01       	movw	r22, r4
     930:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__gesf2>
     934:	18 16       	cp	r1, r24
     936:	5c f4       	brge	.+22     	; 0x94e <_ZN5Print10printFloatEdh+0xbc>
    return print("ovf"); // constant determined empirically
     938:	d8 01       	movw	r26, r16
     93a:	ed 91       	ld	r30, X+
     93c:	fc 91       	ld	r31, X
     93e:	02 80       	ldd	r0, Z+2	; 0x02
     940:	f3 81       	ldd	r31, Z+3	; 0x03
     942:	e0 2d       	mov	r30, r0
     944:	63 e8       	ldi	r22, 0x83	; 131
     946:	70 e2       	ldi	r23, 0x20	; 32
     948:	c8 01       	movw	r24, r16
     94a:	19 95       	eicall
     94c:	b6 c0       	rjmp	.+364    	; 0xaba <_ZN5Print10printFloatEdh+0x228>
  if (number < -4294967040.0)
     94e:	2f ef       	ldi	r18, 0xFF	; 255
     950:	3f ef       	ldi	r19, 0xFF	; 255
     952:	4f e7       	ldi	r20, 0x7F	; 127
     954:	5f ec       	ldi	r21, 0xCF	; 207
     956:	c3 01       	movw	r24, r6
     958:	b2 01       	movw	r22, r4
     95a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__cmpsf2>
     95e:	88 23       	and	r24, r24
     960:	5c f4       	brge	.+22     	; 0x978 <_ZN5Print10printFloatEdh+0xe6>
    return print("ovf"); // constant determined empirically
     962:	d8 01       	movw	r26, r16
     964:	ed 91       	ld	r30, X+
     966:	fc 91       	ld	r31, X
     968:	02 80       	ldd	r0, Z+2	; 0x02
     96a:	f3 81       	ldd	r31, Z+3	; 0x03
     96c:	e0 2d       	mov	r30, r0
     96e:	63 e8       	ldi	r22, 0x83	; 131
     970:	70 e2       	ldi	r23, 0x20	; 32
     972:	c8 01       	movw	r24, r16
     974:	19 95       	eicall
     976:	a1 c0       	rjmp	.+322    	; 0xaba <_ZN5Print10printFloatEdh+0x228>

  // Handle negative numbers
  if (number < 0.0)
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	a9 01       	movw	r20, r18
     97e:	c3 01       	movw	r24, r6
     980:	b2 01       	movw	r22, r4
     982:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__cmpsf2>
     986:	88 23       	and	r24, r24
     988:	7c f4       	brge	.+30     	; 0x9a8 <_ZN5Print10printFloatEdh+0x116>
  {
    n += print('-');
     98a:	d8 01       	movw	r26, r16
     98c:	ed 91       	ld	r30, X+
     98e:	fc 91       	ld	r31, X
     990:	04 80       	ldd	r0, Z+4	; 0x04
     992:	f5 81       	ldd	r31, Z+5	; 0x05
     994:	e0 2d       	mov	r30, r0
     996:	6d e2       	ldi	r22, 0x2D	; 45
     998:	c8 01       	movw	r24, r16
     99a:	19 95       	eicall
     99c:	6c 01       	movw	r12, r24
    number = -number;
     99e:	77 fa       	bst	r7, 7
     9a0:	70 94       	com	r7
     9a2:	77 f8       	bld	r7, 7
     9a4:	70 94       	com	r7
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <_ZN5Print10printFloatEdh+0x11a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
     9a8:	c1 2c       	mov	r12, r1
     9aa:	d1 2c       	mov	r13, r1
    number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i = 0; i < digits; ++i)
     9ac:	cc 23       	and	r28, r28
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <_ZN5Print10printFloatEdh+0x120>
     9b0:	6c c0       	rjmp	.+216    	; 0xa8a <_ZN5Print10printFloatEdh+0x1f8>
     9b2:	f1 2c       	mov	r15, r1
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 e2       	ldi	r20, 0x20	; 32
     9c2:	51 e4       	ldi	r21, 0x41	; 65
     9c4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__divsf3>
    number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i = 0; i < digits; ++i)
     9c8:	f3 94       	inc	r15
     9ca:	cf 11       	cpse	r28, r15
     9cc:	f7 cf       	rjmp	.-18     	; 0x9bc <_ZN5Print10printFloatEdh+0x12a>
     9ce:	2b c0       	rjmp	.+86     	; 0xa26 <_ZN5Print10printFloatEdh+0x194>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e2       	ldi	r20, 0x20	; 32
     9d6:	51 e4       	ldi	r21, 0x41	; 65
     9d8:	c3 01       	movw	r24, r6
     9da:	b2 01       	movw	r22, r4
     9dc:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__mulsf3>
     9e0:	2b 01       	movw	r4, r22
     9e2:	3c 01       	movw	r6, r24
    unsigned int toPrint = (unsigned int)(remainder);
     9e4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fixunssfsi>
     9e8:	6b 01       	movw	r12, r22
     9ea:	7c 01       	movw	r14, r24
    n += print(toPrint);
     9ec:	d8 01       	movw	r26, r16
     9ee:	ed 91       	ld	r30, X+
     9f0:	fc 91       	ld	r31, X
     9f2:	02 84       	ldd	r0, Z+10	; 0x0a
     9f4:	f3 85       	ldd	r31, Z+11	; 0x0b
     9f6:	e0 2d       	mov	r30, r0
     9f8:	4a e0       	ldi	r20, 0x0A	; 10
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	c8 01       	movw	r24, r16
     9fe:	19 95       	eicall
     a00:	a8 0e       	add	r10, r24
     a02:	b9 1e       	adc	r11, r25
    remainder -= toPrint;
     a04:	b6 01       	movw	r22, r12
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
     a0e:	9b 01       	movw	r18, r22
     a10:	ac 01       	movw	r20, r24
     a12:	c3 01       	movw	r24, r6
     a14:	b2 01       	movw	r22, r4
     a16:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__subsf3>
     a1a:	2b 01       	movw	r4, r22
     a1c:	3c 01       	movw	r6, r24
     a1e:	c1 50       	subi	r28, 0x01	; 1
  {
    n += print('.');
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     a20:	b9 f6       	brne	.-82     	; 0x9d0 <_ZN5Print10printFloatEdh+0x13e>
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
     a22:	c5 01       	movw	r24, r10
     a24:	4a c0       	rjmp	.+148    	; 0xaba <_ZN5Print10printFloatEdh+0x228>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i = 0; i < digits; ++i)
    rounding /= 10.0;

  number += rounding;
     a26:	9b 01       	movw	r18, r22
     a28:	ac 01       	movw	r20, r24
     a2a:	c3 01       	movw	r24, r6
     a2c:	b2 01       	movw	r22, r4
     a2e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__addsf3>
     a32:	2b 01       	movw	r4, r22
     a34:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     a36:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fixunssfsi>
     a3a:	4b 01       	movw	r8, r22
     a3c:	5c 01       	movw	r10, r24
  double remainder = number - (double)int_part;
     a3e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
     a42:	9b 01       	movw	r18, r22
     a44:	ac 01       	movw	r20, r24
     a46:	c3 01       	movw	r24, r6
     a48:	b2 01       	movw	r22, r4
     a4a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__subsf3>
     a4e:	2b 01       	movw	r4, r22
     a50:	3c 01       	movw	r6, r24
  n += print(int_part);
     a52:	d8 01       	movw	r26, r16
     a54:	ed 91       	ld	r30, X+
     a56:	fc 91       	ld	r31, X
     a58:	06 84       	ldd	r0, Z+14	; 0x0e
     a5a:	f7 85       	ldd	r31, Z+15	; 0x0f
     a5c:	e0 2d       	mov	r30, r0
     a5e:	2a e0       	ldi	r18, 0x0A	; 10
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	b5 01       	movw	r22, r10
     a64:	a4 01       	movw	r20, r8
     a66:	c8 01       	movw	r24, r16
     a68:	19 95       	eicall
     a6a:	5c 01       	movw	r10, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
  {
    n += print('.');
     a6c:	d8 01       	movw	r26, r16
     a6e:	ed 91       	ld	r30, X+
     a70:	fc 91       	ld	r31, X
     a72:	04 80       	ldd	r0, Z+4	; 0x04
     a74:	f5 81       	ldd	r31, Z+5	; 0x05
     a76:	e0 2d       	mov	r30, r0
     a78:	6e e2       	ldi	r22, 0x2E	; 46
     a7a:	c8 01       	movw	r24, r16
     a7c:	19 95       	eicall
     a7e:	8a 0d       	add	r24, r10
     a80:	9b 1d       	adc	r25, r11
     a82:	5c 01       	movw	r10, r24
     a84:	ac 0c       	add	r10, r12
     a86:	bd 1c       	adc	r11, r13
     a88:	a3 cf       	rjmp	.-186    	; 0x9d0 <_ZN5Print10printFloatEdh+0x13e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	5f e3       	ldi	r21, 0x3F	; 63
     a92:	c3 01       	movw	r24, r6
     a94:	b2 01       	movw	r22, r4
     a96:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__addsf3>
     a9a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fixunssfsi>
     a9e:	ab 01       	movw	r20, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	d8 01       	movw	r26, r16
     aa4:	ed 91       	ld	r30, X+
     aa6:	fc 91       	ld	r31, X
     aa8:	06 84       	ldd	r0, Z+14	; 0x0e
     aaa:	f7 85       	ldd	r31, Z+15	; 0x0f
     aac:	e0 2d       	mov	r30, r0
     aae:	2a e0       	ldi	r18, 0x0A	; 10
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	c8 01       	movw	r24, r16
     ab4:	19 95       	eicall
     ab6:	8c 0d       	add	r24, r12
     ab8:	9d 1d       	adc	r25, r13
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	9f 90       	pop	r9
     ace:	8f 90       	pop	r8
     ad0:	7f 90       	pop	r7
     ad2:	6f 90       	pop	r6
     ad4:	5f 90       	pop	r5
     ad6:	4f 90       	pop	r4
     ad8:	08 95       	ret

00000ada <_ZN5Print5printEdi>:
    return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     ada:	0e 94 49 04 	call	0x892	; 0x892 <_ZN5Print10printFloatEdh>
}
     ade:	08 95       	ret

00000ae0 <initTimer10Ms>:

	// Note: The correct PORTC direction for the Compare Channels
	// outputs is configured in the ports_init function.

	// Save interrupts enabled/disabled state
	s=SREG;
     ae0:	9f b7       	in	r25, 0x3f	; 63
	// Disable interrupts
	cli();
     ae2:	f8 94       	cli

	// Disable and reset the timer/counter just to be sure
	tc_disable(tc_regs[timerNumber]);
     ae4:	e8 2f       	mov	r30, r24
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	e0 50       	subi	r30, 0x00	; 0
     aee:	f0 4e       	sbci	r31, 0xE0	; 224
     af0:	a0 81       	ld	r26, Z
     af2:	b1 81       	ldd	r27, Z+1	; 0x01


void tc_disable(TC0_t *ptc)
{
	// Timer/Counter off
	ptc->CTRLA = TC_CLKSEL_OFF_gc;
     af4:	1c 92       	st	X, r1
	// Issue a reset command
	ptc->CTRLFSET = TC_CMD_RESET_gc;
     af6:	8c e0       	ldi	r24, 0x0C	; 12
     af8:	19 96       	adiw	r26, 0x09	; 9
     afa:	8c 93       	st	X, r24
	cli();

	// Disable and reset the timer/counter just to be sure
	tc_disable(tc_regs[timerNumber]);
	// Clock source: ClkPer/1
	tc_regs[timerNumber]->CTRLA=TC_CLKSEL_DIV1_gc;
     afc:	a0 81       	ld	r26, Z
     afe:	b1 81       	ldd	r27, Z+1	; 0x01
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	8c 93       	st	X, r24
	// Mode: Normal Operation, Overflow Int./Event on TOP
	// Compare/Capture on channel A: Off
	// Compare/Capture on channel B: Off
	tc_regs[timerNumber]->CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
     b04:	a0 81       	ld	r26, Z
     b06:	b1 81       	ldd	r27, Z+1	; 0x01
     b08:	11 96       	adiw	r26, 0x01	; 1
     b0a:	1c 92       	st	X, r1
	TC_WGMODE_NORMAL_gc;
	// Capture event source: None
	// Capture event action: None
	tc_regs[timerNumber]->CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     b0c:	a0 81       	ld	r26, Z
     b0e:	b1 81       	ldd	r27, Z+1	; 0x01
     b10:	13 96       	adiw	r26, 0x03	; 3
     b12:	1c 92       	st	X, r1

	// Set Timer/Counter in Normal mode
	tc_regs[timerNumber]->CTRLE=TC_BYTEM_NORMAL_gc;
     b14:	a0 81       	ld	r26, Z
     b16:	b1 81       	ldd	r27, Z+1	; 0x01
     b18:	14 96       	adiw	r26, 0x04	; 4
     b1a:	1c 92       	st	X, r1

	// Overflow interrupt: High Level
	// Error interrupt: Disabled
	tc_regs[timerNumber]->INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_HI_gc;
     b1c:	a0 81       	ld	r26, Z
     b1e:	b1 81       	ldd	r27, Z+1	; 0x01
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	16 96       	adiw	r26, 0x06	; 6
     b24:	8c 93       	st	X, r24

	// Compare/Capture channel A interrupt: Disabled
	// Compare/Capture channel B interrupt: Disabled
	tc_regs[timerNumber]->INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     b26:	a0 81       	ld	r26, Z
     b28:	b1 81       	ldd	r27, Z+1	; 0x01
     b2a:	17 96       	adiw	r26, 0x07	; 7
     b2c:	1c 92       	st	X, r1

	// High resolution extension: Off
	tc_regs[timerNumber]->CTRLA&= ~HIRES_HREN1_bm;
     b2e:	a0 81       	ld	r26, Z
     b30:	b1 81       	ldd	r27, Z+1	; 0x01
     b32:	8c 91       	ld	r24, X
     b34:	8d 7f       	andi	r24, 0xFD	; 253
     b36:	8c 93       	st	X, r24

	// Clear the interrupt flags
	tc_regs[timerNumber]->INTFLAGS=TCC1.INTFLAGS;
     b38:	01 90       	ld	r0, Z+
     b3a:	f0 81       	ld	r31, Z
     b3c:	e0 2d       	mov	r30, r0
     b3e:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <__TEXT_REGION_LENGTH__+0x70084c>
     b42:	84 87       	std	Z+12, r24	; 0x0c
	// Set Counter register
	tc_regs[timerNumber]->CNT=0x0000;
     b44:	10 a2       	std	Z+32, r1	; 0x20
     b46:	11 a2       	std	Z+33, r1	; 0x21
	// Set Period register
	tc_regs[timerNumber]->PER=0x4E1F;
     b48:	2f e1       	ldi	r18, 0x1F	; 31
     b4a:	3e e4       	ldi	r19, 0x4E	; 78
     b4c:	26 a3       	std	Z+38, r18	; 0x26
     b4e:	37 a3       	std	Z+39, r19	; 0x27
	// Set channel A Compare/Capture register
	tc_regs[timerNumber]->CCA=0x0000;
     b50:	10 a6       	std	Z+40, r1	; 0x28
     b52:	11 a6       	std	Z+41, r1	; 0x29
	// Set channel B Compare/Capture register
	tc_regs[timerNumber]->CCB=0x0000;
     b54:	12 a6       	std	Z+42, r1	; 0x2a
     b56:	13 a6       	std	Z+43, r1	; 0x2b

	// Restore interrupts enabled/disabled state
	SREG=s;
     b58:	9f bf       	out	0x3f, r25	; 63
	sei();
     b5a:	78 94       	sei
     b5c:	08 95       	ret

00000b5e <clockConfig>:


void clockConfig(void){
	unsigned char n,s;
	// Save interrupts enabled/disabled state
	s=SREG;
     b5e:	9f b7       	in	r25, 0x3f	; 63
	// Disable interrupts
	cli();
     b60:	f8 94       	cli

	// Internal 32 kHz RC oscillator initialization
	// Enable the internal 32 kHz RC oscillator
	OSC.CTRL|=OSC_RC32KEN_bm;
     b62:	e0 e5       	ldi	r30, 0x50	; 80
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	84 60       	ori	r24, 0x04	; 4
     b6a:	80 83       	st	Z, r24
	// Wait for the internal 32 kHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC32KRDY_bm)==0);
     b6c:	81 81       	ldd	r24, Z+1	; 0x01
     b6e:	82 ff       	sbrs	r24, 2
     b70:	fd cf       	rjmp	.-6      	; 0xb6c <clockConfig+0xe>

	// Internal 32 MHz RC oscillator initialization
	// Enable the internal 32 MHz RC oscillator
	OSC.CTRL|=OSC_RC32MEN_bm;
     b72:	e0 e5       	ldi	r30, 0x50	; 80
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	82 60       	ori	r24, 0x02	; 2
     b7a:	80 83       	st	Z, r24
	// System Clock prescalers B & C division factors: B:1, C:1
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
     b7c:	a0 e4       	ldi	r26, 0x40	; 64
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	11 96       	adiw	r26, 0x01	; 1
     b82:	8c 91       	ld	r24, X
     b84:	11 97       	sbiw	r26, 0x01	; 1
     b86:	80 78       	andi	r24, 0x80	; 128
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
	CCP=CCP_IOREG_gc;
     b88:	28 ed       	ldi	r18, 0xD8	; 216
     b8a:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
     b8c:	11 96       	adiw	r26, 0x01	; 1
     b8e:	8c 93       	st	X, r24

	// Internal 32 MHz RC osc. calibration reference clock source: 32.768 kHz Internal Osc.
	OSC.DFLLCTRL=(OSC.DFLLCTRL & (~(OSC_RC32MCREF_gm | OSC_RC2MCREF_bm))) | OSC_RC32MCREF_RC32K_gc;
     b90:	86 81       	ldd	r24, Z+6	; 0x06
     b92:	88 7f       	andi	r24, 0xF8	; 248
     b94:	86 83       	std	Z+6, r24	; 0x06
	// Enable the auto-calibration of the internal 32 MHz RC oscillator
	DFLLRC32M.CTRL|=DFLL_ENABLE_bm;
     b96:	e0 e6       	ldi	r30, 0x60	; 96
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	81 60       	ori	r24, 0x01	; 1
     b9e:	80 83       	st	Z, r24

	// Wait for the internal 32 MHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC32MRDY_bm)==0);
     ba0:	e0 e5       	ldi	r30, 0x50	; 80
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	81 81       	ldd	r24, Z+1	; 0x01
     ba6:	81 ff       	sbrs	r24, 1
     ba8:	fd cf       	rjmp	.-6      	; 0xba4 <clockConfig+0x46>

	// Select the system clock source: 32 MHz Internal RC Osc.
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC32M_gc;
     baa:	e0 e4       	ldi	r30, 0x40	; 64
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	88 7f       	andi	r24, 0xF8	; 248
     bb2:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
     bb4:	28 ed       	ldi	r18, 0xD8	; 216
     bb6:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
     bb8:	80 83       	st	Z, r24

	// Disable the unused oscillators: 2 MHz, external clock/crystal oscillator, PLL
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
     bba:	e0 e5       	ldi	r30, 0x50	; 80
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	86 7e       	andi	r24, 0xE6	; 230
     bc2:	80 83       	st	Z, r24

	// ClkPer output disabled
	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
     bc4:	e0 eb       	ldi	r30, 0xB0	; 176
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	84 81       	ldd	r24, Z+4	; 0x04
     bca:	80 7f       	andi	r24, 0xF0	; 240
     bcc:	84 83       	std	Z+4, r24	; 0x04
	// Restore interrupts enabled/disabled state
	SREG=s;
     bce:	9f bf       	out	0x3f, r25	; 63
     bd0:	08 95       	ret

00000bd2 <millisTimerConfig>:

	// Note: The correct PORTC direction for the Compare Channels
	// outputs is configured in the ports_init function.

	// Save interrupts enabled/disabled state
	s=SREG;
     bd2:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
     bd4:	f8 94       	cli


void tc_disable(TC0_t *ptc)
{
	// Timer/Counter off
	ptc->CTRLA = TC_CLKSEL_OFF_gc;
     bd6:	e0 e0       	ldi	r30, 0x00	; 0
     bd8:	f8 e0       	ldi	r31, 0x08	; 8
     bda:	10 82       	st	Z, r1
	// Issue a reset command
	ptc->CTRLFSET = TC_CMD_RESET_gc;
     bdc:	8c e0       	ldi	r24, 0x0C	; 12
     bde:	81 87       	std	Z+9, r24	; 0x09
	cli();

	// Disable and reset the timer/counter just to be sure
	tc_disable(&TCC0);
	// Clock source: ClkPer/1
	TCC0.CTRLA=TC_CLKSEL_DIV1_gc;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 83       	st	Z, r24
	// Mode: Normal Operation, Overflow Int./Event on TOP
	// Compare/Capture on channel A: Off
	// Compare/Capture on channel B: Off
	// Compare/Capture on channel C: Off
	// Compare/Capture on channel D: Off
	TCC0.CTRLB=(0<<TC0_CCDEN_bp) | (0<<TC0_CCCEN_bp) | (0<<TC0_CCBEN_bp) | (0<<TC0_CCAEN_bp) |
     be4:	11 82       	std	Z+1, r1	; 0x01
	TC_WGMODE_NORMAL_gc;
	// Capture event source: None
	// Capture event action: None
	TCC0.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     be6:	13 82       	std	Z+3, r1	; 0x03

	// Set Timer/Counter in Normal mode
	TCC0.CTRLE=TC_BYTEM_NORMAL_gc;
     be8:	14 82       	std	Z+4, r1	; 0x04

	// Overflow interrupt: High Level
	// Error interrupt: Disabled
	TCC0.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_HI_gc;
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	86 83       	std	Z+6, r24	; 0x06

	// Compare/Capture channel A interrupt: Disabled
	// Compare/Capture channel B interrupt: Disabled
	// Compare/Capture channel C interrupt: Disabled
	// Compare/Capture channel D interrupt: Disabled
	TCC0.INTCTRLB=TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
     bee:	17 82       	std	Z+7, r1	; 0x07

	// High resolution extension: Off
	HIRESC.CTRLA&= ~HIRES_HREN0_bm;
     bf0:	a0 e9       	ldi	r26, 0x90	; 144
     bf2:	b8 e0       	ldi	r27, 0x08	; 8
     bf4:	8c 91       	ld	r24, X
     bf6:	8e 7f       	andi	r24, 0xFE	; 254
     bf8:	8c 93       	st	X, r24

	// Advanced Waveform Extension initialization
	// Disable locking the AWEX configuration registers just to be sure
	n=MCU.AWEXLOCK & (~MCU_AWEXCLOCK_bm);
     bfa:	a0 e9       	ldi	r26, 0x90	; 144
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	19 96       	adiw	r26, 0x09	; 9
     c00:	8c 91       	ld	r24, X
     c02:	19 97       	sbiw	r26, 0x09	; 9
     c04:	8e 7f       	andi	r24, 0xFE	; 254
	CCP=CCP_IOREG_gc;
     c06:	98 ed       	ldi	r25, 0xD8	; 216
     c08:	94 bf       	out	0x34, r25	; 52
	MCU.AWEXLOCK=n;
     c0a:	19 96       	adiw	r26, 0x09	; 9
     c0c:	8c 93       	st	X, r24
	// Restore optimization for size if needed

	// Pattern generation: Off
	// Dead time insertion: Off
	AWEXC.CTRL=(0<<AWEX_PGM_bp) | (0<<AWEX_CWCM_bp) | (0<<AWEX_DTICCDEN_bp) | (0<<AWEX_DTICCCEN_bp) |
     c0e:	a0 e8       	ldi	r26, 0x80	; 128
     c10:	b8 e0       	ldi	r27, 0x08	; 8
     c12:	1c 92       	st	X, r1

	// Fault protection initialization
	// Fault detection on OCD Break detection: On
	// Fault detection restart mode: Latched Mode
	// Fault detection action: None (Fault protection disabled)
	AWEXC.FDCTRL=(AWEXC.FDCTRL & (~(AWEX_FDDBD_bm | AWEX_FDMODE_bm | AWEX_FDACT_gm))) |
     c14:	13 96       	adiw	r26, 0x03	; 3
     c16:	8c 91       	ld	r24, X
     c18:	13 97       	sbiw	r26, 0x03	; 3
     c1a:	88 7e       	andi	r24, 0xE8	; 232
     c1c:	13 96       	adiw	r26, 0x03	; 3
     c1e:	8c 93       	st	X, r24
     c20:	13 97       	sbiw	r26, 0x03	; 3
	// Event channel 3: Off
	// Event channel 4: Off
	// Event channel 5: Off
	// Event channel 6: Off
	// Event channel 7: Off
	AWEXC.FDEMASK=0b00000000;
     c22:	12 96       	adiw	r26, 0x02	; 2
     c24:	1c 92       	st	X, r1
     c26:	12 97       	sbiw	r26, 0x02	; 2
	// Make sure the fault detect flag is cleared
	AWEXC.STATUS|=AWEXC.STATUS & AWEX_FDF_bm;
     c28:	14 96       	adiw	r26, 0x04	; 4
     c2a:	8c 91       	ld	r24, X
     c2c:	14 97       	sbiw	r26, 0x04	; 4
     c2e:	14 96       	adiw	r26, 0x04	; 4
     c30:	9c 91       	ld	r25, X
     c32:	14 97       	sbiw	r26, 0x04	; 4
     c34:	84 70       	andi	r24, 0x04	; 4
     c36:	89 2b       	or	r24, r25
     c38:	14 96       	adiw	r26, 0x04	; 4
     c3a:	8c 93       	st	X, r24

	// Clear the interrupt flags
	TCC0.INTFLAGS=TCC0.INTFLAGS;
     c3c:	84 85       	ldd	r24, Z+12	; 0x0c
     c3e:	84 87       	std	Z+12, r24	; 0x0c
	// Set Counter register
	TCC0.CNT=0x0000;
     c40:	10 a2       	std	Z+32, r1	; 0x20
     c42:	11 a2       	std	Z+33, r1	; 0x21
	// Set Period register
	TCC0.PER=0x7CFF;
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	9c e7       	ldi	r25, 0x7C	; 124
     c48:	86 a3       	std	Z+38, r24	; 0x26
     c4a:	97 a3       	std	Z+39, r25	; 0x27
	// Set channel A Compare/Capture register
	TCC0.CCA=0x0000;
     c4c:	10 a6       	std	Z+40, r1	; 0x28
     c4e:	11 a6       	std	Z+41, r1	; 0x29
	// Set channel B Compare/Capture register
	TCC0.CCB=0x0000;
     c50:	12 a6       	std	Z+42, r1	; 0x2a
     c52:	13 a6       	std	Z+43, r1	; 0x2b
	// Set channel C Compare/Capture register
	TCC0.CCC=0x0000;
     c54:	14 a6       	std	Z+44, r1	; 0x2c
     c56:	15 a6       	std	Z+45, r1	; 0x2d
	// Set channel D Compare/Capture register
	TCC0.CCD=0x0000;
     c58:	16 a6       	std	Z+46, r1	; 0x2e
     c5a:	17 a6       	std	Z+47, r1	; 0x2f

	// Restore interrupts enabled/disabled state
	SREG=s;
     c5c:	2f bf       	out	0x3f, r18	; 63
     c5e:	08 95       	ret

00000c60 <millis>:
}

inline unsigned long millis(void){
	return millisTimer;
     c60:	60 91 3a 21 	lds	r22, 0x213A	; 0x80213a <__data_end>
     c64:	70 91 3b 21 	lds	r23, 0x213B	; 0x80213b <__data_end+0x1>
     c68:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <__data_end+0x2>
     c6c:	90 91 3d 21 	lds	r25, 0x213D	; 0x80213d <__data_end+0x3>
}
     c70:	08 95       	ret

00000c72 <__vector_14>:


ISR(TCC0_OVF_vect)
{
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	08 b6       	in	r0, 0x38	; 56
     c7e:	0f 92       	push	r0
     c80:	18 be       	out	0x38, r1	; 56
     c82:	09 b6       	in	r0, 0x39	; 57
     c84:	0f 92       	push	r0
     c86:	19 be       	out	0x39, r1	; 57
     c88:	0b b6       	in	r0, 0x3b	; 59
     c8a:	0f 92       	push	r0
     c8c:	1b be       	out	0x3b, r1	; 59
     c8e:	2f 93       	push	r18
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
	// Save interrupts enabled/disabled state
	unsigned char s = SREG;
     c9c:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
     c9e:	f8 94       	cli
	millisTimer++;
     ca0:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <__data_end>
     ca4:	90 91 3b 21 	lds	r25, 0x213B	; 0x80213b <__data_end+0x1>
     ca8:	a0 91 3c 21 	lds	r26, 0x213C	; 0x80213c <__data_end+0x2>
     cac:	b0 91 3d 21 	lds	r27, 0x213D	; 0x80213d <__data_end+0x3>
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	a1 1d       	adc	r26, r1
     cb4:	b1 1d       	adc	r27, r1
     cb6:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <__data_end>
     cba:	90 93 3b 21 	sts	0x213B, r25	; 0x80213b <__data_end+0x1>
     cbe:	a0 93 3c 21 	sts	0x213C, r26	; 0x80213c <__data_end+0x2>
     cc2:	b0 93 3d 21 	sts	0x213D, r27	; 0x80213d <__data_end+0x3>
	// Restore interrupts enabled/disabled state
	TCC0.INTFLAGS=TCC0.INTFLAGS;
     cc6:	e0 e0       	ldi	r30, 0x00	; 0
     cc8:	f8 e0       	ldi	r31, 0x08	; 8
     cca:	84 85       	ldd	r24, Z+12	; 0x0c
     ccc:	84 87       	std	Z+12, r24	; 0x0c
	SREG = s;
     cce:	2f bf       	out	0x3f, r18	; 63
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	bf 91       	pop	r27
     cd6:	af 91       	pop	r26
     cd8:	9f 91       	pop	r25
     cda:	8f 91       	pop	r24
     cdc:	2f 91       	pop	r18
     cde:	0f 90       	pop	r0
     ce0:	0b be       	out	0x3b, r0	; 59
     ce2:	0f 90       	pop	r0
     ce4:	09 be       	out	0x39, r0	; 57
     ce6:	0f 90       	pop	r0
     ce8:	08 be       	out	0x38, r0	; 56
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0
     cf0:	1f 90       	pop	r1
     cf2:	18 95       	reti

00000cf4 <pinMode>:
#endif



void pinMode(uint8_t pin, uint8_t mode)
{
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
	if (mode == INPUT)
     cf8:	61 11       	cpse	r22, r1
     cfa:	25 c0       	rjmp	.+74     	; 0xd46 <pinMode+0x52>
	{
		regs[pin]->DIRSET &= ~_BV(bitNum[pin]);
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	fc 01       	movw	r30, r24
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	e6 5f       	subi	r30, 0xF6	; 246
     d06:	ff 4d       	sbci	r31, 0xDF	; 223
     d08:	a0 81       	ld	r26, Z
     d0a:	b1 81       	ldd	r27, Z+1	; 0x01
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	2c 91       	ld	r18, X
     d10:	11 97       	sbiw	r26, 0x01	; 1
     d12:	ec 01       	movw	r28, r24
     d14:	c9 57       	subi	r28, 0x79	; 121
     d16:	df 4d       	sbci	r29, 0xDF	; 223
     d18:	38 81       	ld	r19, Y
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	03 2e       	mov	r0, r19
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <pinMode+0x32>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <pinMode+0x2e>
     d2a:	80 95       	com	r24
     d2c:	82 23       	and	r24, r18
     d2e:	11 96       	adiw	r26, 0x01	; 1
     d30:	8c 93       	st	X, r24
		*(((uint8_t *)&regs[pin]->PIN0CTRL) + bitNum[pin]) |= PORT_OPC_PULLDOWN_gc | PORT_ISC_LEVEL_gc;
     d32:	01 90       	ld	r0, Z+
     d34:	f0 81       	ld	r31, Z
     d36:	e0 2d       	mov	r30, r0
     d38:	70 96       	adiw	r30, 0x10	; 16
     d3a:	e3 0f       	add	r30, r19
     d3c:	f1 1d       	adc	r31, r1
     d3e:	80 81       	ld	r24, Z
     d40:	83 61       	ori	r24, 0x13	; 19
     d42:	80 83       	st	Z, r24
     d44:	72 c0       	rjmp	.+228    	; 0xe2a <pinMode+0x136>
	}
	else if (mode == INPUT_PULLUP)
     d46:	62 30       	cpi	r22, 0x02	; 2
     d48:	29 f5       	brne	.+74     	; 0xd94 <pinMode+0xa0>
	{
		regs[pin]->DIRSET &= ~_BV(bitNum[pin]);
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	fc 01       	movw	r30, r24
     d4e:	ee 0f       	add	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	e6 5f       	subi	r30, 0xF6	; 246
     d54:	ff 4d       	sbci	r31, 0xDF	; 223
     d56:	a0 81       	ld	r26, Z
     d58:	b1 81       	ldd	r27, Z+1	; 0x01
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	2c 91       	ld	r18, X
     d5e:	11 97       	sbiw	r26, 0x01	; 1
     d60:	ec 01       	movw	r28, r24
     d62:	c9 57       	subi	r28, 0x79	; 121
     d64:	df 4d       	sbci	r29, 0xDF	; 223
     d66:	38 81       	ld	r19, Y
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	03 2e       	mov	r0, r19
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <pinMode+0x80>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <pinMode+0x7c>
     d78:	80 95       	com	r24
     d7a:	82 23       	and	r24, r18
     d7c:	11 96       	adiw	r26, 0x01	; 1
     d7e:	8c 93       	st	X, r24
		*(((uint8_t *)&regs[pin]->PIN0CTRL) + bitNum[pin]) |= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
     d80:	01 90       	ld	r0, Z+
     d82:	f0 81       	ld	r31, Z
     d84:	e0 2d       	mov	r30, r0
     d86:	70 96       	adiw	r30, 0x10	; 16
     d88:	e3 0f       	add	r30, r19
     d8a:	f1 1d       	adc	r31, r1
     d8c:	80 81       	ld	r24, Z
     d8e:	8b 61       	ori	r24, 0x1B	; 27
     d90:	80 83       	st	Z, r24
     d92:	4b c0       	rjmp	.+150    	; 0xe2a <pinMode+0x136>
	}
	else if (mode == OUTPUT)
     d94:	61 30       	cpi	r22, 0x01	; 1
     d96:	21 f5       	brne	.+72     	; 0xde0 <pinMode+0xec>
	{
		regs[pin]->DIRSET |= _BV(bitNum[pin]);
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	fc 01       	movw	r30, r24
     d9c:	ee 0f       	add	r30, r30
     d9e:	ff 1f       	adc	r31, r31
     da0:	e6 5f       	subi	r30, 0xF6	; 246
     da2:	ff 4d       	sbci	r31, 0xDF	; 223
     da4:	a0 81       	ld	r26, Z
     da6:	b1 81       	ldd	r27, Z+1	; 0x01
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	3c 91       	ld	r19, X
     dac:	11 97       	sbiw	r26, 0x01	; 1
     dae:	ec 01       	movw	r28, r24
     db0:	c9 57       	subi	r28, 0x79	; 121
     db2:	df 4d       	sbci	r29, 0xDF	; 223
     db4:	28 81       	ld	r18, Y
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <pinMode+0xce>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <pinMode+0xca>
     dc6:	83 2b       	or	r24, r19
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	8c 93       	st	X, r24
		*(((uint8_t *)(&(regs[pin]->PIN0CTRL))) + bitNum[pin]) |= PORT_OPC_PULLDOWN_gc | PORT_ISC_LEVEL_gc;
     dcc:	01 90       	ld	r0, Z+
     dce:	f0 81       	ld	r31, Z
     dd0:	e0 2d       	mov	r30, r0
     dd2:	70 96       	adiw	r30, 0x10	; 16
     dd4:	e2 0f       	add	r30, r18
     dd6:	f1 1d       	adc	r31, r1
     dd8:	80 81       	ld	r24, Z
     dda:	83 61       	ori	r24, 0x13	; 19
     ddc:	80 83       	st	Z, r24
     dde:	25 c0       	rjmp	.+74     	; 0xe2a <pinMode+0x136>
	}
	else if (mode == OUTPUT_PULLUP)
     de0:	63 30       	cpi	r22, 0x03	; 3
     de2:	19 f5       	brne	.+70     	; 0xe2a <pinMode+0x136>
	{
		regs[pin]->DIRSET |= _BV(bitNum[pin]);
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	fc 01       	movw	r30, r24
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	e6 5f       	subi	r30, 0xF6	; 246
     dee:	ff 4d       	sbci	r31, 0xDF	; 223
     df0:	a0 81       	ld	r26, Z
     df2:	b1 81       	ldd	r27, Z+1	; 0x01
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	3c 91       	ld	r19, X
     df8:	11 97       	sbiw	r26, 0x01	; 1
     dfa:	ec 01       	movw	r28, r24
     dfc:	c9 57       	subi	r28, 0x79	; 121
     dfe:	df 4d       	sbci	r29, 0xDF	; 223
     e00:	28 81       	ld	r18, Y
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <pinMode+0x11a>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <pinMode+0x116>
     e12:	83 2b       	or	r24, r19
     e14:	11 96       	adiw	r26, 0x01	; 1
     e16:	8c 93       	st	X, r24
		*(((uint8_t *)&regs[pin]->PIN0CTRL) + bitNum[pin]) |= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
     e18:	01 90       	ld	r0, Z+
     e1a:	f0 81       	ld	r31, Z
     e1c:	e0 2d       	mov	r30, r0
     e1e:	70 96       	adiw	r30, 0x10	; 16
     e20:	e2 0f       	add	r30, r18
     e22:	f1 1d       	adc	r31, r1
     e24:	80 81       	ld	r24, Z
     e26:	8b 61       	ori	r24, 0x1B	; 27
     e28:	80 83       	st	Z, r24
	}
}
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (!val)
     e30:	61 11       	cpse	r22, r1
     e32:	17 c0       	rjmp	.+46     	; 0xe62 <digitalWrite+0x32>
	{
		regs[pin]->OUTCLR = _BV(bitNum[pin]);
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	fc 01       	movw	r30, r24
     e38:	ee 0f       	add	r30, r30
     e3a:	ff 1f       	adc	r31, r31
     e3c:	e6 5f       	subi	r30, 0xF6	; 246
     e3e:	ff 4d       	sbci	r31, 0xDF	; 223
     e40:	01 90       	ld	r0, Z+
     e42:	f0 81       	ld	r31, Z
     e44:	e0 2d       	mov	r30, r0
     e46:	dc 01       	movw	r26, r24
     e48:	a9 57       	subi	r26, 0x79	; 121
     e4a:	bf 4d       	sbci	r27, 0xDF	; 223
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	c9 01       	movw	r24, r18
     e52:	0c 90       	ld	r0, X
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <digitalWrite+0x2a>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <digitalWrite+0x26>
     e5e:	86 83       	std	Z+6, r24	; 0x06
     e60:	08 95       	ret
	}
	else
	{
		regs[pin]->OUTSET = _BV(bitNum[pin]);
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	fc 01       	movw	r30, r24
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	e6 5f       	subi	r30, 0xF6	; 246
     e6c:	ff 4d       	sbci	r31, 0xDF	; 223
     e6e:	01 90       	ld	r0, Z+
     e70:	f0 81       	ld	r31, Z
     e72:	e0 2d       	mov	r30, r0
     e74:	dc 01       	movw	r26, r24
     e76:	a9 57       	subi	r26, 0x79	; 121
     e78:	bf 4d       	sbci	r27, 0xDF	; 223
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	c9 01       	movw	r24, r18
     e80:	0c 90       	ld	r0, X
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <digitalWrite+0x58>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <digitalWrite+0x54>
     e8c:	85 83       	std	Z+5, r24	; 0x05
     e8e:	08 95       	ret

00000e90 <digitalRead>:
	}
}

int digitalRead(uint8_t pin)
{
	return bitRead(regs[pin]->IN,bitNum[pin]);
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	f9 01       	movw	r30, r18
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	e6 5f       	subi	r30, 0xF6	; 246
     e9c:	ff 4d       	sbci	r31, 0xDF	; 223
     e9e:	01 90       	ld	r0, Z+
     ea0:	f0 81       	ld	r31, Z
     ea2:	e0 2d       	mov	r30, r0
     ea4:	80 85       	ldd	r24, Z+8	; 0x08
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	f9 01       	movw	r30, r18
     eaa:	e9 57       	subi	r30, 0x79	; 121
     eac:	ff 4d       	sbci	r31, 0xDF	; 223
     eae:	00 80       	ld	r0, Z
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <digitalRead+0x26>
     eb2:	95 95       	asr	r25
     eb4:	87 95       	ror	r24
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <digitalRead+0x22>
}
     eba:	81 70       	andi	r24, 0x01	; 1
     ebc:	99 27       	eor	r25, r25
     ebe:	08 95       	ret

00000ec0 <_ZN14HardwareSerial5writeEh>:
	{
		unsigned char c = _rx_buffer[_rx_buffer_tail];
		_rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
		return c;
	}
}
     ec0:	87 5f       	subi	r24, 0xF7	; 247
     ec2:	9b 4f       	sbci	r25, 0xFB	; 251
     ec4:	dc 01       	movw	r26, r24
     ec6:	ed 91       	ld	r30, X+
     ec8:	fc 91       	ld	r31, X
     eca:	81 81       	ldd	r24, Z+1	; 0x01
     ecc:	85 ff       	sbrs	r24, 5
     ece:	fd cf       	rjmp	.-6      	; 0xeca <_ZN14HardwareSerial5writeEh+0xa>
     ed0:	60 83       	st	Z, r22
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	08 95       	ret

00000ed8 <_ZN14HardwareSerial5beginEmh>:
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	dc 01       	movw	r26, r24
     ede:	e0 ea       	ldi	r30, 0xA0	; 160
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	92 81       	ldd	r25, Z+2	; 0x02
     ee4:	98 73       	andi	r25, 0x38	; 56
     ee6:	96 60       	ori	r25, 0x06	; 6
     ee8:	88 ed       	ldi	r24, 0xD8	; 216
     eea:	84 bf       	out	0x34, r24	; 52
     eec:	92 83       	std	Z+2, r25	; 0x02
     eee:	11 82       	std	Z+1, r1	; 0x01
     ef0:	fd 01       	movw	r30, r26
     ef2:	e7 5f       	subi	r30, 0xF7	; 247
     ef4:	fb 4f       	sbci	r31, 0xFB	; 251
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
     efa:	80 3a       	cpi	r24, 0xA0	; 160
     efc:	99 40       	sbci	r25, 0x09	; 9
     efe:	29 f4       	brne	.+10     	; 0xf0a <_ZN14HardwareSerial5beginEmh+0x32>
     f00:	e0 e6       	ldi	r30, 0x60	; 96
     f02:	f6 e0       	ldi	r31, 0x06	; 6
     f04:	88 e0       	ldi	r24, 0x08	; 8
     f06:	85 83       	std	Z+5, r24	; 0x05
     f08:	81 83       	std	Z+1, r24	; 0x01
     f0a:	fd 01       	movw	r30, r26
     f0c:	e7 5f       	subi	r30, 0xF7	; 247
     f0e:	fb 4f       	sbci	r31, 0xFB	; 251
     f10:	80 81       	ld	r24, Z
     f12:	91 81       	ldd	r25, Z+1	; 0x01
     f14:	80 3a       	cpi	r24, 0xA0	; 160
     f16:	9a 40       	sbci	r25, 0x0A	; 10
     f18:	29 f4       	brne	.+10     	; 0xf24 <_ZN14HardwareSerial5beginEmh+0x4c>
     f1a:	e0 e8       	ldi	r30, 0x80	; 128
     f1c:	f6 e0       	ldi	r31, 0x06	; 6
     f1e:	88 e0       	ldi	r24, 0x08	; 8
     f20:	85 83       	std	Z+5, r24	; 0x05
     f22:	81 83       	std	Z+1, r24	; 0x01
     f24:	fd 01       	movw	r30, r26
     f26:	e7 5f       	subi	r30, 0xF7	; 247
     f28:	fb 4f       	sbci	r31, 0xFB	; 251
     f2a:	c0 81       	ld	r28, Z
     f2c:	d1 81       	ldd	r29, Z+1	; 0x01
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	c0 81       	ld	r28, Z
     f34:	d1 81       	ldd	r29, Z+1	; 0x01
     f36:	9b 81       	ldd	r25, Y+3	; 0x03
     f38:	90 7c       	andi	r25, 0xC0	; 192
     f3a:	90 63       	ori	r25, 0x30	; 48
     f3c:	9b 83       	std	Y+3, r25	; 0x03
     f3e:	c0 81       	ld	r28, Z
     f40:	d1 81       	ldd	r29, Z+1	; 0x01
     f42:	8e e2       	ldi	r24, 0x2E	; 46
     f44:	8e 83       	std	Y+6, r24	; 0x06
     f46:	c0 81       	ld	r28, Z
     f48:	d1 81       	ldd	r29, Z+1	; 0x01
     f4a:	88 e9       	ldi	r24, 0x98	; 152
     f4c:	8f 83       	std	Y+7, r24	; 0x07
     f4e:	01 90       	ld	r0, Z+
     f50:	f0 81       	ld	r31, Z
     f52:	e0 2d       	mov	r30, r0
     f54:	94 81       	ldd	r25, Z+4	; 0x04
     f56:	90 7e       	andi	r25, 0xE0	; 224
     f58:	98 61       	ori	r25, 0x18	; 24
     f5a:	94 83       	std	Z+4, r25	; 0x04
     f5c:	14 96       	adiw	r26, 0x04	; 4
     f5e:	1c 92       	st	X, r1
     f60:	78 94       	sei
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <_ZN14HardwareSerial16_rx_complete_irqEv>:

void HardwareSerial::_rx_complete_irq(void)
{
	cli();
     f68:	f8 94       	cli
	if ((this->_regs->STATUS & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
     f6a:	fc 01       	movw	r30, r24
     f6c:	e7 5f       	subi	r30, 0xF7	; 247
     f6e:	fb 4f       	sbci	r31, 0xFB	; 251
     f70:	01 90       	ld	r0, Z+
     f72:	f0 81       	ld	r31, Z
     f74:	e0 2d       	mov	r30, r0
     f76:	21 81       	ldd	r18, Z+1	; 0x01
     f78:	2c 71       	andi	r18, 0x1C	; 28
     f7a:	e1 f4       	brne	.+56     	; 0xfb4 <_ZN14HardwareSerial16_rx_complete_irqEv+0x4c>
	{
		// No Parity error, read byte and store it in the buffer if there is
		// room
		unsigned char c = this->_regs->DATA;
     f7c:	60 81       	ld	r22, Z
		rx_buffer_index_t i = (unsigned int)(this->_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     f7e:	dc 01       	movw	r26, r24
     f80:	15 96       	adiw	r26, 0x05	; 5
     f82:	2d 91       	ld	r18, X+
     f84:	3c 91       	ld	r19, X
     f86:	16 97       	sbiw	r26, 0x06	; 6
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	33 70       	andi	r19, 0x03	; 3
		// if we should be storing the received character into the location
		// just before the tail (meaning that the head would advance to the
		// current location of the tail), we're about to overflow the buffer
		// and so we don't write the character or advance the head.
		if (i != this->_rx_buffer_tail)
     f8e:	17 96       	adiw	r26, 0x07	; 7
     f90:	4d 91       	ld	r20, X+
     f92:	5c 91       	ld	r21, X
     f94:	18 97       	sbiw	r26, 0x08	; 8
     f96:	24 17       	cp	r18, r20
     f98:	35 07       	cpc	r19, r21
     f9a:	69 f0       	breq	.+26     	; 0xfb6 <_ZN14HardwareSerial16_rx_complete_irqEv+0x4e>
		{
			this->_rx_buffer[this->_rx_buffer_head] = c;
     f9c:	15 96       	adiw	r26, 0x05	; 5
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	16 97       	sbiw	r26, 0x06	; 6
     fa4:	e8 0f       	add	r30, r24
     fa6:	f9 1f       	adc	r31, r25
     fa8:	61 87       	std	Z+9, r22	; 0x09
			this->_rx_buffer_head = i;
     faa:	15 96       	adiw	r26, 0x05	; 5
     fac:	2d 93       	st	X+, r18
     fae:	3c 93       	st	X, r19
     fb0:	16 97       	sbiw	r26, 0x06	; 6
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <_ZN14HardwareSerial16_rx_complete_irqEv+0x4e>
		}
	}
	else
	{
		// Parity error, read byte but discard it
		this->_regs->DATA;
     fb4:	80 81       	ld	r24, Z
	};

	sei();
     fb6:	78 94       	sei
     fb8:	08 95       	ret

00000fba <__vector_88>:
}
#endif

#ifdef D0
ISR(USARTD0_RXC_vect)
{
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	08 b6       	in	r0, 0x38	; 56
     fc6:	0f 92       	push	r0
     fc8:	18 be       	out	0x38, r1	; 56
     fca:	09 b6       	in	r0, 0x39	; 57
     fcc:	0f 92       	push	r0
     fce:	19 be       	out	0x39, r1	; 57
     fd0:	0b b6       	in	r0, 0x3b	; 59
     fd2:	0f 92       	push	r0
     fd4:	1b be       	out	0x3b, r1	; 59
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
	Serial3._rx_complete_irq();
     fee:	89 e4       	ldi	r24, 0x49	; 73
     ff0:	95 e2       	ldi	r25, 0x25	; 37
     ff2:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	0f 90       	pop	r0
    1010:	0b be       	out	0x3b, r0	; 59
    1012:	0f 90       	pop	r0
    1014:	09 be       	out	0x39, r0	; 57
    1016:	0f 90       	pop	r0
    1018:	08 be       	out	0x38, r0	; 56
    101a:	0f 90       	pop	r0
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	0f 90       	pop	r0
    1020:	1f 90       	pop	r1
    1022:	18 95       	reti

00001024 <__vector_58>:
}
#endif

#ifdef E0
ISR(USARTE0_RXC_vect)
{
    1024:	1f 92       	push	r1
    1026:	0f 92       	push	r0
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	0f 92       	push	r0
    102c:	11 24       	eor	r1, r1
    102e:	08 b6       	in	r0, 0x38	; 56
    1030:	0f 92       	push	r0
    1032:	18 be       	out	0x38, r1	; 56
    1034:	09 b6       	in	r0, 0x39	; 57
    1036:	0f 92       	push	r0
    1038:	19 be       	out	0x39, r1	; 57
    103a:	0b b6       	in	r0, 0x3b	; 59
    103c:	0f 92       	push	r0
    103e:	1b be       	out	0x3b, r1	; 59
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
	Serial5._rx_complete_irq();
    1058:	8e e3       	ldi	r24, 0x3E	; 62
    105a:	91 e2       	ldi	r25, 0x21	; 33
    105c:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN14HardwareSerial16_rx_complete_irqEv>
}
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0b be       	out	0x3b, r0	; 59
    107c:	0f 90       	pop	r0
    107e:	09 be       	out	0x39, r0	; 57
    1080:	0f 90       	pop	r0
    1082:	08 be       	out	0x38, r0	; 56
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <_GLOBAL__sub_I_Serial3>:
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29

protected:
  void setWriteError(int err = 1) { write_error = err; }

public:
  Print() : write_error(0) {}
    1092:	e9 e4       	ldi	r30, 0x49	; 73
    1094:	f5 e2       	ldi	r31, 0x25	; 37
    1096:	12 82       	std	Z+2, r1	; 0x02
    1098:	13 82       	std	Z+3, r1	; 0x03
	volatile rx_buffer_index_t _rx_buffer_tail;
	unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];

public:
	USART_t *_regs;
	HardwareSerial(USART_t *serial) : _regs(serial)
    109a:	cd ea       	ldi	r28, 0xAD	; 173
    109c:	d0 e2       	ldi	r29, 0x20	; 32
    109e:	c0 83       	st	Z, r28
    10a0:	d1 83       	std	Z+1, r29	; 0x01
    10a2:	80 ea       	ldi	r24, 0xA0	; 160
    10a4:	99 e0       	ldi	r25, 0x09	; 9
    10a6:	80 93 52 29 	sts	0x2952, r24	; 0x802952 <Serial3+0x409>
    10aa:	90 93 53 29 	sts	0x2953, r25	; 0x802953 <Serial3+0x40a>
		this->begin(115200);
	}
	~HardwareSerial()
	{
	}
	void begin(const uint32_t baud) { begin(baud, SERIAL_8N1); }
    10ae:	26 e0       	ldi	r18, 0x06	; 6
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	52 ec       	ldi	r21, 0xC2	; 194
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	cf 01       	movw	r24, r30
    10ba:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN14HardwareSerial5beginEmh>
    10be:	ee e3       	ldi	r30, 0x3E	; 62
    10c0:	f1 e2       	ldi	r31, 0x21	; 33
    10c2:	12 82       	std	Z+2, r1	; 0x02
    10c4:	13 82       	std	Z+3, r1	; 0x03
	volatile rx_buffer_index_t _rx_buffer_tail;
	unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];

public:
	USART_t *_regs;
	HardwareSerial(USART_t *serial) : _regs(serial)
    10c6:	c0 83       	st	Z, r28
    10c8:	d1 83       	std	Z+1, r29	; 0x01
    10ca:	80 ea       	ldi	r24, 0xA0	; 160
    10cc:	9a e0       	ldi	r25, 0x0A	; 10
    10ce:	80 93 47 25 	sts	0x2547, r24	; 0x802547 <Serial5+0x409>
    10d2:	90 93 48 25 	sts	0x2548, r25	; 0x802548 <Serial5+0x40a>
		this->begin(115200);
	}
	~HardwareSerial()
	{
	}
	void begin(const uint32_t baud) { begin(baud, SERIAL_8N1); }
    10d6:	26 e0       	ldi	r18, 0x06	; 6
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	52 ec       	ldi	r21, 0xC2	; 194
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	cf 01       	movw	r24, r30
    10e2:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN14HardwareSerial5beginEmh>
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <_ZN17SingleInputKeypad6notifyEv>:
	}
	initTimer10Ms(this->timerNumber);
	this->debounceTime = 500;
	this->holdTime = 3000;
}
SingleInputKeypad::~SingleInputKeypad()
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	dc 01       	movw	r26, r24
    10f2:	51 96       	adiw	r26, 0x11	; 17
    10f4:	9c 91       	ld	r25, X
    10f6:	51 97       	sbiw	r26, 0x11	; 17
    10f8:	91 30       	cpi	r25, 0x01	; 1
    10fa:	71 f4       	brne	.+28     	; 0x1118 <_ZN17SingleInputKeypad6notifyEv+0x2c>
    10fc:	12 96       	adiw	r26, 0x02	; 2
    10fe:	8d 91       	ld	r24, X+
    1100:	9c 91       	ld	r25, X
    1102:	13 97       	sbiw	r26, 0x03	; 3
    1104:	ec 01       	movw	r28, r24
    1106:	e8 81       	ld	r30, Y
    1108:	f9 81       	ldd	r31, Y+1	; 0x01
    110a:	01 90       	ld	r0, Z+
    110c:	f0 81       	ld	r31, Z
    110e:	e0 2d       	mov	r30, r0
    1110:	1e 96       	adiw	r26, 0x0e	; 14
    1112:	6c 91       	ld	r22, X
    1114:	19 95       	eicall
    1116:	1f c0       	rjmp	.+62     	; 0x1156 <_ZN17SingleInputKeypad6notifyEv+0x6a>
    1118:	93 30       	cpi	r25, 0x03	; 3
    111a:	71 f4       	brne	.+28     	; 0x1138 <_ZN17SingleInputKeypad6notifyEv+0x4c>
    111c:	12 96       	adiw	r26, 0x02	; 2
    111e:	8d 91       	ld	r24, X+
    1120:	9c 91       	ld	r25, X
    1122:	13 97       	sbiw	r26, 0x03	; 3
    1124:	ec 01       	movw	r28, r24
    1126:	e8 81       	ld	r30, Y
    1128:	f9 81       	ldd	r31, Y+1	; 0x01
    112a:	02 80       	ldd	r0, Z+2	; 0x02
    112c:	f3 81       	ldd	r31, Z+3	; 0x03
    112e:	e0 2d       	mov	r30, r0
    1130:	1e 96       	adiw	r26, 0x0e	; 14
    1132:	6c 91       	ld	r22, X
    1134:	19 95       	eicall
    1136:	0f c0       	rjmp	.+30     	; 0x1156 <_ZN17SingleInputKeypad6notifyEv+0x6a>
    1138:	92 30       	cpi	r25, 0x02	; 2
    113a:	69 f4       	brne	.+26     	; 0x1156 <_ZN17SingleInputKeypad6notifyEv+0x6a>
    113c:	12 96       	adiw	r26, 0x02	; 2
    113e:	8d 91       	ld	r24, X+
    1140:	9c 91       	ld	r25, X
    1142:	13 97       	sbiw	r26, 0x03	; 3
    1144:	ec 01       	movw	r28, r24
    1146:	e8 81       	ld	r30, Y
    1148:	f9 81       	ldd	r31, Y+1	; 0x01
    114a:	04 80       	ldd	r0, Z+4	; 0x04
    114c:	f5 81       	ldd	r31, Z+5	; 0x05
    114e:	e0 2d       	mov	r30, r0
    1150:	1e 96       	adiw	r26, 0x0e	; 14
    1152:	6c 91       	ld	r22, X
    1154:	19 95       	eicall
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <_ZN17SingleInputKeypad10registerObEP11KeyObserver>:
    115c:	fc 01       	movw	r30, r24
    115e:	62 83       	std	Z+2, r22	; 0x02
    1160:	73 83       	std	Z+3, r23	; 0x03
    1162:	08 95       	ret

00001164 <_ZN17SingleInputKeypad4scanEv>:
    1164:	8f 92       	push	r8
    1166:	9f 92       	push	r9
    1168:	af 92       	push	r10
    116a:	bf 92       	push	r11
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	ec 01       	movw	r28, r24
    1178:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <pinNumber>
    117c:	ee 81       	ldd	r30, Y+6	; 0x06
    117e:	ff 81       	ldd	r31, Y+7	; 0x07
    1180:	e8 0f       	add	r30, r24
    1182:	f1 1d       	adc	r31, r1
    1184:	80 81       	ld	r24, Z
    1186:	0e 94 48 07 	call	0xe90	; 0xe90 <digitalRead>
    118a:	89 2b       	or	r24, r25
    118c:	09 f0       	breq	.+2      	; 0x1190 <_ZN17SingleInputKeypad4scanEv+0x2c>
    118e:	72 c0       	rjmp	.+228    	; 0x1274 <_ZN17SingleInputKeypad4scanEv+0x110>
    1190:	f0 90 54 29 	lds	r15, 0x2954	; 0x802954 <pinNumber>
    1194:	0f 2d       	mov	r16, r15
    1196:	10 e0       	ldi	r17, 0x00	; 0
    1198:	8f 85       	ldd	r24, Y+15	; 0x0f
    119a:	98 89       	ldd	r25, Y+16	; 0x10
    119c:	08 17       	cp	r16, r24
    119e:	19 07       	cpc	r17, r25
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <_ZN17SingleInputKeypad4scanEv+0x40>
    11a2:	62 c0       	rjmp	.+196    	; 0x1268 <_ZN17SingleInputKeypad4scanEv+0x104>
    11a4:	0e 94 30 06 	call	0xc60	; 0xc60 <millis>
    11a8:	8a 88       	ldd	r8, Y+18	; 0x12
    11aa:	9b 88       	ldd	r9, Y+19	; 0x13
    11ac:	ac 88       	ldd	r10, Y+20	; 0x14
    11ae:	bd 88       	ldd	r11, Y+21	; 0x15
    11b0:	ab 01       	movw	r20, r22
    11b2:	bc 01       	movw	r22, r24
    11b4:	48 19       	sub	r20, r8
    11b6:	59 09       	sbc	r21, r9
    11b8:	6a 09       	sbc	r22, r10
    11ba:	7b 09       	sbc	r23, r11
    11bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11be:	9d 85       	ldd	r25, Y+13	; 0x0d
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	84 17       	cp	r24, r20
    11c6:	95 07       	cpc	r25, r21
    11c8:	a6 07       	cpc	r26, r22
    11ca:	b7 07       	cpc	r27, r23
    11cc:	e0 f4       	brcc	.+56     	; 0x1206 <_ZN17SingleInputKeypad4scanEv+0xa2>
    11ce:	89 89       	ldd	r24, Y+17	; 0x11
    11d0:	81 11       	cpse	r24, r1
    11d2:	19 c0       	rjmp	.+50     	; 0x1206 <_ZN17SingleInputKeypad4scanEv+0xa2>
    11d4:	0f 87       	std	Y+15, r16	; 0x0f
    11d6:	18 8b       	std	Y+16, r17	; 0x10
    11d8:	ec 81       	ldd	r30, Y+4	; 0x04
    11da:	fd 81       	ldd	r31, Y+5	; 0x05
    11dc:	ef 0d       	add	r30, r15
    11de:	f1 1d       	adc	r31, r1
    11e0:	80 81       	ld	r24, Z
    11e2:	8e 87       	std	Y+14, r24	; 0x0e
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	89 8b       	std	Y+17, r24	; 0x11
    11e8:	f8 94       	cli
    11ea:	e8 81       	ld	r30, Y
    11ec:	f9 81       	ldd	r31, Y+1	; 0x01
    11ee:	02 80       	ldd	r0, Z+2	; 0x02
    11f0:	f3 81       	ldd	r31, Z+3	; 0x03
    11f2:	e0 2d       	mov	r30, r0
    11f4:	ce 01       	movw	r24, r28
    11f6:	19 95       	eicall
    11f8:	78 94       	sei
    11fa:	0e 94 30 06 	call	0xc60	; 0xc60 <millis>
    11fe:	6a 8b       	std	Y+18, r22	; 0x12
    1200:	7b 8b       	std	Y+19, r23	; 0x13
    1202:	8c 8b       	std	Y+20, r24	; 0x14
    1204:	9d 8b       	std	Y+21, r25	; 0x15
    1206:	0e 94 30 06 	call	0xc60	; 0xc60 <millis>
    120a:	8a 88       	ldd	r8, Y+18	; 0x12
    120c:	9b 88       	ldd	r9, Y+19	; 0x13
    120e:	ac 88       	ldd	r10, Y+20	; 0x14
    1210:	bd 88       	ldd	r11, Y+21	; 0x15
    1212:	ab 01       	movw	r20, r22
    1214:	bc 01       	movw	r22, r24
    1216:	48 19       	sub	r20, r8
    1218:	59 09       	sbc	r21, r9
    121a:	6a 09       	sbc	r22, r10
    121c:	7b 09       	sbc	r23, r11
    121e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1220:	9b 85       	ldd	r25, Y+11	; 0x0b
    1222:	a0 e0       	ldi	r26, 0x00	; 0
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	84 17       	cp	r24, r20
    1228:	95 07       	cpc	r25, r21
    122a:	a6 07       	cpc	r26, r22
    122c:	b7 07       	cpc	r27, r23
    122e:	e0 f4       	brcc	.+56     	; 0x1268 <_ZN17SingleInputKeypad4scanEv+0x104>
    1230:	89 89       	ldd	r24, Y+17	; 0x11
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	c9 f4       	brne	.+50     	; 0x1268 <_ZN17SingleInputKeypad4scanEv+0x104>
    1236:	0f 87       	std	Y+15, r16	; 0x0f
    1238:	18 8b       	std	Y+16, r17	; 0x10
    123a:	ec 81       	ldd	r30, Y+4	; 0x04
    123c:	fd 81       	ldd	r31, Y+5	; 0x05
    123e:	ef 0d       	add	r30, r15
    1240:	f1 1d       	adc	r31, r1
    1242:	80 81       	ld	r24, Z
    1244:	8e 87       	std	Y+14, r24	; 0x0e
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	89 8b       	std	Y+17, r24	; 0x11
    124a:	f8 94       	cli
    124c:	e8 81       	ld	r30, Y
    124e:	f9 81       	ldd	r31, Y+1	; 0x01
    1250:	02 80       	ldd	r0, Z+2	; 0x02
    1252:	f3 81       	ldd	r31, Z+3	; 0x03
    1254:	e0 2d       	mov	r30, r0
    1256:	ce 01       	movw	r24, r28
    1258:	19 95       	eicall
    125a:	78 94       	sei
    125c:	0e 94 30 06 	call	0xc60	; 0xc60 <millis>
    1260:	6a 8b       	std	Y+18, r22	; 0x12
    1262:	7b 8b       	std	Y+19, r23	; 0x13
    1264:	8c 8b       	std	Y+20, r24	; 0x14
    1266:	9d 8b       	std	Y+21, r25	; 0x15
    1268:	0f 87       	std	Y+15, r16	; 0x0f
    126a:	18 8b       	std	Y+16, r17	; 0x10
    126c:	89 89       	ldd	r24, Y+17	; 0x11
    126e:	81 11       	cpse	r24, r1
    1270:	16 c0       	rjmp	.+44     	; 0x129e <_ZN17SingleInputKeypad4scanEv+0x13a>
    1272:	10 c0       	rjmp	.+32     	; 0x1294 <_ZN17SingleInputKeypad4scanEv+0x130>
    1274:	89 89       	ldd	r24, Y+17	; 0x11
    1276:	81 50       	subi	r24, 0x01	; 1
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	58 f4       	brcc	.+22     	; 0x1292 <_ZN17SingleInputKeypad4scanEv+0x12e>
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	89 8b       	std	Y+17, r24	; 0x11
    1280:	f8 94       	cli
    1282:	e8 81       	ld	r30, Y
    1284:	f9 81       	ldd	r31, Y+1	; 0x01
    1286:	02 80       	ldd	r0, Z+2	; 0x02
    1288:	f3 81       	ldd	r31, Z+3	; 0x03
    128a:	e0 2d       	mov	r30, r0
    128c:	ce 01       	movw	r24, r28
    128e:	19 95       	eicall
    1290:	78 94       	sei
    1292:	19 8a       	std	Y+17, r1	; 0x11
    1294:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <pinNumber>
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	80 93 54 29 	sts	0x2954, r24	; 0x802954 <pinNumber>
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	9f 90       	pop	r9
    12ae:	8f 90       	pop	r8
    12b0:	08 95       	ret

000012b2 <_ZN17SingleInputKeypadC1EhPcPhh>:
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	7c 01       	movw	r14, r24
    12c4:	ea 01       	movw	r28, r20
    12c6:	69 01       	movw	r12, r18
    12c8:	85 ee       	ldi	r24, 0xE5	; 229
    12ca:	90 e2       	ldi	r25, 0x20	; 32
    12cc:	f7 01       	movw	r30, r14
    12ce:	80 83       	st	Z, r24
    12d0:	91 83       	std	Z+1, r25	; 0x01
    12d2:	c7 01       	movw	r24, r14
    12d4:	0e 96       	adiw	r24, 0x0e	; 14
    12d6:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN3KeyC1Ev>
    12da:	f7 01       	movw	r30, r14
    12dc:	c4 83       	std	Z+4, r28	; 0x04
    12de:	d5 83       	std	Z+5, r29	; 0x05
    12e0:	c6 82       	std	Z+6, r12	; 0x06
    12e2:	d7 82       	std	Z+7, r13	; 0x07
    12e4:	00 87       	std	Z+8, r16	; 0x08
    12e6:	00 23       	and	r16, r16
    12e8:	71 f0       	breq	.+28     	; 0x1306 <_ZN17SingleInputKeypadC1EhPcPhh+0x54>
    12ea:	e6 01       	movw	r28, r12
    12ec:	01 50       	subi	r16, 0x01	; 1
    12ee:	10 e0       	ldi	r17, 0x00	; 0
    12f0:	0f 5f       	subi	r16, 0xFF	; 255
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	0c 0d       	add	r16, r12
    12f6:	1d 1d       	adc	r17, r13
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	89 91       	ld	r24, Y+
    12fc:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <pinMode>
    1300:	c0 17       	cp	r28, r16
    1302:	d1 07       	cpc	r29, r17
    1304:	c9 f7       	brne	.-14     	; 0x12f8 <_ZN17SingleInputKeypadC1EhPcPhh+0x46>
    1306:	f7 01       	movw	r30, r14
    1308:	81 85       	ldd	r24, Z+9	; 0x09
    130a:	0e 94 70 05 	call	0xae0	; 0xae0 <initTimer10Ms>
    130e:	84 ef       	ldi	r24, 0xF4	; 244
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	f7 01       	movw	r30, r14
    1314:	84 87       	std	Z+12, r24	; 0x0c
    1316:	95 87       	std	Z+13, r25	; 0x0d
    1318:	88 eb       	ldi	r24, 0xB8	; 184
    131a:	9b e0       	ldi	r25, 0x0B	; 11
    131c:	82 87       	std	Z+10, r24	; 0x0a
    131e:	93 87       	std	Z+11, r25	; 0x0b
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	cf 90       	pop	r12
    1330:	08 95       	ret

00001332 <_GLOBAL__sub_I_pinsList>:
	}
	if(this->key.kstate == IDLE)
	{
	pinNumber++;
	}
    1332:	0f 93       	push	r16
	'4', '5', '6',
	'7', '8', '9',
	'r', '0', 'g',
'A', 'B', 'C','D'};

SingleInputKeypad iKeys(TIM1,iKeyChar,pinsList,KEPAD_SIZE);
    1334:	03 e1       	ldi	r16, 0x13	; 19
    1336:	2b e6       	ldi	r18, 0x6B	; 107
    1338:	39 e2       	ldi	r19, 0x29	; 41
    133a:	4e e4       	ldi	r20, 0x4E	; 78
    133c:	50 e2       	ldi	r21, 0x20	; 32
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	85 e5       	ldi	r24, 0x55	; 85
    1342:	99 e2       	ldi	r25, 0x29	; 41
    1344:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN17SingleInputKeypadC1EhPcPhh>
	}
	if(this->key.kstate == IDLE)
	{
	pinNumber++;
	}
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <_ZN3KeyC1Ev>:
#include "Key.h"


// default constructor
Key::Key() {
	kchar = NO_KEY;
    134c:	fc 01       	movw	r30, r24
    134e:	10 82       	st	Z, r1
	kstate = IDLE;
    1350:	13 82       	std	Z+3, r1	; 0x03
    1352:	08 95       	ret

00001354 <_ZN12MatrixKeypad6notifyEv>:
	initTimer10Ms(this->timerNumber);
	this->debounceTime = 500;
	this->holdTime = 3000;
}

MatrixKeypad::~MatrixKeypad(){
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	dc 01       	movw	r26, r24
    135a:	1c 96       	adiw	r26, 0x0c	; 12
    135c:	9c 91       	ld	r25, X
    135e:	1c 97       	sbiw	r26, 0x0c	; 12
    1360:	91 30       	cpi	r25, 0x01	; 1
    1362:	71 f4       	brne	.+28     	; 0x1380 <_ZN12MatrixKeypad6notifyEv+0x2c>
    1364:	12 96       	adiw	r26, 0x02	; 2
    1366:	8d 91       	ld	r24, X+
    1368:	9c 91       	ld	r25, X
    136a:	13 97       	sbiw	r26, 0x03	; 3
    136c:	ec 01       	movw	r28, r24
    136e:	e8 81       	ld	r30, Y
    1370:	f9 81       	ldd	r31, Y+1	; 0x01
    1372:	01 90       	ld	r0, Z+
    1374:	f0 81       	ld	r31, Z
    1376:	e0 2d       	mov	r30, r0
    1378:	19 96       	adiw	r26, 0x09	; 9
    137a:	6c 91       	ld	r22, X
    137c:	19 95       	eicall
    137e:	1f c0       	rjmp	.+62     	; 0x13be <_ZN12MatrixKeypad6notifyEv+0x6a>
    1380:	93 30       	cpi	r25, 0x03	; 3
    1382:	71 f4       	brne	.+28     	; 0x13a0 <_ZN12MatrixKeypad6notifyEv+0x4c>
    1384:	12 96       	adiw	r26, 0x02	; 2
    1386:	8d 91       	ld	r24, X+
    1388:	9c 91       	ld	r25, X
    138a:	13 97       	sbiw	r26, 0x03	; 3
    138c:	ec 01       	movw	r28, r24
    138e:	e8 81       	ld	r30, Y
    1390:	f9 81       	ldd	r31, Y+1	; 0x01
    1392:	02 80       	ldd	r0, Z+2	; 0x02
    1394:	f3 81       	ldd	r31, Z+3	; 0x03
    1396:	e0 2d       	mov	r30, r0
    1398:	19 96       	adiw	r26, 0x09	; 9
    139a:	6c 91       	ld	r22, X
    139c:	19 95       	eicall
    139e:	0f c0       	rjmp	.+30     	; 0x13be <_ZN12MatrixKeypad6notifyEv+0x6a>
    13a0:	92 30       	cpi	r25, 0x02	; 2
    13a2:	69 f4       	brne	.+26     	; 0x13be <_ZN12MatrixKeypad6notifyEv+0x6a>
    13a4:	12 96       	adiw	r26, 0x02	; 2
    13a6:	8d 91       	ld	r24, X+
    13a8:	9c 91       	ld	r25, X
    13aa:	13 97       	sbiw	r26, 0x03	; 3
    13ac:	ec 01       	movw	r28, r24
    13ae:	e8 81       	ld	r30, Y
    13b0:	f9 81       	ldd	r31, Y+1	; 0x01
    13b2:	04 80       	ldd	r0, Z+4	; 0x04
    13b4:	f5 81       	ldd	r31, Z+5	; 0x05
    13b6:	e0 2d       	mov	r30, r0
    13b8:	19 96       	adiw	r26, 0x09	; 9
    13ba:	6c 91       	ld	r22, X
    13bc:	19 95       	eicall
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	08 95       	ret

000013c4 <_ZN12MatrixKeypad10registerObEP11KeyObserver>:
    13c4:	fc 01       	movw	r30, r24
    13c6:	62 83       	std	Z+2, r22	; 0x02
    13c8:	73 83       	std	Z+3, r23	; 0x03
    13ca:	08 95       	ret

000013cc <_ZN12MatrixKeypad4scanEv>:
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	ec 01       	movw	r28, r24
    13de:	80 91 7e 29 	lds	r24, 0x297E	; 0x80297e <_ZL1c>
    13e2:	ef 89       	ldd	r30, Y+23	; 0x17
    13e4:	f8 8d       	ldd	r31, Y+24	; 0x18
    13e6:	e8 0f       	add	r30, r24
    13e8:	f1 1d       	adc	r31, r1
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	0e 94 18 07 	call	0xe30	; 0xe30 <digitalWrite>
    13f2:	e0 91 7f 29 	lds	r30, 0x297F	; 0x80297f <_ZL1r>
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	e0 58       	subi	r30, 0x80	; 128
    13fa:	f6 4d       	sbci	r31, 0xD6	; 214
    13fc:	10 82       	st	Z, r1
    13fe:	80 91 7f 29 	lds	r24, 0x297F	; 0x80297f <_ZL1r>
    1402:	ed 89       	ldd	r30, Y+21	; 0x15
    1404:	fe 89       	ldd	r31, Y+22	; 0x16
    1406:	e8 0f       	add	r30, r24
    1408:	f1 1d       	adc	r31, r1
    140a:	80 81       	ld	r24, Z
    140c:	0e 94 48 07 	call	0xe90	; 0xe90 <digitalRead>
    1410:	89 2b       	or	r24, r25
    1412:	b1 f4       	brne	.+44     	; 0x1440 <_ZN12MatrixKeypad4scanEv+0x74>
    1414:	30 91 7e 29 	lds	r19, 0x297E	; 0x80297e <_ZL1c>
    1418:	e0 91 7f 29 	lds	r30, 0x297F	; 0x80297f <_ZL1r>
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	e0 58       	subi	r30, 0x80	; 128
    1420:	f6 4d       	sbci	r31, 0xD6	; 214
    1422:	20 81       	ld	r18, Z
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <_ZN12MatrixKeypad4scanEv+0x6a>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	aa 1f       	adc	r26, r26
    1434:	bb 1f       	adc	r27, r27
    1436:	3a 95       	dec	r19
    1438:	d2 f7       	brpl	.-12     	; 0x142e <_ZN12MatrixKeypad4scanEv+0x62>
    143a:	82 2b       	or	r24, r18
    143c:	80 83       	st	Z, r24
    143e:	19 c0       	rjmp	.+50     	; 0x1472 <_ZN12MatrixKeypad4scanEv+0xa6>
    1440:	30 91 7e 29 	lds	r19, 0x297E	; 0x80297e <_ZL1c>
    1444:	e0 91 7f 29 	lds	r30, 0x297F	; 0x80297f <_ZL1r>
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	e0 58       	subi	r30, 0x80	; 128
    144c:	f6 4d       	sbci	r31, 0xD6	; 214
    144e:	20 81       	ld	r18, Z
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <_ZN12MatrixKeypad4scanEv+0x96>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	aa 1f       	adc	r26, r26
    1460:	bb 1f       	adc	r27, r27
    1462:	3a 95       	dec	r19
    1464:	d2 f7       	brpl	.-12     	; 0x145a <_ZN12MatrixKeypad4scanEv+0x8e>
    1466:	80 95       	com	r24
    1468:	90 95       	com	r25
    146a:	a0 95       	com	r26
    146c:	b0 95       	com	r27
    146e:	82 23       	and	r24, r18
    1470:	80 83       	st	Z, r24
    1472:	e0 91 7f 29 	lds	r30, 0x297F	; 0x80297f <_ZL1r>
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	e0 58       	subi	r30, 0x80	; 128
    147a:	f6 4d       	sbci	r31, 0xD6	; 214
    147c:	80 81       	ld	r24, Z
    147e:	88 23       	and	r24, r24
    1480:	09 f4       	brne	.+2      	; 0x1484 <_ZN12MatrixKeypad4scanEv+0xb8>
    1482:	78 c0       	rjmp	.+240    	; 0x1574 <_ZN12MatrixKeypad4scanEv+0x1a8>
    1484:	80 91 7f 29 	lds	r24, 0x297F	; 0x80297f <_ZL1r>
    1488:	00 91 7e 29 	lds	r16, 0x297E	; 0x80297e <_ZL1c>
    148c:	9c 89       	ldd	r25, Y+20	; 0x14
    148e:	10 e0       	ldi	r17, 0x00	; 0
    1490:	98 9f       	mul	r25, r24
    1492:	00 0d       	add	r16, r0
    1494:	11 1d       	adc	r17, r1
    1496:	11 24       	eor	r1, r1
    1498:	8a 85       	ldd	r24, Y+10	; 0x0a
    149a:	9b 85       	ldd	r25, Y+11	; 0x0b
    149c:	08 17       	cp	r16, r24
    149e:	19 07       	cpc	r17, r25
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <_ZN12MatrixKeypad4scanEv+0xd8>
    14a2:	62 c0       	rjmp	.+196    	; 0x1568 <_ZN12MatrixKeypad4scanEv+0x19c>
    14a4:	0e 94 30 06 	call	0xc60	; 0xc60 <millis>
    14a8:	cd 84       	ldd	r12, Y+13	; 0x0d
    14aa:	de 84       	ldd	r13, Y+14	; 0x0e
    14ac:	ef 84       	ldd	r14, Y+15	; 0x0f
    14ae:	f8 88       	ldd	r15, Y+16	; 0x10
    14b0:	ab 01       	movw	r20, r22
    14b2:	bc 01       	movw	r22, r24
    14b4:	4c 19       	sub	r20, r12
    14b6:	5d 09       	sbc	r21, r13
    14b8:	6e 09       	sbc	r22, r14
    14ba:	7f 09       	sbc	r23, r15
    14bc:	8f 81       	ldd	r24, Y+7	; 0x07
    14be:	98 85       	ldd	r25, Y+8	; 0x08
    14c0:	a0 e0       	ldi	r26, 0x00	; 0
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	84 17       	cp	r24, r20
    14c6:	95 07       	cpc	r25, r21
    14c8:	a6 07       	cpc	r26, r22
    14ca:	b7 07       	cpc	r27, r23
    14cc:	e0 f4       	brcc	.+56     	; 0x1506 <_ZN12MatrixKeypad4scanEv+0x13a>
    14ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d0:	81 11       	cpse	r24, r1
    14d2:	19 c0       	rjmp	.+50     	; 0x1506 <_ZN12MatrixKeypad4scanEv+0x13a>
    14d4:	0a 87       	std	Y+10, r16	; 0x0a
    14d6:	1b 87       	std	Y+11, r17	; 0x0b
    14d8:	e9 89       	ldd	r30, Y+17	; 0x11
    14da:	fa 89       	ldd	r31, Y+18	; 0x12
    14dc:	e0 0f       	add	r30, r16
    14de:	f1 1f       	adc	r31, r17
    14e0:	80 81       	ld	r24, Z
    14e2:	89 87       	std	Y+9, r24	; 0x09
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	8c 87       	std	Y+12, r24	; 0x0c
    14e8:	f8 94       	cli
    14ea:	e8 81       	ld	r30, Y
    14ec:	f9 81       	ldd	r31, Y+1	; 0x01
    14ee:	02 80       	ldd	r0, Z+2	; 0x02
    14f0:	f3 81       	ldd	r31, Z+3	; 0x03
    14f2:	e0 2d       	mov	r30, r0
    14f4:	ce 01       	movw	r24, r28
    14f6:	19 95       	eicall
    14f8:	78 94       	sei
    14fa:	0e 94 30 06 	call	0xc60	; 0xc60 <millis>
    14fe:	6d 87       	std	Y+13, r22	; 0x0d
    1500:	7e 87       	std	Y+14, r23	; 0x0e
    1502:	8f 87       	std	Y+15, r24	; 0x0f
    1504:	98 8b       	std	Y+16, r25	; 0x10
    1506:	0e 94 30 06 	call	0xc60	; 0xc60 <millis>
    150a:	cd 84       	ldd	r12, Y+13	; 0x0d
    150c:	de 84       	ldd	r13, Y+14	; 0x0e
    150e:	ef 84       	ldd	r14, Y+15	; 0x0f
    1510:	f8 88       	ldd	r15, Y+16	; 0x10
    1512:	ab 01       	movw	r20, r22
    1514:	bc 01       	movw	r22, r24
    1516:	4c 19       	sub	r20, r12
    1518:	5d 09       	sbc	r21, r13
    151a:	6e 09       	sbc	r22, r14
    151c:	7f 09       	sbc	r23, r15
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	84 17       	cp	r24, r20
    1528:	95 07       	cpc	r25, r21
    152a:	a6 07       	cpc	r26, r22
    152c:	b7 07       	cpc	r27, r23
    152e:	e0 f4       	brcc	.+56     	; 0x1568 <_ZN12MatrixKeypad4scanEv+0x19c>
    1530:	8c 85       	ldd	r24, Y+12	; 0x0c
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	c9 f4       	brne	.+50     	; 0x1568 <_ZN12MatrixKeypad4scanEv+0x19c>
    1536:	0a 87       	std	Y+10, r16	; 0x0a
    1538:	1b 87       	std	Y+11, r17	; 0x0b
    153a:	e9 89       	ldd	r30, Y+17	; 0x11
    153c:	fa 89       	ldd	r31, Y+18	; 0x12
    153e:	e0 0f       	add	r30, r16
    1540:	f1 1f       	adc	r31, r17
    1542:	80 81       	ld	r24, Z
    1544:	89 87       	std	Y+9, r24	; 0x09
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	8c 87       	std	Y+12, r24	; 0x0c
    154a:	f8 94       	cli
    154c:	e8 81       	ld	r30, Y
    154e:	f9 81       	ldd	r31, Y+1	; 0x01
    1550:	02 80       	ldd	r0, Z+2	; 0x02
    1552:	f3 81       	ldd	r31, Z+3	; 0x03
    1554:	e0 2d       	mov	r30, r0
    1556:	ce 01       	movw	r24, r28
    1558:	19 95       	eicall
    155a:	78 94       	sei
    155c:	0e 94 30 06 	call	0xc60	; 0xc60 <millis>
    1560:	6d 87       	std	Y+13, r22	; 0x0d
    1562:	7e 87       	std	Y+14, r23	; 0x0e
    1564:	8f 87       	std	Y+15, r24	; 0x0f
    1566:	98 8b       	std	Y+16, r25	; 0x10
    1568:	0a 87       	std	Y+10, r16	; 0x0a
    156a:	1b 87       	std	Y+11, r17	; 0x0b
    156c:	8c 85       	ldd	r24, Y+12	; 0x0c
    156e:	81 11       	cpse	r24, r1
    1570:	33 c0       	rjmp	.+102    	; 0x15d8 <_ZN12MatrixKeypad4scanEv+0x20c>
    1572:	10 c0       	rjmp	.+32     	; 0x1594 <_ZN12MatrixKeypad4scanEv+0x1c8>
    1574:	8c 85       	ldd	r24, Y+12	; 0x0c
    1576:	81 50       	subi	r24, 0x01	; 1
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	58 f4       	brcc	.+22     	; 0x1592 <_ZN12MatrixKeypad4scanEv+0x1c6>
    157c:	83 e0       	ldi	r24, 0x03	; 3
    157e:	8c 87       	std	Y+12, r24	; 0x0c
    1580:	f8 94       	cli
    1582:	e8 81       	ld	r30, Y
    1584:	f9 81       	ldd	r31, Y+1	; 0x01
    1586:	02 80       	ldd	r0, Z+2	; 0x02
    1588:	f3 81       	ldd	r31, Z+3	; 0x03
    158a:	e0 2d       	mov	r30, r0
    158c:	ce 01       	movw	r24, r28
    158e:	19 95       	eicall
    1590:	78 94       	sei
    1592:	1c 86       	std	Y+12, r1	; 0x0c
    1594:	80 91 7f 29 	lds	r24, 0x297F	; 0x80297f <_ZL1r>
    1598:	8f 5f       	subi	r24, 0xFF	; 255
    159a:	80 93 7f 29 	sts	0x297F, r24	; 0x80297f <_ZL1r>
    159e:	80 91 7f 29 	lds	r24, 0x297F	; 0x80297f <_ZL1r>
    15a2:	9b 89       	ldd	r25, Y+19	; 0x13
    15a4:	89 17       	cp	r24, r25
    15a6:	c0 f0       	brcs	.+48     	; 0x15d8 <_ZN12MatrixKeypad4scanEv+0x20c>
    15a8:	10 92 7f 29 	sts	0x297F, r1	; 0x80297f <_ZL1r>
    15ac:	80 91 7e 29 	lds	r24, 0x297E	; 0x80297e <_ZL1c>
    15b0:	ef 89       	ldd	r30, Y+23	; 0x17
    15b2:	f8 8d       	ldd	r31, Y+24	; 0x18
    15b4:	e8 0f       	add	r30, r24
    15b6:	f1 1d       	adc	r31, r1
    15b8:	61 e0       	ldi	r22, 0x01	; 1
    15ba:	80 81       	ld	r24, Z
    15bc:	0e 94 18 07 	call	0xe30	; 0xe30 <digitalWrite>
    15c0:	80 91 7e 29 	lds	r24, 0x297E	; 0x80297e <_ZL1c>
    15c4:	8f 5f       	subi	r24, 0xFF	; 255
    15c6:	80 93 7e 29 	sts	0x297E, r24	; 0x80297e <_ZL1c>
    15ca:	80 91 7e 29 	lds	r24, 0x297E	; 0x80297e <_ZL1c>
    15ce:	9c 89       	ldd	r25, Y+20	; 0x14
    15d0:	89 17       	cp	r24, r25
    15d2:	10 f0       	brcs	.+4      	; 0x15d8 <_ZN12MatrixKeypad4scanEv+0x20c>
    15d4:	10 92 7e 29 	sts	0x297E, r1	; 0x80297e <_ZL1c>
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	cf 90       	pop	r12
    15e8:	08 95       	ret

000015ea <_ZN12MatrixKeypadC1EhPcPhS1_hh>:
    15ea:	8f 92       	push	r8
    15ec:	9f 92       	push	r9
    15ee:	af 92       	push	r10
    15f0:	bf 92       	push	r11
    15f2:	cf 92       	push	r12
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	ec 01       	movw	r28, r24
    1602:	f6 2e       	mov	r15, r22
    1604:	4a 01       	movw	r8, r20
    1606:	59 01       	movw	r10, r18
    1608:	8f ee       	ldi	r24, 0xEF	; 239
    160a:	90 e2       	ldi	r25, 0x20	; 32
    160c:	88 83       	st	Y, r24
    160e:	99 83       	std	Y+1, r25	; 0x01
    1610:	ce 01       	movw	r24, r28
    1612:	09 96       	adiw	r24, 0x09	; 9
    1614:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN3KeyC1Ev>
    1618:	fc 82       	std	Y+4, r15	; 0x04
    161a:	89 8a       	std	Y+17, r8	; 0x11
    161c:	9a 8a       	std	Y+18, r9	; 0x12
    161e:	ad 8a       	std	Y+21, r10	; 0x15
    1620:	be 8a       	std	Y+22, r11	; 0x16
    1622:	0f 8b       	std	Y+23, r16	; 0x17
    1624:	18 8f       	std	Y+24, r17	; 0x18
    1626:	eb 8a       	std	Y+19, r14	; 0x13
    1628:	cc 8a       	std	Y+20, r12	; 0x14
    162a:	e1 10       	cpse	r14, r1
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x4e>
    162e:	8c 89       	ldd	r24, Y+20	; 0x14
    1630:	88 23       	and	r24, r24
    1632:	39 f1       	breq	.+78     	; 0x1682 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x98>
    1634:	f1 2c       	mov	r15, r1
    1636:	0e c0       	rjmp	.+28     	; 0x1654 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x6a>
    1638:	10 e0       	ldi	r17, 0x00	; 0
    163a:	ed 89       	ldd	r30, Y+21	; 0x15
    163c:	fe 89       	ldd	r31, Y+22	; 0x16
    163e:	e1 0f       	add	r30, r17
    1640:	f1 1d       	adc	r31, r1
    1642:	62 e0       	ldi	r22, 0x02	; 2
    1644:	80 81       	ld	r24, Z
    1646:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <pinMode>
    164a:	1f 5f       	subi	r17, 0xFF	; 255
    164c:	8b 89       	ldd	r24, Y+19	; 0x13
    164e:	18 17       	cp	r17, r24
    1650:	a0 f3       	brcs	.-24     	; 0x163a <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x50>
    1652:	ed cf       	rjmp	.-38     	; 0x162e <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x44>
    1654:	0f 2d       	mov	r16, r15
    1656:	10 e0       	ldi	r17, 0x00	; 0
    1658:	ef 89       	ldd	r30, Y+23	; 0x17
    165a:	f8 8d       	ldd	r31, Y+24	; 0x18
    165c:	e0 0f       	add	r30, r16
    165e:	f1 1f       	adc	r31, r17
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	80 81       	ld	r24, Z
    1664:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <pinMode>
    1668:	8f 89       	ldd	r24, Y+23	; 0x17
    166a:	98 8d       	ldd	r25, Y+24	; 0x18
    166c:	fc 01       	movw	r30, r24
    166e:	e0 0f       	add	r30, r16
    1670:	f1 1f       	adc	r31, r17
    1672:	61 e0       	ldi	r22, 0x01	; 1
    1674:	80 81       	ld	r24, Z
    1676:	0e 94 18 07 	call	0xe30	; 0xe30 <digitalWrite>
    167a:	f3 94       	inc	r15
    167c:	8c 89       	ldd	r24, Y+20	; 0x14
    167e:	f8 16       	cp	r15, r24
    1680:	48 f3       	brcs	.-46     	; 0x1654 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x6a>
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	0e 94 70 05 	call	0xae0	; 0xae0 <initTimer10Ms>
    1688:	84 ef       	ldi	r24, 0xF4	; 244
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	8f 83       	std	Y+7, r24	; 0x07
    168e:	98 87       	std	Y+8, r25	; 0x08
    1690:	88 eb       	ldi	r24, 0xB8	; 184
    1692:	9b e0       	ldi	r25, 0x0B	; 11
    1694:	8d 83       	std	Y+5, r24	; 0x05
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	cf 90       	pop	r12
    16a6:	bf 90       	pop	r11
    16a8:	af 90       	pop	r10
    16aa:	9f 90       	pop	r9
    16ac:	8f 90       	pop	r8
    16ae:	08 95       	ret

000016b0 <_GLOBAL__sub_I_rows>:
			{
				c=0;
			}
		}
	}
}
    16b0:	cf 92       	push	r12
    16b2:	ef 92       	push	r14
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
{'1', '2', '3'},
{'4', '5', '6'},
{'7', '8', '9'},
{'r', '0', 'g'}};

MatrixKeypad matrixKeypad(TIM1,(char*)hexaKeys,rows,cols,5,3);
    16b8:	0f 2e       	mov	r0, r31
    16ba:	f3 e0       	ldi	r31, 0x03	; 3
    16bc:	cf 2e       	mov	r12, r31
    16be:	f0 2d       	mov	r31, r0
    16c0:	0f 2e       	mov	r0, r31
    16c2:	f5 e0       	ldi	r31, 0x05	; 5
    16c4:	ef 2e       	mov	r14, r31
    16c6:	f0 2d       	mov	r31, r0
    16c8:	00 e7       	ldi	r16, 0x70	; 112
    16ca:	10 e2       	ldi	r17, 0x20	; 32
    16cc:	23 e7       	ldi	r18, 0x73	; 115
    16ce:	30 e2       	ldi	r19, 0x20	; 32
    16d0:	41 e6       	ldi	r20, 0x61	; 97
    16d2:	50 e2       	ldi	r21, 0x20	; 32
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	85 e8       	ldi	r24, 0x85	; 133
    16d8:	99 e2       	ldi	r25, 0x29	; 41
    16da:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN12MatrixKeypadC1EhPcPhS1_hh>
			{
				c=0;
			}
		}
	}
}
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ef 90       	pop	r14
    16e4:	cf 90       	pop	r12
    16e6:	08 95       	ret

000016e8 <_ZN5logic12onKeyPressedEh>:
{
public:
	logic(){}
	~logic(){}
protected:
	void onKeyPressed(uint8_t ch) override {
    16e8:	cf 93       	push	r28
    16ea:	c6 2f       	mov	r28, r22
		pDebugPort->printf("pressed Key : %c\n" , ch);
    16ec:	e0 91 a7 29 	lds	r30, 0x29A7	; 0x8029a7 <pDebugPort>
    16f0:	f0 91 a8 29 	lds	r31, 0x29A8	; 0x8029a8 <pDebugPort+0x1>
    16f4:	a0 81       	ld	r26, Z
    16f6:	b1 81       	ldd	r27, Z+1	; 0x01
    16f8:	1f 92       	push	r1
    16fa:	6f 93       	push	r22
    16fc:	85 ef       	ldi	r24, 0xF5	; 245
    16fe:	90 e2       	ldi	r25, 0x20	; 32
    1700:	9f 93       	push	r25
    1702:	8f 93       	push	r24
    1704:	ff 93       	push	r31
    1706:	ef 93       	push	r30
    1708:	98 96       	adiw	r26, 0x28	; 40
    170a:	ed 91       	ld	r30, X+
    170c:	fc 91       	ld	r31, X
    170e:	99 97       	sbiw	r26, 0x29	; 41
    1710:	19 95       	eicall
		if(ch == '2')
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	c2 33       	cpi	r28, 0x32	; 50
    1720:	59 f4       	brne	.+22     	; 0x1738 <_ZN5logic12onKeyPressedEh+0x50>
		{
			pBuzzer->on();
    1722:	80 91 a5 29 	lds	r24, 0x29A5	; 0x8029a5 <pBuzzer>
    1726:	90 91 a6 29 	lds	r25, 0x29A6	; 0x8029a6 <pBuzzer+0x1>
    172a:	dc 01       	movw	r26, r24
    172c:	ed 91       	ld	r30, X+
    172e:	fc 91       	ld	r31, X
    1730:	02 80       	ldd	r0, Z+2	; 0x02
    1732:	f3 81       	ldd	r31, Z+3	; 0x03
    1734:	e0 2d       	mov	r30, r0
    1736:	19 95       	eicall
		}
	}
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <_ZN5logic12onKeyReleaseEh>:
	void onKeyRelease(uint8_t ch) override {
    173c:	cf 93       	push	r28
    173e:	c6 2f       	mov	r28, r22
		pDebugPort->printf("released : %c\n" , ch);
    1740:	e0 91 a7 29 	lds	r30, 0x29A7	; 0x8029a7 <pDebugPort>
    1744:	f0 91 a8 29 	lds	r31, 0x29A8	; 0x8029a8 <pDebugPort+0x1>
    1748:	a0 81       	ld	r26, Z
    174a:	b1 81       	ldd	r27, Z+1	; 0x01
    174c:	1f 92       	push	r1
    174e:	6f 93       	push	r22
    1750:	87 e0       	ldi	r24, 0x07	; 7
    1752:	91 e2       	ldi	r25, 0x21	; 33
    1754:	9f 93       	push	r25
    1756:	8f 93       	push	r24
    1758:	ff 93       	push	r31
    175a:	ef 93       	push	r30
    175c:	98 96       	adiw	r26, 0x28	; 40
    175e:	ed 91       	ld	r30, X+
    1760:	fc 91       	ld	r31, X
    1762:	99 97       	sbiw	r26, 0x29	; 41
    1764:	19 95       	eicall
		if(ch == '2')
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	c2 33       	cpi	r28, 0x32	; 50
    1774:	59 f4       	brne	.+22     	; 0x178c <_ZN5logic12onKeyReleaseEh+0x50>
		{
			pBuzzer->off();
    1776:	80 91 a5 29 	lds	r24, 0x29A5	; 0x8029a5 <pBuzzer>
    177a:	90 91 a6 29 	lds	r25, 0x29A6	; 0x8029a6 <pBuzzer+0x1>
    177e:	dc 01       	movw	r26, r24
    1780:	ed 91       	ld	r30, X+
    1782:	fc 91       	ld	r31, X
    1784:	04 80       	ldd	r0, Z+4	; 0x04
    1786:	f5 81       	ldd	r31, Z+5	; 0x05
    1788:	e0 2d       	mov	r30, r0
    178a:	19 95       	eicall
		}
	}
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <_ZN5logic9onKeyHoldEh>:
	void onKeyHold(uint8_t ch) override {
		pDebugPort->printf("holdKey : %c\n" , ch);
    1790:	e0 91 a7 29 	lds	r30, 0x29A7	; 0x8029a7 <pDebugPort>
    1794:	f0 91 a8 29 	lds	r31, 0x29A8	; 0x8029a8 <pDebugPort+0x1>
    1798:	a0 81       	ld	r26, Z
    179a:	b1 81       	ldd	r27, Z+1	; 0x01
    179c:	1f 92       	push	r1
    179e:	6f 93       	push	r22
    17a0:	86 e1       	ldi	r24, 0x16	; 22
    17a2:	91 e2       	ldi	r25, 0x21	; 33
    17a4:	9f 93       	push	r25
    17a6:	8f 93       	push	r24
    17a8:	ff 93       	push	r31
    17aa:	ef 93       	push	r30
    17ac:	98 96       	adiw	r26, 0x28	; 40
    17ae:	ed 91       	ld	r30, X+
    17b0:	fc 91       	ld	r31, X
    17b2:	99 97       	sbiw	r26, 0x29	; 41
    17b4:	19 95       	eicall
	}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	08 95       	ret

000017c4 <_ZN7IOClass6toggleEv>:
		this->state = HIGH;
		else
		this->state = LOW;
		digitalWrite(this->pin, this->state);
	}
	inline void toggle(void) override
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	ec 01       	movw	r28, r24
	{
		if (this->readstate())
    17ca:	e8 81       	ld	r30, Y
    17cc:	f9 81       	ldd	r31, Y+1	; 0x01
    17ce:	01 90       	ld	r0, Z+
    17d0:	f0 81       	ld	r31, Z
    17d2:	e0 2d       	mov	r30, r0
    17d4:	19 95       	eicall
    17d6:	88 23       	and	r24, r24
    17d8:	11 f0       	breq	.+4      	; 0x17de <_ZN7IOClass6toggleEv+0x1a>
		this->state = LOW;
    17da:	1c 82       	std	Y+4, r1	; 0x04
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <_ZN7IOClass6toggleEv+0x1e>
		else
		this->state = HIGH;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	8c 83       	std	Y+4, r24	; 0x04
		digitalWrite(this->pin, this->state);
    17e2:	6c 81       	ldd	r22, Y+4	; 0x04
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	0e 94 18 07 	call	0xe30	; 0xe30 <digitalWrite>
	}
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	08 95       	ret

000017f0 <_ZN7IOClass2onEv>:
	
	inline bool readstate(void) override
	{
		return (bool)digitalRead(this->pin);
	};
	inline void on(void)
    17f0:	fc 01       	movw	r30, r24
	{
		if (!this->activeLevel)
    17f2:	83 81       	ldd	r24, Z+3	; 0x03
    17f4:	81 11       	cpse	r24, r1
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <_ZN7IOClass2onEv+0xc>
		this->state = LOW;
    17f8:	14 82       	std	Z+4, r1	; 0x04
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <_ZN7IOClass2onEv+0x10>
		else
		this->state = HIGH;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	84 83       	std	Z+4, r24	; 0x04
		digitalWrite(this->pin, this->state);
    1800:	64 81       	ldd	r22, Z+4	; 0x04
    1802:	82 81       	ldd	r24, Z+2	; 0x02
    1804:	0e 94 18 07 	call	0xe30	; 0xe30 <digitalWrite>
    1808:	08 95       	ret

0000180a <_ZN7IOClass3offEv>:
	};
	inline void off(void) override
    180a:	fc 01       	movw	r30, r24
	{
		if (!this->activeLevel)
    180c:	83 81       	ldd	r24, Z+3	; 0x03
    180e:	81 11       	cpse	r24, r1
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <_ZN7IOClass3offEv+0xe>
		this->state = HIGH;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	84 83       	std	Z+4, r24	; 0x04
    1816:	01 c0       	rjmp	.+2      	; 0x181a <_ZN7IOClass3offEv+0x10>
		else
		this->state = LOW;
    1818:	14 82       	std	Z+4, r1	; 0x04
		digitalWrite(this->pin, this->state);
    181a:	64 81       	ldd	r22, Z+4	; 0x04
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	0e 94 18 07 	call	0xe30	; 0xe30 <digitalWrite>
    1822:	08 95       	ret

00001824 <_ZN7IOClass9readstateEv>:
	};
	~IOClass(){};
	
	inline bool readstate(void) override
	{
		return (bool)digitalRead(this->pin);
    1824:	fc 01       	movw	r30, r24
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	0e 94 48 07 	call	0xe90	; 0xe90 <digitalRead>
    182c:	21 e0       	ldi	r18, 0x01	; 1
    182e:	89 2b       	or	r24, r25
    1830:	09 f4       	brne	.+2      	; 0x1834 <_ZN7IOClass9readstateEv+0x10>
    1832:	20 e0       	ldi	r18, 0x00	; 0
	};
    1834:	82 2f       	mov	r24, r18
    1836:	08 95       	ret

00001838 <__vector_20>:
private:
};


ISR(TCC1_OVF_vect)
{
    1838:	1f 92       	push	r1
    183a:	0f 92       	push	r0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	0f 92       	push	r0
    1840:	11 24       	eor	r1, r1
    1842:	08 b6       	in	r0, 0x38	; 56
    1844:	0f 92       	push	r0
    1846:	18 be       	out	0x38, r1	; 56
    1848:	09 b6       	in	r0, 0x39	; 57
    184a:	0f 92       	push	r0
    184c:	19 be       	out	0x39, r1	; 57
    184e:	0b b6       	in	r0, 0x3b	; 59
    1850:	0f 92       	push	r0
    1852:	1b be       	out	0x3b, r1	; 59
    1854:	2f 93       	push	r18
    1856:	3f 93       	push	r19
    1858:	4f 93       	push	r20
    185a:	5f 93       	push	r21
    185c:	6f 93       	push	r22
    185e:	7f 93       	push	r23
    1860:	8f 93       	push	r24
    1862:	9f 93       	push	r25
    1864:	af 93       	push	r26
    1866:	bf 93       	push	r27
    1868:	ef 93       	push	r30
    186a:	ff 93       	push	r31
	pKeypad->scan();
    186c:	80 91 a9 29 	lds	r24, 0x29A9	; 0x8029a9 <pKeypad>
    1870:	90 91 aa 29 	lds	r25, 0x29AA	; 0x8029aa <pKeypad+0x1>
    1874:	dc 01       	movw	r26, r24
    1876:	ed 91       	ld	r30, X+
    1878:	fc 91       	ld	r31, X
    187a:	04 80       	ldd	r0, Z+4	; 0x04
    187c:	f5 81       	ldd	r31, Z+5	; 0x05
    187e:	e0 2d       	mov	r30, r0
    1880:	19 95       	eicall
}
    1882:	ff 91       	pop	r31
    1884:	ef 91       	pop	r30
    1886:	bf 91       	pop	r27
    1888:	af 91       	pop	r26
    188a:	9f 91       	pop	r25
    188c:	8f 91       	pop	r24
    188e:	7f 91       	pop	r23
    1890:	6f 91       	pop	r22
    1892:	5f 91       	pop	r21
    1894:	4f 91       	pop	r20
    1896:	3f 91       	pop	r19
    1898:	2f 91       	pop	r18
    189a:	0f 90       	pop	r0
    189c:	0b be       	out	0x3b, r0	; 59
    189e:	0f 90       	pop	r0
    18a0:	09 be       	out	0x39, r0	; 57
    18a2:	0f 90       	pop	r0
    18a4:	08 be       	out	0x38, r0	; 56
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	0f 90       	pop	r0
    18ac:	1f 90       	pop	r1
    18ae:	18 95       	reti

000018b0 <main>:

logic posLogic;

int main(void)
{
	pKeypad = &matrixKeypad;
    18b0:	85 e8       	ldi	r24, 0x85	; 133
    18b2:	99 e2       	ldi	r25, 0x29	; 41
    18b4:	80 93 a9 29 	sts	0x29A9, r24	; 0x8029a9 <pKeypad>
    18b8:	90 93 aa 29 	sts	0x29AA, r25	; 0x8029aa <pKeypad+0x1>
	//posKeypad = &iKeys;
	pDebugPort=&Serial5;
    18bc:	8e e3       	ldi	r24, 0x3E	; 62
    18be:	91 e2       	ldi	r25, 0x21	; 33
    18c0:	80 93 a7 29 	sts	0x29A7, r24	; 0x8029a7 <pDebugPort>
    18c4:	90 93 a8 29 	sts	0x29A8, r25	; 0x8029a8 <pDebugPort+0x1>
	pBuzzer =&buzzer;
    18c8:	80 ea       	ldi	r24, 0xA0	; 160
    18ca:	99 e2       	ldi	r25, 0x29	; 41
    18cc:	80 93 a5 29 	sts	0x29A5, r24	; 0x8029a5 <pBuzzer>
    18d0:	90 93 a6 29 	sts	0x29A6, r25	; 0x8029a6 <pBuzzer+0x1>
	
	
	clockConfig();
    18d4:	0e 94 af 05 	call	0xb5e	; 0xb5e <clockConfig>
	millisTimerConfig();
    18d8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <millisTimerConfig>
	pKeypad->registerOb(&posLogic);
    18dc:	80 91 a9 29 	lds	r24, 0x29A9	; 0x8029a9 <pKeypad>
    18e0:	90 91 aa 29 	lds	r25, 0x29AA	; 0x8029aa <pKeypad+0x1>
    18e4:	dc 01       	movw	r26, r24
    18e6:	ed 91       	ld	r30, X+
    18e8:	fc 91       	ld	r31, X
    18ea:	01 90       	ld	r0, Z+
    18ec:	f0 81       	ld	r31, Z
    18ee:	e0 2d       	mov	r30, r0
    18f0:	6e e9       	ldi	r22, 0x9E	; 158
    18f2:	79 e2       	ldi	r23, 0x29	; 41
    18f4:	19 95       	eicall
    18f6:	ff cf       	rjmp	.-2      	; 0x18f6 <main+0x46>

000018f8 <_GLOBAL__sub_I_pKeypad>:
	
	while (1)
	{
	}
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
	uint8_t pin;
	bool activeLevel;
	bool state;
	public:
	IOClass(uint8_t pin, uint8_t dir, bool activeLevel = HIGH)
	{
    18fc:	c0 ea       	ldi	r28, 0xA0	; 160
    18fe:	d9 e2       	ldi	r29, 0x29	; 41
    1900:	88 e2       	ldi	r24, 0x28	; 40
    1902:	91 e2       	ldi	r25, 0x21	; 33
    1904:	88 83       	st	Y, r24
    1906:	99 83       	std	Y+1, r25	; 0x01
		this->pin = pin;
    1908:	8d e1       	ldi	r24, 0x1D	; 29
    190a:	8a 83       	std	Y+2, r24	; 0x02
		this->activeLevel = activeLevel;
    190c:	1b 82       	std	Y+3, r1	; 0x03
		pinMode(pin, dir);
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <pinMode>
		this->state = HIGH;
		digitalWrite(this->pin, this->state);
	};
	inline void off(void) override
	{
		if (!this->activeLevel)
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	81 11       	cpse	r24, r1
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <_GLOBAL__sub_I_pKeypad+0x2a>
		this->state = HIGH;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	80 93 a4 29 	sts	0x29A4, r24	; 0x8029a4 <buzzer+0x4>
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <_GLOBAL__sub_I_pKeypad+0x2e>
		else
		this->state = LOW;
    1922:	10 92 a4 29 	sts	0x29A4, r1	; 0x8029a4 <buzzer+0x4>
		digitalWrite(this->pin, this->state);
    1926:	e0 ea       	ldi	r30, 0xA0	; 160
    1928:	f9 e2       	ldi	r31, 0x29	; 41
    192a:	64 81       	ldd	r22, Z+4	; 0x04
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	0e 94 18 07 	call	0xe30	; 0xe30 <digitalWrite>


class logic : public KeyObserver
{
public:
	logic(){}
    1932:	84 e3       	ldi	r24, 0x34	; 52
    1934:	91 e2       	ldi	r25, 0x21	; 33
    1936:	80 93 9e 29 	sts	0x299E, r24	; 0x80299e <posLogic>
    193a:	90 93 9f 29 	sts	0x299F, r25	; 0x80299f <posLogic+0x1>
	pKeypad->registerOb(&posLogic);
	
	while (1)
	{
	}
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <__subsf3>:
    1944:	50 58       	subi	r21, 0x80	; 128

00001946 <__addsf3>:
    1946:	bb 27       	eor	r27, r27
    1948:	aa 27       	eor	r26, r26
    194a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__addsf3x>
    194e:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__fp_round>
    1952:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_pscA>
    1956:	38 f0       	brcs	.+14     	; 0x1966 <__addsf3+0x20>
    1958:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fp_pscB>
    195c:	20 f0       	brcs	.+8      	; 0x1966 <__addsf3+0x20>
    195e:	39 f4       	brne	.+14     	; 0x196e <__addsf3+0x28>
    1960:	9f 3f       	cpi	r25, 0xFF	; 255
    1962:	19 f4       	brne	.+6      	; 0x196a <__addsf3+0x24>
    1964:	26 f4       	brtc	.+8      	; 0x196e <__addsf3+0x28>
    1966:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_nan>
    196a:	0e f4       	brtc	.+2      	; 0x196e <__addsf3+0x28>
    196c:	e0 95       	com	r30
    196e:	e7 fb       	bst	r30, 7
    1970:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_inf>

00001974 <__addsf3x>:
    1974:	e9 2f       	mov	r30, r25
    1976:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_split3>
    197a:	58 f3       	brcs	.-42     	; 0x1952 <__addsf3+0xc>
    197c:	ba 17       	cp	r27, r26
    197e:	62 07       	cpc	r22, r18
    1980:	73 07       	cpc	r23, r19
    1982:	84 07       	cpc	r24, r20
    1984:	95 07       	cpc	r25, r21
    1986:	20 f0       	brcs	.+8      	; 0x1990 <__addsf3x+0x1c>
    1988:	79 f4       	brne	.+30     	; 0x19a8 <__addsf3x+0x34>
    198a:	a6 f5       	brtc	.+104    	; 0x19f4 <__addsf3x+0x80>
    198c:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__fp_zero>
    1990:	0e f4       	brtc	.+2      	; 0x1994 <__addsf3x+0x20>
    1992:	e0 95       	com	r30
    1994:	0b 2e       	mov	r0, r27
    1996:	ba 2f       	mov	r27, r26
    1998:	a0 2d       	mov	r26, r0
    199a:	0b 01       	movw	r0, r22
    199c:	b9 01       	movw	r22, r18
    199e:	90 01       	movw	r18, r0
    19a0:	0c 01       	movw	r0, r24
    19a2:	ca 01       	movw	r24, r20
    19a4:	a0 01       	movw	r20, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	ff 27       	eor	r31, r31
    19aa:	59 1b       	sub	r21, r25
    19ac:	99 f0       	breq	.+38     	; 0x19d4 <__addsf3x+0x60>
    19ae:	59 3f       	cpi	r21, 0xF9	; 249
    19b0:	50 f4       	brcc	.+20     	; 0x19c6 <__addsf3x+0x52>
    19b2:	50 3e       	cpi	r21, 0xE0	; 224
    19b4:	68 f1       	brcs	.+90     	; 0x1a10 <__addsf3x+0x9c>
    19b6:	1a 16       	cp	r1, r26
    19b8:	f0 40       	sbci	r31, 0x00	; 0
    19ba:	a2 2f       	mov	r26, r18
    19bc:	23 2f       	mov	r18, r19
    19be:	34 2f       	mov	r19, r20
    19c0:	44 27       	eor	r20, r20
    19c2:	58 5f       	subi	r21, 0xF8	; 248
    19c4:	f3 cf       	rjmp	.-26     	; 0x19ac <__addsf3x+0x38>
    19c6:	46 95       	lsr	r20
    19c8:	37 95       	ror	r19
    19ca:	27 95       	ror	r18
    19cc:	a7 95       	ror	r26
    19ce:	f0 40       	sbci	r31, 0x00	; 0
    19d0:	53 95       	inc	r21
    19d2:	c9 f7       	brne	.-14     	; 0x19c6 <__addsf3x+0x52>
    19d4:	7e f4       	brtc	.+30     	; 0x19f4 <__addsf3x+0x80>
    19d6:	1f 16       	cp	r1, r31
    19d8:	ba 0b       	sbc	r27, r26
    19da:	62 0b       	sbc	r22, r18
    19dc:	73 0b       	sbc	r23, r19
    19de:	84 0b       	sbc	r24, r20
    19e0:	ba f0       	brmi	.+46     	; 0x1a10 <__addsf3x+0x9c>
    19e2:	91 50       	subi	r25, 0x01	; 1
    19e4:	a1 f0       	breq	.+40     	; 0x1a0e <__addsf3x+0x9a>
    19e6:	ff 0f       	add	r31, r31
    19e8:	bb 1f       	adc	r27, r27
    19ea:	66 1f       	adc	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	c2 f7       	brpl	.-16     	; 0x19e2 <__addsf3x+0x6e>
    19f2:	0e c0       	rjmp	.+28     	; 0x1a10 <__addsf3x+0x9c>
    19f4:	ba 0f       	add	r27, r26
    19f6:	62 1f       	adc	r22, r18
    19f8:	73 1f       	adc	r23, r19
    19fa:	84 1f       	adc	r24, r20
    19fc:	48 f4       	brcc	.+18     	; 0x1a10 <__addsf3x+0x9c>
    19fe:	87 95       	ror	r24
    1a00:	77 95       	ror	r23
    1a02:	67 95       	ror	r22
    1a04:	b7 95       	ror	r27
    1a06:	f7 95       	ror	r31
    1a08:	9e 3f       	cpi	r25, 0xFE	; 254
    1a0a:	08 f0       	brcs	.+2      	; 0x1a0e <__addsf3x+0x9a>
    1a0c:	b0 cf       	rjmp	.-160    	; 0x196e <__addsf3+0x28>
    1a0e:	93 95       	inc	r25
    1a10:	88 0f       	add	r24, r24
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <__addsf3x+0xa2>
    1a14:	99 27       	eor	r25, r25
    1a16:	ee 0f       	add	r30, r30
    1a18:	97 95       	ror	r25
    1a1a:	87 95       	ror	r24
    1a1c:	08 95       	ret

00001a1e <__cmpsf2>:
    1a1e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__fp_cmp>
    1a22:	08 f4       	brcc	.+2      	; 0x1a26 <__cmpsf2+0x8>
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	08 95       	ret

00001a28 <__divsf3>:
    1a28:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__divsf3x>
    1a2c:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__fp_round>
    1a30:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fp_pscB>
    1a34:	58 f0       	brcs	.+22     	; 0x1a4c <__divsf3+0x24>
    1a36:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_pscA>
    1a3a:	40 f0       	brcs	.+16     	; 0x1a4c <__divsf3+0x24>
    1a3c:	29 f4       	brne	.+10     	; 0x1a48 <__divsf3+0x20>
    1a3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a40:	29 f0       	breq	.+10     	; 0x1a4c <__divsf3+0x24>
    1a42:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_inf>
    1a46:	51 11       	cpse	r21, r1
    1a48:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__fp_szero>
    1a4c:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_nan>

00001a50 <__divsf3x>:
    1a50:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_split3>
    1a54:	68 f3       	brcs	.-38     	; 0x1a30 <__divsf3+0x8>

00001a56 <__divsf3_pse>:
    1a56:	99 23       	and	r25, r25
    1a58:	b1 f3       	breq	.-20     	; 0x1a46 <__divsf3+0x1e>
    1a5a:	55 23       	and	r21, r21
    1a5c:	91 f3       	breq	.-28     	; 0x1a42 <__divsf3+0x1a>
    1a5e:	95 1b       	sub	r25, r21
    1a60:	55 0b       	sbc	r21, r21
    1a62:	bb 27       	eor	r27, r27
    1a64:	aa 27       	eor	r26, r26
    1a66:	62 17       	cp	r22, r18
    1a68:	73 07       	cpc	r23, r19
    1a6a:	84 07       	cpc	r24, r20
    1a6c:	38 f0       	brcs	.+14     	; 0x1a7c <__divsf3_pse+0x26>
    1a6e:	9f 5f       	subi	r25, 0xFF	; 255
    1a70:	5f 4f       	sbci	r21, 0xFF	; 255
    1a72:	22 0f       	add	r18, r18
    1a74:	33 1f       	adc	r19, r19
    1a76:	44 1f       	adc	r20, r20
    1a78:	aa 1f       	adc	r26, r26
    1a7a:	a9 f3       	breq	.-22     	; 0x1a66 <__divsf3_pse+0x10>
    1a7c:	35 d0       	rcall	.+106    	; 0x1ae8 <__divsf3_pse+0x92>
    1a7e:	0e 2e       	mov	r0, r30
    1a80:	3a f0       	brmi	.+14     	; 0x1a90 <__divsf3_pse+0x3a>
    1a82:	e0 e8       	ldi	r30, 0x80	; 128
    1a84:	32 d0       	rcall	.+100    	; 0x1aea <__divsf3_pse+0x94>
    1a86:	91 50       	subi	r25, 0x01	; 1
    1a88:	50 40       	sbci	r21, 0x00	; 0
    1a8a:	e6 95       	lsr	r30
    1a8c:	00 1c       	adc	r0, r0
    1a8e:	ca f7       	brpl	.-14     	; 0x1a82 <__divsf3_pse+0x2c>
    1a90:	2b d0       	rcall	.+86     	; 0x1ae8 <__divsf3_pse+0x92>
    1a92:	fe 2f       	mov	r31, r30
    1a94:	29 d0       	rcall	.+82     	; 0x1ae8 <__divsf3_pse+0x92>
    1a96:	66 0f       	add	r22, r22
    1a98:	77 1f       	adc	r23, r23
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	bb 1f       	adc	r27, r27
    1a9e:	26 17       	cp	r18, r22
    1aa0:	37 07       	cpc	r19, r23
    1aa2:	48 07       	cpc	r20, r24
    1aa4:	ab 07       	cpc	r26, r27
    1aa6:	b0 e8       	ldi	r27, 0x80	; 128
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <__divsf3_pse+0x56>
    1aaa:	bb 0b       	sbc	r27, r27
    1aac:	80 2d       	mov	r24, r0
    1aae:	bf 01       	movw	r22, r30
    1ab0:	ff 27       	eor	r31, r31
    1ab2:	93 58       	subi	r25, 0x83	; 131
    1ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab6:	3a f0       	brmi	.+14     	; 0x1ac6 <__divsf3_pse+0x70>
    1ab8:	9e 3f       	cpi	r25, 0xFE	; 254
    1aba:	51 05       	cpc	r21, r1
    1abc:	78 f0       	brcs	.+30     	; 0x1adc <__divsf3_pse+0x86>
    1abe:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_inf>
    1ac2:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__fp_szero>
    1ac6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac8:	e4 f3       	brlt	.-8      	; 0x1ac2 <__divsf3_pse+0x6c>
    1aca:	98 3e       	cpi	r25, 0xE8	; 232
    1acc:	d4 f3       	brlt	.-12     	; 0x1ac2 <__divsf3_pse+0x6c>
    1ace:	86 95       	lsr	r24
    1ad0:	77 95       	ror	r23
    1ad2:	67 95       	ror	r22
    1ad4:	b7 95       	ror	r27
    1ad6:	f7 95       	ror	r31
    1ad8:	9f 5f       	subi	r25, 0xFF	; 255
    1ada:	c9 f7       	brne	.-14     	; 0x1ace <__divsf3_pse+0x78>
    1adc:	88 0f       	add	r24, r24
    1ade:	91 1d       	adc	r25, r1
    1ae0:	96 95       	lsr	r25
    1ae2:	87 95       	ror	r24
    1ae4:	97 f9       	bld	r25, 7
    1ae6:	08 95       	ret
    1ae8:	e1 e0       	ldi	r30, 0x01	; 1
    1aea:	66 0f       	add	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	88 1f       	adc	r24, r24
    1af0:	bb 1f       	adc	r27, r27
    1af2:	62 17       	cp	r22, r18
    1af4:	73 07       	cpc	r23, r19
    1af6:	84 07       	cpc	r24, r20
    1af8:	ba 07       	cpc	r27, r26
    1afa:	20 f0       	brcs	.+8      	; 0x1b04 <__divsf3_pse+0xae>
    1afc:	62 1b       	sub	r22, r18
    1afe:	73 0b       	sbc	r23, r19
    1b00:	84 0b       	sbc	r24, r20
    1b02:	ba 0b       	sbc	r27, r26
    1b04:	ee 1f       	adc	r30, r30
    1b06:	88 f7       	brcc	.-30     	; 0x1aea <__divsf3_pse+0x94>
    1b08:	e0 95       	com	r30
    1b0a:	08 95       	ret

00001b0c <__fixunssfsi>:
    1b0c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__fp_splitA>
    1b10:	88 f0       	brcs	.+34     	; 0x1b34 <__fixunssfsi+0x28>
    1b12:	9f 57       	subi	r25, 0x7F	; 127
    1b14:	98 f0       	brcs	.+38     	; 0x1b3c <__fixunssfsi+0x30>
    1b16:	b9 2f       	mov	r27, r25
    1b18:	99 27       	eor	r25, r25
    1b1a:	b7 51       	subi	r27, 0x17	; 23
    1b1c:	b0 f0       	brcs	.+44     	; 0x1b4a <__fixunssfsi+0x3e>
    1b1e:	e1 f0       	breq	.+56     	; 0x1b58 <__fixunssfsi+0x4c>
    1b20:	66 0f       	add	r22, r22
    1b22:	77 1f       	adc	r23, r23
    1b24:	88 1f       	adc	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	1a f0       	brmi	.+6      	; 0x1b30 <__fixunssfsi+0x24>
    1b2a:	ba 95       	dec	r27
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__fixunssfsi+0x14>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <__fixunssfsi+0x4c>
    1b30:	b1 30       	cpi	r27, 0x01	; 1
    1b32:	91 f0       	breq	.+36     	; 0x1b58 <__fixunssfsi+0x4c>
    1b34:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fp_zero>
    1b38:	b1 e0       	ldi	r27, 0x01	; 1
    1b3a:	08 95       	ret
    1b3c:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__fp_zero>
    1b40:	67 2f       	mov	r22, r23
    1b42:	78 2f       	mov	r23, r24
    1b44:	88 27       	eor	r24, r24
    1b46:	b8 5f       	subi	r27, 0xF8	; 248
    1b48:	39 f0       	breq	.+14     	; 0x1b58 <__fixunssfsi+0x4c>
    1b4a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b4c:	cc f3       	brlt	.-14     	; 0x1b40 <__fixunssfsi+0x34>
    1b4e:	86 95       	lsr	r24
    1b50:	77 95       	ror	r23
    1b52:	67 95       	ror	r22
    1b54:	b3 95       	inc	r27
    1b56:	d9 f7       	brne	.-10     	; 0x1b4e <__fixunssfsi+0x42>
    1b58:	3e f4       	brtc	.+14     	; 0x1b68 <__fixunssfsi+0x5c>
    1b5a:	90 95       	com	r25
    1b5c:	80 95       	com	r24
    1b5e:	70 95       	com	r23
    1b60:	61 95       	neg	r22
    1b62:	7f 4f       	sbci	r23, 0xFF	; 255
    1b64:	8f 4f       	sbci	r24, 0xFF	; 255
    1b66:	9f 4f       	sbci	r25, 0xFF	; 255
    1b68:	08 95       	ret

00001b6a <__floatunsisf>:
    1b6a:	e8 94       	clt
    1b6c:	09 c0       	rjmp	.+18     	; 0x1b80 <__floatsisf+0x12>

00001b6e <__floatsisf>:
    1b6e:	97 fb       	bst	r25, 7
    1b70:	3e f4       	brtc	.+14     	; 0x1b80 <__floatsisf+0x12>
    1b72:	90 95       	com	r25
    1b74:	80 95       	com	r24
    1b76:	70 95       	com	r23
    1b78:	61 95       	neg	r22
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	99 23       	and	r25, r25
    1b82:	a9 f0       	breq	.+42     	; 0x1bae <__floatsisf+0x40>
    1b84:	f9 2f       	mov	r31, r25
    1b86:	96 e9       	ldi	r25, 0x96	; 150
    1b88:	bb 27       	eor	r27, r27
    1b8a:	93 95       	inc	r25
    1b8c:	f6 95       	lsr	r31
    1b8e:	87 95       	ror	r24
    1b90:	77 95       	ror	r23
    1b92:	67 95       	ror	r22
    1b94:	b7 95       	ror	r27
    1b96:	f1 11       	cpse	r31, r1
    1b98:	f8 cf       	rjmp	.-16     	; 0x1b8a <__floatsisf+0x1c>
    1b9a:	fa f4       	brpl	.+62     	; 0x1bda <__floatsisf+0x6c>
    1b9c:	bb 0f       	add	r27, r27
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <__floatsisf+0x36>
    1ba0:	60 ff       	sbrs	r22, 0
    1ba2:	1b c0       	rjmp	.+54     	; 0x1bda <__floatsisf+0x6c>
    1ba4:	6f 5f       	subi	r22, 0xFF	; 255
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	16 c0       	rjmp	.+44     	; 0x1bda <__floatsisf+0x6c>
    1bae:	88 23       	and	r24, r24
    1bb0:	11 f0       	breq	.+4      	; 0x1bb6 <__floatsisf+0x48>
    1bb2:	96 e9       	ldi	r25, 0x96	; 150
    1bb4:	11 c0       	rjmp	.+34     	; 0x1bd8 <__floatsisf+0x6a>
    1bb6:	77 23       	and	r23, r23
    1bb8:	21 f0       	breq	.+8      	; 0x1bc2 <__floatsisf+0x54>
    1bba:	9e e8       	ldi	r25, 0x8E	; 142
    1bbc:	87 2f       	mov	r24, r23
    1bbe:	76 2f       	mov	r23, r22
    1bc0:	05 c0       	rjmp	.+10     	; 0x1bcc <__floatsisf+0x5e>
    1bc2:	66 23       	and	r22, r22
    1bc4:	71 f0       	breq	.+28     	; 0x1be2 <__floatsisf+0x74>
    1bc6:	96 e8       	ldi	r25, 0x86	; 134
    1bc8:	86 2f       	mov	r24, r22
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	2a f0       	brmi	.+10     	; 0x1bda <__floatsisf+0x6c>
    1bd0:	9a 95       	dec	r25
    1bd2:	66 0f       	add	r22, r22
    1bd4:	77 1f       	adc	r23, r23
    1bd6:	88 1f       	adc	r24, r24
    1bd8:	da f7       	brpl	.-10     	; 0x1bd0 <__floatsisf+0x62>
    1bda:	88 0f       	add	r24, r24
    1bdc:	96 95       	lsr	r25
    1bde:	87 95       	ror	r24
    1be0:	97 f9       	bld	r25, 7
    1be2:	08 95       	ret

00001be4 <__fp_cmp>:
    1be4:	99 0f       	add	r25, r25
    1be6:	00 08       	sbc	r0, r0
    1be8:	55 0f       	add	r21, r21
    1bea:	aa 0b       	sbc	r26, r26
    1bec:	e0 e8       	ldi	r30, 0x80	; 128
    1bee:	fe ef       	ldi	r31, 0xFE	; 254
    1bf0:	16 16       	cp	r1, r22
    1bf2:	17 06       	cpc	r1, r23
    1bf4:	e8 07       	cpc	r30, r24
    1bf6:	f9 07       	cpc	r31, r25
    1bf8:	c0 f0       	brcs	.+48     	; 0x1c2a <__fp_cmp+0x46>
    1bfa:	12 16       	cp	r1, r18
    1bfc:	13 06       	cpc	r1, r19
    1bfe:	e4 07       	cpc	r30, r20
    1c00:	f5 07       	cpc	r31, r21
    1c02:	98 f0       	brcs	.+38     	; 0x1c2a <__fp_cmp+0x46>
    1c04:	62 1b       	sub	r22, r18
    1c06:	73 0b       	sbc	r23, r19
    1c08:	84 0b       	sbc	r24, r20
    1c0a:	95 0b       	sbc	r25, r21
    1c0c:	39 f4       	brne	.+14     	; 0x1c1c <__fp_cmp+0x38>
    1c0e:	0a 26       	eor	r0, r26
    1c10:	61 f0       	breq	.+24     	; 0x1c2a <__fp_cmp+0x46>
    1c12:	23 2b       	or	r18, r19
    1c14:	24 2b       	or	r18, r20
    1c16:	25 2b       	or	r18, r21
    1c18:	21 f4       	brne	.+8      	; 0x1c22 <__fp_cmp+0x3e>
    1c1a:	08 95       	ret
    1c1c:	0a 26       	eor	r0, r26
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <__fp_cmp+0x3e>
    1c20:	a1 40       	sbci	r26, 0x01	; 1
    1c22:	a6 95       	lsr	r26
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	81 1d       	adc	r24, r1
    1c28:	81 1d       	adc	r24, r1
    1c2a:	08 95       	ret

00001c2c <__fp_inf>:
    1c2c:	97 f9       	bld	r25, 7
    1c2e:	9f 67       	ori	r25, 0x7F	; 127
    1c30:	80 e8       	ldi	r24, 0x80	; 128
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	08 95       	ret

00001c38 <__fp_nan>:
    1c38:	9f ef       	ldi	r25, 0xFF	; 255
    1c3a:	80 ec       	ldi	r24, 0xC0	; 192
    1c3c:	08 95       	ret

00001c3e <__fp_pscA>:
    1c3e:	00 24       	eor	r0, r0
    1c40:	0a 94       	dec	r0
    1c42:	16 16       	cp	r1, r22
    1c44:	17 06       	cpc	r1, r23
    1c46:	18 06       	cpc	r1, r24
    1c48:	09 06       	cpc	r0, r25
    1c4a:	08 95       	ret

00001c4c <__fp_pscB>:
    1c4c:	00 24       	eor	r0, r0
    1c4e:	0a 94       	dec	r0
    1c50:	12 16       	cp	r1, r18
    1c52:	13 06       	cpc	r1, r19
    1c54:	14 06       	cpc	r1, r20
    1c56:	05 06       	cpc	r0, r21
    1c58:	08 95       	ret

00001c5a <__fp_round>:
    1c5a:	09 2e       	mov	r0, r25
    1c5c:	03 94       	inc	r0
    1c5e:	00 0c       	add	r0, r0
    1c60:	11 f4       	brne	.+4      	; 0x1c66 <__fp_round+0xc>
    1c62:	88 23       	and	r24, r24
    1c64:	52 f0       	brmi	.+20     	; 0x1c7a <__fp_round+0x20>
    1c66:	bb 0f       	add	r27, r27
    1c68:	40 f4       	brcc	.+16     	; 0x1c7a <__fp_round+0x20>
    1c6a:	bf 2b       	or	r27, r31
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <__fp_round+0x18>
    1c6e:	60 ff       	sbrs	r22, 0
    1c70:	04 c0       	rjmp	.+8      	; 0x1c7a <__fp_round+0x20>
    1c72:	6f 5f       	subi	r22, 0xFF	; 255
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	8f 4f       	sbci	r24, 0xFF	; 255
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	08 95       	ret

00001c7c <__fp_split3>:
    1c7c:	57 fd       	sbrc	r21, 7
    1c7e:	90 58       	subi	r25, 0x80	; 128
    1c80:	44 0f       	add	r20, r20
    1c82:	55 1f       	adc	r21, r21
    1c84:	59 f0       	breq	.+22     	; 0x1c9c <__fp_splitA+0x10>
    1c86:	5f 3f       	cpi	r21, 0xFF	; 255
    1c88:	71 f0       	breq	.+28     	; 0x1ca6 <__fp_splitA+0x1a>
    1c8a:	47 95       	ror	r20

00001c8c <__fp_splitA>:
    1c8c:	88 0f       	add	r24, r24
    1c8e:	97 fb       	bst	r25, 7
    1c90:	99 1f       	adc	r25, r25
    1c92:	61 f0       	breq	.+24     	; 0x1cac <__fp_splitA+0x20>
    1c94:	9f 3f       	cpi	r25, 0xFF	; 255
    1c96:	79 f0       	breq	.+30     	; 0x1cb6 <__fp_splitA+0x2a>
    1c98:	87 95       	ror	r24
    1c9a:	08 95       	ret
    1c9c:	12 16       	cp	r1, r18
    1c9e:	13 06       	cpc	r1, r19
    1ca0:	14 06       	cpc	r1, r20
    1ca2:	55 1f       	adc	r21, r21
    1ca4:	f2 cf       	rjmp	.-28     	; 0x1c8a <__fp_split3+0xe>
    1ca6:	46 95       	lsr	r20
    1ca8:	f1 df       	rcall	.-30     	; 0x1c8c <__fp_splitA>
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <__fp_splitA+0x30>
    1cac:	16 16       	cp	r1, r22
    1cae:	17 06       	cpc	r1, r23
    1cb0:	18 06       	cpc	r1, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	f1 cf       	rjmp	.-30     	; 0x1c98 <__fp_splitA+0xc>
    1cb6:	86 95       	lsr	r24
    1cb8:	71 05       	cpc	r23, r1
    1cba:	61 05       	cpc	r22, r1
    1cbc:	08 94       	sec
    1cbe:	08 95       	ret

00001cc0 <__fp_zero>:
    1cc0:	e8 94       	clt

00001cc2 <__fp_szero>:
    1cc2:	bb 27       	eor	r27, r27
    1cc4:	66 27       	eor	r22, r22
    1cc6:	77 27       	eor	r23, r23
    1cc8:	cb 01       	movw	r24, r22
    1cca:	97 f9       	bld	r25, 7
    1ccc:	08 95       	ret

00001cce <__gesf2>:
    1cce:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__fp_cmp>
    1cd2:	08 f4       	brcc	.+2      	; 0x1cd6 <__gesf2+0x8>
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	08 95       	ret

00001cd8 <__mulsf3>:
    1cd8:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__mulsf3x>
    1cdc:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__fp_round>
    1ce0:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_pscA>
    1ce4:	38 f0       	brcs	.+14     	; 0x1cf4 <__mulsf3+0x1c>
    1ce6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fp_pscB>
    1cea:	20 f0       	brcs	.+8      	; 0x1cf4 <__mulsf3+0x1c>
    1cec:	95 23       	and	r25, r21
    1cee:	11 f0       	breq	.+4      	; 0x1cf4 <__mulsf3+0x1c>
    1cf0:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_inf>
    1cf4:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_nan>
    1cf8:	11 24       	eor	r1, r1
    1cfa:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__fp_szero>

00001cfe <__mulsf3x>:
    1cfe:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_split3>
    1d02:	70 f3       	brcs	.-36     	; 0x1ce0 <__mulsf3+0x8>

00001d04 <__mulsf3_pse>:
    1d04:	95 9f       	mul	r25, r21
    1d06:	c1 f3       	breq	.-16     	; 0x1cf8 <__mulsf3+0x20>
    1d08:	95 0f       	add	r25, r21
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	55 1f       	adc	r21, r21
    1d0e:	62 9f       	mul	r22, r18
    1d10:	f0 01       	movw	r30, r0
    1d12:	72 9f       	mul	r23, r18
    1d14:	bb 27       	eor	r27, r27
    1d16:	f0 0d       	add	r31, r0
    1d18:	b1 1d       	adc	r27, r1
    1d1a:	63 9f       	mul	r22, r19
    1d1c:	aa 27       	eor	r26, r26
    1d1e:	f0 0d       	add	r31, r0
    1d20:	b1 1d       	adc	r27, r1
    1d22:	aa 1f       	adc	r26, r26
    1d24:	64 9f       	mul	r22, r20
    1d26:	66 27       	eor	r22, r22
    1d28:	b0 0d       	add	r27, r0
    1d2a:	a1 1d       	adc	r26, r1
    1d2c:	66 1f       	adc	r22, r22
    1d2e:	82 9f       	mul	r24, r18
    1d30:	22 27       	eor	r18, r18
    1d32:	b0 0d       	add	r27, r0
    1d34:	a1 1d       	adc	r26, r1
    1d36:	62 1f       	adc	r22, r18
    1d38:	73 9f       	mul	r23, r19
    1d3a:	b0 0d       	add	r27, r0
    1d3c:	a1 1d       	adc	r26, r1
    1d3e:	62 1f       	adc	r22, r18
    1d40:	83 9f       	mul	r24, r19
    1d42:	a0 0d       	add	r26, r0
    1d44:	61 1d       	adc	r22, r1
    1d46:	22 1f       	adc	r18, r18
    1d48:	74 9f       	mul	r23, r20
    1d4a:	33 27       	eor	r19, r19
    1d4c:	a0 0d       	add	r26, r0
    1d4e:	61 1d       	adc	r22, r1
    1d50:	23 1f       	adc	r18, r19
    1d52:	84 9f       	mul	r24, r20
    1d54:	60 0d       	add	r22, r0
    1d56:	21 1d       	adc	r18, r1
    1d58:	82 2f       	mov	r24, r18
    1d5a:	76 2f       	mov	r23, r22
    1d5c:	6a 2f       	mov	r22, r26
    1d5e:	11 24       	eor	r1, r1
    1d60:	9f 57       	subi	r25, 0x7F	; 127
    1d62:	50 40       	sbci	r21, 0x00	; 0
    1d64:	9a f0       	brmi	.+38     	; 0x1d8c <__mulsf3_pse+0x88>
    1d66:	f1 f0       	breq	.+60     	; 0x1da4 <__mulsf3_pse+0xa0>
    1d68:	88 23       	and	r24, r24
    1d6a:	4a f0       	brmi	.+18     	; 0x1d7e <__mulsf3_pse+0x7a>
    1d6c:	ee 0f       	add	r30, r30
    1d6e:	ff 1f       	adc	r31, r31
    1d70:	bb 1f       	adc	r27, r27
    1d72:	66 1f       	adc	r22, r22
    1d74:	77 1f       	adc	r23, r23
    1d76:	88 1f       	adc	r24, r24
    1d78:	91 50       	subi	r25, 0x01	; 1
    1d7a:	50 40       	sbci	r21, 0x00	; 0
    1d7c:	a9 f7       	brne	.-22     	; 0x1d68 <__mulsf3_pse+0x64>
    1d7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d80:	51 05       	cpc	r21, r1
    1d82:	80 f0       	brcs	.+32     	; 0x1da4 <__mulsf3_pse+0xa0>
    1d84:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_inf>
    1d88:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__fp_szero>
    1d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8e:	e4 f3       	brlt	.-8      	; 0x1d88 <__mulsf3_pse+0x84>
    1d90:	98 3e       	cpi	r25, 0xE8	; 232
    1d92:	d4 f3       	brlt	.-12     	; 0x1d88 <__mulsf3_pse+0x84>
    1d94:	86 95       	lsr	r24
    1d96:	77 95       	ror	r23
    1d98:	67 95       	ror	r22
    1d9a:	b7 95       	ror	r27
    1d9c:	f7 95       	ror	r31
    1d9e:	e7 95       	ror	r30
    1da0:	9f 5f       	subi	r25, 0xFF	; 255
    1da2:	c1 f7       	brne	.-16     	; 0x1d94 <__mulsf3_pse+0x90>
    1da4:	fe 2b       	or	r31, r30
    1da6:	88 0f       	add	r24, r24
    1da8:	91 1d       	adc	r25, r1
    1daa:	96 95       	lsr	r25
    1dac:	87 95       	ror	r24
    1dae:	97 f9       	bld	r25, 7
    1db0:	08 95       	ret

00001db2 <__unordsf2>:
    1db2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__fp_cmp>
    1db6:	88 0b       	sbc	r24, r24
    1db8:	99 0b       	sbc	r25, r25
    1dba:	08 95       	ret

00001dbc <__udivmodsi4>:
    1dbc:	a1 e2       	ldi	r26, 0x21	; 33
    1dbe:	1a 2e       	mov	r1, r26
    1dc0:	aa 1b       	sub	r26, r26
    1dc2:	bb 1b       	sub	r27, r27
    1dc4:	fd 01       	movw	r30, r26
    1dc6:	0d c0       	rjmp	.+26     	; 0x1de2 <__udivmodsi4_ep>

00001dc8 <__udivmodsi4_loop>:
    1dc8:	aa 1f       	adc	r26, r26
    1dca:	bb 1f       	adc	r27, r27
    1dcc:	ee 1f       	adc	r30, r30
    1dce:	ff 1f       	adc	r31, r31
    1dd0:	a2 17       	cp	r26, r18
    1dd2:	b3 07       	cpc	r27, r19
    1dd4:	e4 07       	cpc	r30, r20
    1dd6:	f5 07       	cpc	r31, r21
    1dd8:	20 f0       	brcs	.+8      	; 0x1de2 <__udivmodsi4_ep>
    1dda:	a2 1b       	sub	r26, r18
    1ddc:	b3 0b       	sbc	r27, r19
    1dde:	e4 0b       	sbc	r30, r20
    1de0:	f5 0b       	sbc	r31, r21

00001de2 <__udivmodsi4_ep>:
    1de2:	66 1f       	adc	r22, r22
    1de4:	77 1f       	adc	r23, r23
    1de6:	88 1f       	adc	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	1a 94       	dec	r1
    1dec:	69 f7       	brne	.-38     	; 0x1dc8 <__udivmodsi4_loop>
    1dee:	60 95       	com	r22
    1df0:	70 95       	com	r23
    1df2:	80 95       	com	r24
    1df4:	90 95       	com	r25
    1df6:	9b 01       	movw	r18, r22
    1df8:	ac 01       	movw	r20, r24
    1dfa:	bd 01       	movw	r22, r26
    1dfc:	cf 01       	movw	r24, r30
    1dfe:	08 95       	ret

00001e00 <__tablejump2__>:
    1e00:	ee 0f       	add	r30, r30
    1e02:	ff 1f       	adc	r31, r31
    1e04:	88 1f       	adc	r24, r24
    1e06:	8b bf       	out	0x3b, r24	; 59
    1e08:	07 90       	elpm	r0, Z+
    1e0a:	f6 91       	elpm	r31, Z
    1e0c:	e0 2d       	mov	r30, r0
    1e0e:	1b be       	out	0x3b, r1	; 59
    1e10:	19 94       	eijmp

00001e12 <vfprintf_P>:
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	ec 01       	movw	r28, r24
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	88 60       	ori	r24, 0x08	; 8
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	ce 01       	movw	r24, r28
    1e20:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <vfprintf>
    1e24:	2b 81       	ldd	r18, Y+3	; 0x03
    1e26:	27 7f       	andi	r18, 0xF7	; 247
    1e28:	2b 83       	std	Y+3, r18	; 0x03
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	08 95       	ret

00001e30 <vfprintf>:
    1e30:	2f 92       	push	r2
    1e32:	3f 92       	push	r3
    1e34:	4f 92       	push	r4
    1e36:	5f 92       	push	r5
    1e38:	6f 92       	push	r6
    1e3a:	7f 92       	push	r7
    1e3c:	8f 92       	push	r8
    1e3e:	9f 92       	push	r9
    1e40:	af 92       	push	r10
    1e42:	bf 92       	push	r11
    1e44:	cf 92       	push	r12
    1e46:	df 92       	push	r13
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	2b 97       	sbiw	r28, 0x0b	; 11
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	6c 01       	movw	r12, r24
    1e60:	7b 01       	movw	r14, r22
    1e62:	8a 01       	movw	r16, r20
    1e64:	fc 01       	movw	r30, r24
    1e66:	16 82       	std	Z+6, r1	; 0x06
    1e68:	17 82       	std	Z+7, r1	; 0x07
    1e6a:	83 81       	ldd	r24, Z+3	; 0x03
    1e6c:	81 ff       	sbrs	r24, 1
    1e6e:	cc c1       	rjmp	.+920    	; 0x2208 <vfprintf+0x3d8>
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	3c 01       	movw	r6, r24
    1e76:	f6 01       	movw	r30, r12
    1e78:	93 81       	ldd	r25, Z+3	; 0x03
    1e7a:	f7 01       	movw	r30, r14
    1e7c:	93 fd       	sbrc	r25, 3
    1e7e:	85 91       	lpm	r24, Z+
    1e80:	93 ff       	sbrs	r25, 3
    1e82:	81 91       	ld	r24, Z+
    1e84:	7f 01       	movw	r14, r30
    1e86:	88 23       	and	r24, r24
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <vfprintf+0x5c>
    1e8a:	ba c1       	rjmp	.+884    	; 0x2200 <vfprintf+0x3d0>
    1e8c:	85 32       	cpi	r24, 0x25	; 37
    1e8e:	39 f4       	brne	.+14     	; 0x1e9e <vfprintf+0x6e>
    1e90:	93 fd       	sbrc	r25, 3
    1e92:	85 91       	lpm	r24, Z+
    1e94:	93 ff       	sbrs	r25, 3
    1e96:	81 91       	ld	r24, Z+
    1e98:	7f 01       	movw	r14, r30
    1e9a:	85 32       	cpi	r24, 0x25	; 37
    1e9c:	29 f4       	brne	.+10     	; 0x1ea8 <vfprintf+0x78>
    1e9e:	b6 01       	movw	r22, r12
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 32 11 	call	0x2264	; 0x2264 <fputc>
    1ea6:	e7 cf       	rjmp	.-50     	; 0x1e76 <vfprintf+0x46>
    1ea8:	91 2c       	mov	r9, r1
    1eaa:	21 2c       	mov	r2, r1
    1eac:	31 2c       	mov	r3, r1
    1eae:	ff e1       	ldi	r31, 0x1F	; 31
    1eb0:	f3 15       	cp	r31, r3
    1eb2:	d8 f0       	brcs	.+54     	; 0x1eea <vfprintf+0xba>
    1eb4:	8b 32       	cpi	r24, 0x2B	; 43
    1eb6:	79 f0       	breq	.+30     	; 0x1ed6 <vfprintf+0xa6>
    1eb8:	38 f4       	brcc	.+14     	; 0x1ec8 <vfprintf+0x98>
    1eba:	80 32       	cpi	r24, 0x20	; 32
    1ebc:	79 f0       	breq	.+30     	; 0x1edc <vfprintf+0xac>
    1ebe:	83 32       	cpi	r24, 0x23	; 35
    1ec0:	a1 f4       	brne	.+40     	; 0x1eea <vfprintf+0xba>
    1ec2:	23 2d       	mov	r18, r3
    1ec4:	20 61       	ori	r18, 0x10	; 16
    1ec6:	1d c0       	rjmp	.+58     	; 0x1f02 <vfprintf+0xd2>
    1ec8:	8d 32       	cpi	r24, 0x2D	; 45
    1eca:	61 f0       	breq	.+24     	; 0x1ee4 <vfprintf+0xb4>
    1ecc:	80 33       	cpi	r24, 0x30	; 48
    1ece:	69 f4       	brne	.+26     	; 0x1eea <vfprintf+0xba>
    1ed0:	23 2d       	mov	r18, r3
    1ed2:	21 60       	ori	r18, 0x01	; 1
    1ed4:	16 c0       	rjmp	.+44     	; 0x1f02 <vfprintf+0xd2>
    1ed6:	83 2d       	mov	r24, r3
    1ed8:	82 60       	ori	r24, 0x02	; 2
    1eda:	38 2e       	mov	r3, r24
    1edc:	e3 2d       	mov	r30, r3
    1ede:	e4 60       	ori	r30, 0x04	; 4
    1ee0:	3e 2e       	mov	r3, r30
    1ee2:	2a c0       	rjmp	.+84     	; 0x1f38 <vfprintf+0x108>
    1ee4:	f3 2d       	mov	r31, r3
    1ee6:	f8 60       	ori	r31, 0x08	; 8
    1ee8:	1d c0       	rjmp	.+58     	; 0x1f24 <vfprintf+0xf4>
    1eea:	37 fc       	sbrc	r3, 7
    1eec:	2d c0       	rjmp	.+90     	; 0x1f48 <vfprintf+0x118>
    1eee:	20 ed       	ldi	r18, 0xD0	; 208
    1ef0:	28 0f       	add	r18, r24
    1ef2:	2a 30       	cpi	r18, 0x0A	; 10
    1ef4:	40 f0       	brcs	.+16     	; 0x1f06 <vfprintf+0xd6>
    1ef6:	8e 32       	cpi	r24, 0x2E	; 46
    1ef8:	b9 f4       	brne	.+46     	; 0x1f28 <vfprintf+0xf8>
    1efa:	36 fc       	sbrc	r3, 6
    1efc:	81 c1       	rjmp	.+770    	; 0x2200 <vfprintf+0x3d0>
    1efe:	23 2d       	mov	r18, r3
    1f00:	20 64       	ori	r18, 0x40	; 64
    1f02:	32 2e       	mov	r3, r18
    1f04:	19 c0       	rjmp	.+50     	; 0x1f38 <vfprintf+0x108>
    1f06:	36 fe       	sbrs	r3, 6
    1f08:	06 c0       	rjmp	.+12     	; 0x1f16 <vfprintf+0xe6>
    1f0a:	8a e0       	ldi	r24, 0x0A	; 10
    1f0c:	98 9e       	mul	r9, r24
    1f0e:	20 0d       	add	r18, r0
    1f10:	11 24       	eor	r1, r1
    1f12:	92 2e       	mov	r9, r18
    1f14:	11 c0       	rjmp	.+34     	; 0x1f38 <vfprintf+0x108>
    1f16:	ea e0       	ldi	r30, 0x0A	; 10
    1f18:	2e 9e       	mul	r2, r30
    1f1a:	20 0d       	add	r18, r0
    1f1c:	11 24       	eor	r1, r1
    1f1e:	22 2e       	mov	r2, r18
    1f20:	f3 2d       	mov	r31, r3
    1f22:	f0 62       	ori	r31, 0x20	; 32
    1f24:	3f 2e       	mov	r3, r31
    1f26:	08 c0       	rjmp	.+16     	; 0x1f38 <vfprintf+0x108>
    1f28:	8c 36       	cpi	r24, 0x6C	; 108
    1f2a:	21 f4       	brne	.+8      	; 0x1f34 <vfprintf+0x104>
    1f2c:	83 2d       	mov	r24, r3
    1f2e:	80 68       	ori	r24, 0x80	; 128
    1f30:	38 2e       	mov	r3, r24
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <vfprintf+0x108>
    1f34:	88 36       	cpi	r24, 0x68	; 104
    1f36:	41 f4       	brne	.+16     	; 0x1f48 <vfprintf+0x118>
    1f38:	f7 01       	movw	r30, r14
    1f3a:	93 fd       	sbrc	r25, 3
    1f3c:	85 91       	lpm	r24, Z+
    1f3e:	93 ff       	sbrs	r25, 3
    1f40:	81 91       	ld	r24, Z+
    1f42:	7f 01       	movw	r14, r30
    1f44:	81 11       	cpse	r24, r1
    1f46:	b3 cf       	rjmp	.-154    	; 0x1eae <vfprintf+0x7e>
    1f48:	98 2f       	mov	r25, r24
    1f4a:	9f 7d       	andi	r25, 0xDF	; 223
    1f4c:	95 54       	subi	r25, 0x45	; 69
    1f4e:	93 30       	cpi	r25, 0x03	; 3
    1f50:	28 f4       	brcc	.+10     	; 0x1f5c <vfprintf+0x12c>
    1f52:	0c 5f       	subi	r16, 0xFC	; 252
    1f54:	1f 4f       	sbci	r17, 0xFF	; 255
    1f56:	9f e3       	ldi	r25, 0x3F	; 63
    1f58:	99 83       	std	Y+1, r25	; 0x01
    1f5a:	0d c0       	rjmp	.+26     	; 0x1f76 <vfprintf+0x146>
    1f5c:	83 36       	cpi	r24, 0x63	; 99
    1f5e:	31 f0       	breq	.+12     	; 0x1f6c <vfprintf+0x13c>
    1f60:	83 37       	cpi	r24, 0x73	; 115
    1f62:	71 f0       	breq	.+28     	; 0x1f80 <vfprintf+0x150>
    1f64:	83 35       	cpi	r24, 0x53	; 83
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <vfprintf+0x13a>
    1f68:	59 c0       	rjmp	.+178    	; 0x201c <vfprintf+0x1ec>
    1f6a:	21 c0       	rjmp	.+66     	; 0x1fae <vfprintf+0x17e>
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	80 81       	ld	r24, Z
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	0e 5f       	subi	r16, 0xFE	; 254
    1f74:	1f 4f       	sbci	r17, 0xFF	; 255
    1f76:	88 24       	eor	r8, r8
    1f78:	83 94       	inc	r8
    1f7a:	91 2c       	mov	r9, r1
    1f7c:	53 01       	movw	r10, r6
    1f7e:	13 c0       	rjmp	.+38     	; 0x1fa6 <vfprintf+0x176>
    1f80:	28 01       	movw	r4, r16
    1f82:	f2 e0       	ldi	r31, 0x02	; 2
    1f84:	4f 0e       	add	r4, r31
    1f86:	51 1c       	adc	r5, r1
    1f88:	f8 01       	movw	r30, r16
    1f8a:	a0 80       	ld	r10, Z
    1f8c:	b1 80       	ldd	r11, Z+1	; 0x01
    1f8e:	36 fe       	sbrs	r3, 6
    1f90:	03 c0       	rjmp	.+6      	; 0x1f98 <vfprintf+0x168>
    1f92:	69 2d       	mov	r22, r9
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <vfprintf+0x16c>
    1f98:	6f ef       	ldi	r22, 0xFF	; 255
    1f9a:	7f ef       	ldi	r23, 0xFF	; 255
    1f9c:	c5 01       	movw	r24, r10
    1f9e:	0e 94 27 11 	call	0x224e	; 0x224e <strnlen>
    1fa2:	4c 01       	movw	r8, r24
    1fa4:	82 01       	movw	r16, r4
    1fa6:	f3 2d       	mov	r31, r3
    1fa8:	ff 77       	andi	r31, 0x7F	; 127
    1faa:	3f 2e       	mov	r3, r31
    1fac:	16 c0       	rjmp	.+44     	; 0x1fda <vfprintf+0x1aa>
    1fae:	28 01       	movw	r4, r16
    1fb0:	22 e0       	ldi	r18, 0x02	; 2
    1fb2:	42 0e       	add	r4, r18
    1fb4:	51 1c       	adc	r5, r1
    1fb6:	f8 01       	movw	r30, r16
    1fb8:	a0 80       	ld	r10, Z
    1fba:	b1 80       	ldd	r11, Z+1	; 0x01
    1fbc:	36 fe       	sbrs	r3, 6
    1fbe:	03 c0       	rjmp	.+6      	; 0x1fc6 <vfprintf+0x196>
    1fc0:	69 2d       	mov	r22, r9
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <vfprintf+0x19a>
    1fc6:	6f ef       	ldi	r22, 0xFF	; 255
    1fc8:	7f ef       	ldi	r23, 0xFF	; 255
    1fca:	c5 01       	movw	r24, r10
    1fcc:	0e 94 1c 11 	call	0x2238	; 0x2238 <strnlen_P>
    1fd0:	4c 01       	movw	r8, r24
    1fd2:	f3 2d       	mov	r31, r3
    1fd4:	f0 68       	ori	r31, 0x80	; 128
    1fd6:	3f 2e       	mov	r3, r31
    1fd8:	82 01       	movw	r16, r4
    1fda:	33 fc       	sbrc	r3, 3
    1fdc:	1b c0       	rjmp	.+54     	; 0x2014 <vfprintf+0x1e4>
    1fde:	82 2d       	mov	r24, r2
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	88 16       	cp	r8, r24
    1fe4:	99 06       	cpc	r9, r25
    1fe6:	b0 f4       	brcc	.+44     	; 0x2014 <vfprintf+0x1e4>
    1fe8:	b6 01       	movw	r22, r12
    1fea:	80 e2       	ldi	r24, 0x20	; 32
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 32 11 	call	0x2264	; 0x2264 <fputc>
    1ff2:	2a 94       	dec	r2
    1ff4:	f4 cf       	rjmp	.-24     	; 0x1fde <vfprintf+0x1ae>
    1ff6:	f5 01       	movw	r30, r10
    1ff8:	37 fc       	sbrc	r3, 7
    1ffa:	85 91       	lpm	r24, Z+
    1ffc:	37 fe       	sbrs	r3, 7
    1ffe:	81 91       	ld	r24, Z+
    2000:	5f 01       	movw	r10, r30
    2002:	b6 01       	movw	r22, r12
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 32 11 	call	0x2264	; 0x2264 <fputc>
    200a:	21 10       	cpse	r2, r1
    200c:	2a 94       	dec	r2
    200e:	21 e0       	ldi	r18, 0x01	; 1
    2010:	82 1a       	sub	r8, r18
    2012:	91 08       	sbc	r9, r1
    2014:	81 14       	cp	r8, r1
    2016:	91 04       	cpc	r9, r1
    2018:	71 f7       	brne	.-36     	; 0x1ff6 <vfprintf+0x1c6>
    201a:	e8 c0       	rjmp	.+464    	; 0x21ec <vfprintf+0x3bc>
    201c:	84 36       	cpi	r24, 0x64	; 100
    201e:	11 f0       	breq	.+4      	; 0x2024 <vfprintf+0x1f4>
    2020:	89 36       	cpi	r24, 0x69	; 105
    2022:	41 f5       	brne	.+80     	; 0x2074 <vfprintf+0x244>
    2024:	f8 01       	movw	r30, r16
    2026:	37 fe       	sbrs	r3, 7
    2028:	07 c0       	rjmp	.+14     	; 0x2038 <vfprintf+0x208>
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	0c 5f       	subi	r16, 0xFC	; 252
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
    2036:	08 c0       	rjmp	.+16     	; 0x2048 <vfprintf+0x218>
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	07 2e       	mov	r0, r23
    203e:	00 0c       	add	r0, r0
    2040:	88 0b       	sbc	r24, r24
    2042:	99 0b       	sbc	r25, r25
    2044:	0e 5f       	subi	r16, 0xFE	; 254
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	f3 2d       	mov	r31, r3
    204a:	ff 76       	andi	r31, 0x6F	; 111
    204c:	3f 2e       	mov	r3, r31
    204e:	97 ff       	sbrs	r25, 7
    2050:	09 c0       	rjmp	.+18     	; 0x2064 <vfprintf+0x234>
    2052:	90 95       	com	r25
    2054:	80 95       	com	r24
    2056:	70 95       	com	r23
    2058:	61 95       	neg	r22
    205a:	7f 4f       	sbci	r23, 0xFF	; 255
    205c:	8f 4f       	sbci	r24, 0xFF	; 255
    205e:	9f 4f       	sbci	r25, 0xFF	; 255
    2060:	f0 68       	ori	r31, 0x80	; 128
    2062:	3f 2e       	mov	r3, r31
    2064:	2a e0       	ldi	r18, 0x0A	; 10
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	a3 01       	movw	r20, r6
    206a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__ultoa_invert>
    206e:	88 2e       	mov	r8, r24
    2070:	86 18       	sub	r8, r6
    2072:	45 c0       	rjmp	.+138    	; 0x20fe <vfprintf+0x2ce>
    2074:	85 37       	cpi	r24, 0x75	; 117
    2076:	31 f4       	brne	.+12     	; 0x2084 <vfprintf+0x254>
    2078:	23 2d       	mov	r18, r3
    207a:	2f 7e       	andi	r18, 0xEF	; 239
    207c:	b2 2e       	mov	r11, r18
    207e:	2a e0       	ldi	r18, 0x0A	; 10
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	25 c0       	rjmp	.+74     	; 0x20ce <vfprintf+0x29e>
    2084:	93 2d       	mov	r25, r3
    2086:	99 7f       	andi	r25, 0xF9	; 249
    2088:	b9 2e       	mov	r11, r25
    208a:	8f 36       	cpi	r24, 0x6F	; 111
    208c:	c1 f0       	breq	.+48     	; 0x20be <vfprintf+0x28e>
    208e:	18 f4       	brcc	.+6      	; 0x2096 <vfprintf+0x266>
    2090:	88 35       	cpi	r24, 0x58	; 88
    2092:	79 f0       	breq	.+30     	; 0x20b2 <vfprintf+0x282>
    2094:	b5 c0       	rjmp	.+362    	; 0x2200 <vfprintf+0x3d0>
    2096:	80 37       	cpi	r24, 0x70	; 112
    2098:	19 f0       	breq	.+6      	; 0x20a0 <vfprintf+0x270>
    209a:	88 37       	cpi	r24, 0x78	; 120
    209c:	21 f0       	breq	.+8      	; 0x20a6 <vfprintf+0x276>
    209e:	b0 c0       	rjmp	.+352    	; 0x2200 <vfprintf+0x3d0>
    20a0:	e9 2f       	mov	r30, r25
    20a2:	e0 61       	ori	r30, 0x10	; 16
    20a4:	be 2e       	mov	r11, r30
    20a6:	b4 fe       	sbrs	r11, 4
    20a8:	0d c0       	rjmp	.+26     	; 0x20c4 <vfprintf+0x294>
    20aa:	fb 2d       	mov	r31, r11
    20ac:	f4 60       	ori	r31, 0x04	; 4
    20ae:	bf 2e       	mov	r11, r31
    20b0:	09 c0       	rjmp	.+18     	; 0x20c4 <vfprintf+0x294>
    20b2:	34 fe       	sbrs	r3, 4
    20b4:	0a c0       	rjmp	.+20     	; 0x20ca <vfprintf+0x29a>
    20b6:	29 2f       	mov	r18, r25
    20b8:	26 60       	ori	r18, 0x06	; 6
    20ba:	b2 2e       	mov	r11, r18
    20bc:	06 c0       	rjmp	.+12     	; 0x20ca <vfprintf+0x29a>
    20be:	28 e0       	ldi	r18, 0x08	; 8
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	05 c0       	rjmp	.+10     	; 0x20ce <vfprintf+0x29e>
    20c4:	20 e1       	ldi	r18, 0x10	; 16
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <vfprintf+0x29e>
    20ca:	20 e1       	ldi	r18, 0x10	; 16
    20cc:	32 e0       	ldi	r19, 0x02	; 2
    20ce:	f8 01       	movw	r30, r16
    20d0:	b7 fe       	sbrs	r11, 7
    20d2:	07 c0       	rjmp	.+14     	; 0x20e2 <vfprintf+0x2b2>
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	0c 5f       	subi	r16, 0xFC	; 252
    20de:	1f 4f       	sbci	r17, 0xFF	; 255
    20e0:	06 c0       	rjmp	.+12     	; 0x20ee <vfprintf+0x2be>
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0e 5f       	subi	r16, 0xFE	; 254
    20ec:	1f 4f       	sbci	r17, 0xFF	; 255
    20ee:	a3 01       	movw	r20, r6
    20f0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__ultoa_invert>
    20f4:	88 2e       	mov	r8, r24
    20f6:	86 18       	sub	r8, r6
    20f8:	fb 2d       	mov	r31, r11
    20fa:	ff 77       	andi	r31, 0x7F	; 127
    20fc:	3f 2e       	mov	r3, r31
    20fe:	36 fe       	sbrs	r3, 6
    2100:	0d c0       	rjmp	.+26     	; 0x211c <vfprintf+0x2ec>
    2102:	23 2d       	mov	r18, r3
    2104:	2e 7f       	andi	r18, 0xFE	; 254
    2106:	a2 2e       	mov	r10, r18
    2108:	89 14       	cp	r8, r9
    210a:	58 f4       	brcc	.+22     	; 0x2122 <vfprintf+0x2f2>
    210c:	34 fe       	sbrs	r3, 4
    210e:	0b c0       	rjmp	.+22     	; 0x2126 <vfprintf+0x2f6>
    2110:	32 fc       	sbrc	r3, 2
    2112:	09 c0       	rjmp	.+18     	; 0x2126 <vfprintf+0x2f6>
    2114:	83 2d       	mov	r24, r3
    2116:	8e 7e       	andi	r24, 0xEE	; 238
    2118:	a8 2e       	mov	r10, r24
    211a:	05 c0       	rjmp	.+10     	; 0x2126 <vfprintf+0x2f6>
    211c:	b8 2c       	mov	r11, r8
    211e:	a3 2c       	mov	r10, r3
    2120:	03 c0       	rjmp	.+6      	; 0x2128 <vfprintf+0x2f8>
    2122:	b8 2c       	mov	r11, r8
    2124:	01 c0       	rjmp	.+2      	; 0x2128 <vfprintf+0x2f8>
    2126:	b9 2c       	mov	r11, r9
    2128:	a4 fe       	sbrs	r10, 4
    212a:	0f c0       	rjmp	.+30     	; 0x214a <vfprintf+0x31a>
    212c:	fe 01       	movw	r30, r28
    212e:	e8 0d       	add	r30, r8
    2130:	f1 1d       	adc	r31, r1
    2132:	80 81       	ld	r24, Z
    2134:	80 33       	cpi	r24, 0x30	; 48
    2136:	21 f4       	brne	.+8      	; 0x2140 <vfprintf+0x310>
    2138:	9a 2d       	mov	r25, r10
    213a:	99 7e       	andi	r25, 0xE9	; 233
    213c:	a9 2e       	mov	r10, r25
    213e:	09 c0       	rjmp	.+18     	; 0x2152 <vfprintf+0x322>
    2140:	a2 fe       	sbrs	r10, 2
    2142:	06 c0       	rjmp	.+12     	; 0x2150 <vfprintf+0x320>
    2144:	b3 94       	inc	r11
    2146:	b3 94       	inc	r11
    2148:	04 c0       	rjmp	.+8      	; 0x2152 <vfprintf+0x322>
    214a:	8a 2d       	mov	r24, r10
    214c:	86 78       	andi	r24, 0x86	; 134
    214e:	09 f0       	breq	.+2      	; 0x2152 <vfprintf+0x322>
    2150:	b3 94       	inc	r11
    2152:	a3 fc       	sbrc	r10, 3
    2154:	11 c0       	rjmp	.+34     	; 0x2178 <vfprintf+0x348>
    2156:	a0 fe       	sbrs	r10, 0
    2158:	06 c0       	rjmp	.+12     	; 0x2166 <vfprintf+0x336>
    215a:	b2 14       	cp	r11, r2
    215c:	88 f4       	brcc	.+34     	; 0x2180 <vfprintf+0x350>
    215e:	28 0c       	add	r2, r8
    2160:	92 2c       	mov	r9, r2
    2162:	9b 18       	sub	r9, r11
    2164:	0e c0       	rjmp	.+28     	; 0x2182 <vfprintf+0x352>
    2166:	b2 14       	cp	r11, r2
    2168:	60 f4       	brcc	.+24     	; 0x2182 <vfprintf+0x352>
    216a:	b6 01       	movw	r22, r12
    216c:	80 e2       	ldi	r24, 0x20	; 32
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0e 94 32 11 	call	0x2264	; 0x2264 <fputc>
    2174:	b3 94       	inc	r11
    2176:	f7 cf       	rjmp	.-18     	; 0x2166 <vfprintf+0x336>
    2178:	b2 14       	cp	r11, r2
    217a:	18 f4       	brcc	.+6      	; 0x2182 <vfprintf+0x352>
    217c:	2b 18       	sub	r2, r11
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <vfprintf+0x354>
    2180:	98 2c       	mov	r9, r8
    2182:	21 2c       	mov	r2, r1
    2184:	a4 fe       	sbrs	r10, 4
    2186:	10 c0       	rjmp	.+32     	; 0x21a8 <vfprintf+0x378>
    2188:	b6 01       	movw	r22, r12
    218a:	80 e3       	ldi	r24, 0x30	; 48
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0e 94 32 11 	call	0x2264	; 0x2264 <fputc>
    2192:	a2 fe       	sbrs	r10, 2
    2194:	17 c0       	rjmp	.+46     	; 0x21c4 <vfprintf+0x394>
    2196:	a1 fc       	sbrc	r10, 1
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <vfprintf+0x370>
    219a:	88 e7       	ldi	r24, 0x78	; 120
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <vfprintf+0x374>
    21a0:	88 e5       	ldi	r24, 0x58	; 88
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	b6 01       	movw	r22, r12
    21a6:	0c c0       	rjmp	.+24     	; 0x21c0 <vfprintf+0x390>
    21a8:	8a 2d       	mov	r24, r10
    21aa:	86 78       	andi	r24, 0x86	; 134
    21ac:	59 f0       	breq	.+22     	; 0x21c4 <vfprintf+0x394>
    21ae:	a1 fe       	sbrs	r10, 1
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <vfprintf+0x386>
    21b2:	8b e2       	ldi	r24, 0x2B	; 43
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <vfprintf+0x388>
    21b6:	80 e2       	ldi	r24, 0x20	; 32
    21b8:	a7 fc       	sbrc	r10, 7
    21ba:	8d e2       	ldi	r24, 0x2D	; 45
    21bc:	b6 01       	movw	r22, r12
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	0e 94 32 11 	call	0x2264	; 0x2264 <fputc>
    21c4:	89 14       	cp	r8, r9
    21c6:	38 f4       	brcc	.+14     	; 0x21d6 <vfprintf+0x3a6>
    21c8:	b6 01       	movw	r22, r12
    21ca:	80 e3       	ldi	r24, 0x30	; 48
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 32 11 	call	0x2264	; 0x2264 <fputc>
    21d2:	9a 94       	dec	r9
    21d4:	f7 cf       	rjmp	.-18     	; 0x21c4 <vfprintf+0x394>
    21d6:	8a 94       	dec	r8
    21d8:	f3 01       	movw	r30, r6
    21da:	e8 0d       	add	r30, r8
    21dc:	f1 1d       	adc	r31, r1
    21de:	80 81       	ld	r24, Z
    21e0:	b6 01       	movw	r22, r12
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 32 11 	call	0x2264	; 0x2264 <fputc>
    21e8:	81 10       	cpse	r8, r1
    21ea:	f5 cf       	rjmp	.-22     	; 0x21d6 <vfprintf+0x3a6>
    21ec:	22 20       	and	r2, r2
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <vfprintf+0x3c2>
    21f0:	42 ce       	rjmp	.-892    	; 0x1e76 <vfprintf+0x46>
    21f2:	b6 01       	movw	r22, r12
    21f4:	80 e2       	ldi	r24, 0x20	; 32
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 94 32 11 	call	0x2264	; 0x2264 <fputc>
    21fc:	2a 94       	dec	r2
    21fe:	f6 cf       	rjmp	.-20     	; 0x21ec <vfprintf+0x3bc>
    2200:	f6 01       	movw	r30, r12
    2202:	86 81       	ldd	r24, Z+6	; 0x06
    2204:	97 81       	ldd	r25, Z+7	; 0x07
    2206:	02 c0       	rjmp	.+4      	; 0x220c <vfprintf+0x3dc>
    2208:	8f ef       	ldi	r24, 0xFF	; 255
    220a:	9f ef       	ldi	r25, 0xFF	; 255
    220c:	2b 96       	adiw	r28, 0x0b	; 11
    220e:	cd bf       	out	0x3d, r28	; 61
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	df 90       	pop	r13
    2220:	cf 90       	pop	r12
    2222:	bf 90       	pop	r11
    2224:	af 90       	pop	r10
    2226:	9f 90       	pop	r9
    2228:	8f 90       	pop	r8
    222a:	7f 90       	pop	r7
    222c:	6f 90       	pop	r6
    222e:	5f 90       	pop	r5
    2230:	4f 90       	pop	r4
    2232:	3f 90       	pop	r3
    2234:	2f 90       	pop	r2
    2236:	08 95       	ret

00002238 <strnlen_P>:
    2238:	fc 01       	movw	r30, r24
    223a:	05 90       	lpm	r0, Z+
    223c:	61 50       	subi	r22, 0x01	; 1
    223e:	70 40       	sbci	r23, 0x00	; 0
    2240:	01 10       	cpse	r0, r1
    2242:	d8 f7       	brcc	.-10     	; 0x223a <strnlen_P+0x2>
    2244:	80 95       	com	r24
    2246:	90 95       	com	r25
    2248:	8e 0f       	add	r24, r30
    224a:	9f 1f       	adc	r25, r31
    224c:	08 95       	ret

0000224e <strnlen>:
    224e:	fc 01       	movw	r30, r24
    2250:	61 50       	subi	r22, 0x01	; 1
    2252:	70 40       	sbci	r23, 0x00	; 0
    2254:	01 90       	ld	r0, Z+
    2256:	01 10       	cpse	r0, r1
    2258:	d8 f7       	brcc	.-10     	; 0x2250 <strnlen+0x2>
    225a:	80 95       	com	r24
    225c:	90 95       	com	r25
    225e:	8e 0f       	add	r24, r30
    2260:	9f 1f       	adc	r25, r31
    2262:	08 95       	ret

00002264 <fputc>:
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	fb 01       	movw	r30, r22
    226e:	23 81       	ldd	r18, Z+3	; 0x03
    2270:	21 fd       	sbrc	r18, 1
    2272:	03 c0       	rjmp	.+6      	; 0x227a <fputc+0x16>
    2274:	8f ef       	ldi	r24, 0xFF	; 255
    2276:	9f ef       	ldi	r25, 0xFF	; 255
    2278:	2c c0       	rjmp	.+88     	; 0x22d2 <fputc+0x6e>
    227a:	22 ff       	sbrs	r18, 2
    227c:	16 c0       	rjmp	.+44     	; 0x22aa <fputc+0x46>
    227e:	46 81       	ldd	r20, Z+6	; 0x06
    2280:	57 81       	ldd	r21, Z+7	; 0x07
    2282:	24 81       	ldd	r18, Z+4	; 0x04
    2284:	35 81       	ldd	r19, Z+5	; 0x05
    2286:	42 17       	cp	r20, r18
    2288:	53 07       	cpc	r21, r19
    228a:	44 f4       	brge	.+16     	; 0x229c <fputc+0x38>
    228c:	a0 81       	ld	r26, Z
    228e:	b1 81       	ldd	r27, Z+1	; 0x01
    2290:	9d 01       	movw	r18, r26
    2292:	2f 5f       	subi	r18, 0xFF	; 255
    2294:	3f 4f       	sbci	r19, 0xFF	; 255
    2296:	20 83       	st	Z, r18
    2298:	31 83       	std	Z+1, r19	; 0x01
    229a:	8c 93       	st	X, r24
    229c:	26 81       	ldd	r18, Z+6	; 0x06
    229e:	37 81       	ldd	r19, Z+7	; 0x07
    22a0:	2f 5f       	subi	r18, 0xFF	; 255
    22a2:	3f 4f       	sbci	r19, 0xFF	; 255
    22a4:	26 83       	std	Z+6, r18	; 0x06
    22a6:	37 83       	std	Z+7, r19	; 0x07
    22a8:	14 c0       	rjmp	.+40     	; 0x22d2 <fputc+0x6e>
    22aa:	8b 01       	movw	r16, r22
    22ac:	ec 01       	movw	r28, r24
    22ae:	fb 01       	movw	r30, r22
    22b0:	00 84       	ldd	r0, Z+8	; 0x08
    22b2:	f1 85       	ldd	r31, Z+9	; 0x09
    22b4:	e0 2d       	mov	r30, r0
    22b6:	19 95       	eicall
    22b8:	89 2b       	or	r24, r25
    22ba:	e1 f6       	brne	.-72     	; 0x2274 <fputc+0x10>
    22bc:	d8 01       	movw	r26, r16
    22be:	16 96       	adiw	r26, 0x06	; 6
    22c0:	8d 91       	ld	r24, X+
    22c2:	9c 91       	ld	r25, X
    22c4:	17 97       	sbiw	r26, 0x07	; 7
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	16 96       	adiw	r26, 0x06	; 6
    22ca:	8d 93       	st	X+, r24
    22cc:	9c 93       	st	X, r25
    22ce:	17 97       	sbiw	r26, 0x07	; 7
    22d0:	ce 01       	movw	r24, r28
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <__ultoa_invert>:
    22dc:	fa 01       	movw	r30, r20
    22de:	aa 27       	eor	r26, r26
    22e0:	28 30       	cpi	r18, 0x08	; 8
    22e2:	51 f1       	breq	.+84     	; 0x2338 <__ultoa_invert+0x5c>
    22e4:	20 31       	cpi	r18, 0x10	; 16
    22e6:	81 f1       	breq	.+96     	; 0x2348 <__ultoa_invert+0x6c>
    22e8:	e8 94       	clt
    22ea:	6f 93       	push	r22
    22ec:	6e 7f       	andi	r22, 0xFE	; 254
    22ee:	6e 5f       	subi	r22, 0xFE	; 254
    22f0:	7f 4f       	sbci	r23, 0xFF	; 255
    22f2:	8f 4f       	sbci	r24, 0xFF	; 255
    22f4:	9f 4f       	sbci	r25, 0xFF	; 255
    22f6:	af 4f       	sbci	r26, 0xFF	; 255
    22f8:	b1 e0       	ldi	r27, 0x01	; 1
    22fa:	3e d0       	rcall	.+124    	; 0x2378 <__ultoa_invert+0x9c>
    22fc:	b4 e0       	ldi	r27, 0x04	; 4
    22fe:	3c d0       	rcall	.+120    	; 0x2378 <__ultoa_invert+0x9c>
    2300:	67 0f       	add	r22, r23
    2302:	78 1f       	adc	r23, r24
    2304:	89 1f       	adc	r24, r25
    2306:	9a 1f       	adc	r25, r26
    2308:	a1 1d       	adc	r26, r1
    230a:	68 0f       	add	r22, r24
    230c:	79 1f       	adc	r23, r25
    230e:	8a 1f       	adc	r24, r26
    2310:	91 1d       	adc	r25, r1
    2312:	a1 1d       	adc	r26, r1
    2314:	6a 0f       	add	r22, r26
    2316:	71 1d       	adc	r23, r1
    2318:	81 1d       	adc	r24, r1
    231a:	91 1d       	adc	r25, r1
    231c:	a1 1d       	adc	r26, r1
    231e:	20 d0       	rcall	.+64     	; 0x2360 <__ultoa_invert+0x84>
    2320:	09 f4       	brne	.+2      	; 0x2324 <__ultoa_invert+0x48>
    2322:	68 94       	set
    2324:	3f 91       	pop	r19
    2326:	2a e0       	ldi	r18, 0x0A	; 10
    2328:	26 9f       	mul	r18, r22
    232a:	11 24       	eor	r1, r1
    232c:	30 19       	sub	r19, r0
    232e:	30 5d       	subi	r19, 0xD0	; 208
    2330:	31 93       	st	Z+, r19
    2332:	de f6       	brtc	.-74     	; 0x22ea <__ultoa_invert+0xe>
    2334:	cf 01       	movw	r24, r30
    2336:	08 95       	ret
    2338:	46 2f       	mov	r20, r22
    233a:	47 70       	andi	r20, 0x07	; 7
    233c:	40 5d       	subi	r20, 0xD0	; 208
    233e:	41 93       	st	Z+, r20
    2340:	b3 e0       	ldi	r27, 0x03	; 3
    2342:	0f d0       	rcall	.+30     	; 0x2362 <__ultoa_invert+0x86>
    2344:	c9 f7       	brne	.-14     	; 0x2338 <__ultoa_invert+0x5c>
    2346:	f6 cf       	rjmp	.-20     	; 0x2334 <__ultoa_invert+0x58>
    2348:	46 2f       	mov	r20, r22
    234a:	4f 70       	andi	r20, 0x0F	; 15
    234c:	40 5d       	subi	r20, 0xD0	; 208
    234e:	4a 33       	cpi	r20, 0x3A	; 58
    2350:	18 f0       	brcs	.+6      	; 0x2358 <__ultoa_invert+0x7c>
    2352:	49 5d       	subi	r20, 0xD9	; 217
    2354:	31 fd       	sbrc	r19, 1
    2356:	40 52       	subi	r20, 0x20	; 32
    2358:	41 93       	st	Z+, r20
    235a:	02 d0       	rcall	.+4      	; 0x2360 <__ultoa_invert+0x84>
    235c:	a9 f7       	brne	.-22     	; 0x2348 <__ultoa_invert+0x6c>
    235e:	ea cf       	rjmp	.-44     	; 0x2334 <__ultoa_invert+0x58>
    2360:	b4 e0       	ldi	r27, 0x04	; 4
    2362:	a6 95       	lsr	r26
    2364:	97 95       	ror	r25
    2366:	87 95       	ror	r24
    2368:	77 95       	ror	r23
    236a:	67 95       	ror	r22
    236c:	ba 95       	dec	r27
    236e:	c9 f7       	brne	.-14     	; 0x2362 <__ultoa_invert+0x86>
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	61 05       	cpc	r22, r1
    2374:	71 05       	cpc	r23, r1
    2376:	08 95       	ret
    2378:	9b 01       	movw	r18, r22
    237a:	ac 01       	movw	r20, r24
    237c:	0a 2e       	mov	r0, r26
    237e:	06 94       	lsr	r0
    2380:	57 95       	ror	r21
    2382:	47 95       	ror	r20
    2384:	37 95       	ror	r19
    2386:	27 95       	ror	r18
    2388:	ba 95       	dec	r27
    238a:	c9 f7       	brne	.-14     	; 0x237e <__ultoa_invert+0xa2>
    238c:	62 0f       	add	r22, r18
    238e:	73 1f       	adc	r23, r19
    2390:	84 1f       	adc	r24, r20
    2392:	95 1f       	adc	r25, r21
    2394:	a0 1d       	adc	r26, r0
    2396:	08 95       	ret

00002398 <_exit>:
    2398:	f8 94       	cli

0000239a <__stop_program>:
    239a:	ff cf       	rjmp	.-2      	; 0x239a <__stop_program>
