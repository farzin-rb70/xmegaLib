
V4LibTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000539a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000095a  00802000  0000539a  0000542e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b27  0080295a  0080295a  00005d88  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005d88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005de4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002f40  00000000  00000000  00005e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0005eeaa  00000000  00000000  00008d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000069bb  00000000  00000000  00067c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000124b8  00000000  00000000  0006e5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00011978  00000000  00000000  00080a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fdf8  00000000  00000000  000923fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0006f750  00000000  00000000  000a21f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002f80  00000000  00000000  00111944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__ctors_end>
       4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
       8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
       c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      10:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      14:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      18:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      1c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      20:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      24:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      28:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      2c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      30:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      34:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      38:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__vector_14>
      3c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      40:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      44:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      48:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      4c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      50:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__vector_20>
      54:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      58:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      5c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      60:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      64:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      68:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      6c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      70:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      74:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      78:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      7c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      80:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      84:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      88:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      8c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      90:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      94:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      98:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      9c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      a0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      a4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      a8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      ac:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      b0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      b4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      b8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      bc:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      c0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      c4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      c8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      cc:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      d0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      d4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      d8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      dc:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      e0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      e4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      e8:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__vector_58>
      ec:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      f0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      f4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      f8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
      fc:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     100:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     104:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     108:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     10c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     110:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     114:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     118:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     11c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     120:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     124:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     128:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     12c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     130:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     134:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     138:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     13c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     140:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     144:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     148:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     14c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     150:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     154:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     158:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     15c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     160:	0c 94 47 11 	jmp	0x228e	; 0x228e <__vector_88>
     164:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     168:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     16c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     170:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     174:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     178:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     17c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     180:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     184:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     188:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     18c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     190:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     194:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     198:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     19c:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1a0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1a4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1a8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1ac:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1b0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1b4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1b8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1bc:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1c0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1c4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1c8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1cc:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1d0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1d4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1d8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1dc:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1e0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1e4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1e8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1ec:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1f0:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1f4:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>
     1f8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 ce 21 	jmp	0x439c	; 0x439c <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv>
     200:	0c 94 5d 22 	jmp	0x44ba	; 0x44ba <_ZN7IOClass6toggleEv>
     204:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <_GLOBAL__sub_I_pinsList>
     208:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <_ZN7IOClass2onEv>
     20c:	0c 94 af 1a 	jmp	0x355e	; 0x355e <u8g2_ll_hvline_vertical_top_lsb>
     210:	0c 94 31 22 	jmp	0x4462	; 0x4462 <_ZN7U8G2Lcd5writeEPKhj>
     214:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <_ZN12MatrixKeypad6notifyEv>
     218:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <_ZN5logic12onKeyReleaseEh>
     21c:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <u8g2_update_dimension_r0>
     220:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <_ZN5Print5writeEPKhj>
     224:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <_ZN5Print17availableForWriteEv>
     228:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <u8x8_cad_001>
     22c:	0c 94 80 22 	jmp	0x4500	; 0x4500 <_ZN7IOClass3offEv>
     230:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <u8x8_ascii_next>
     234:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <_ZN7U8G2Lcd5writeEh>
     238:	0c 94 d1 22 	jmp	0x45a2	; 0x45a2 <_ZN5logic12onKeyPressedEh>
     23c:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <u8x8_dummy_cb>
     240:	0c 94 72 24 	jmp	0x48e4	; 0x48e4 <_GLOBAL__sub_I_pKeypad>
     244:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <_ZN5Print5flushEv>
     248:	0c 94 8d 22 	jmp	0x451a	; 0x451a <_ZN7IOClass9readstateEv>
     24c:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <u8g2_font_calc_vref_font>
     250:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <u8g2_draw_l90_r0>
     254:	0c 94 93 10 	jmp	0x2126	; 0x2126 <_ZN14HardwareSerial5writeEh>
     258:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <u8x8_d_st7565_ea_dogm132>
     25c:	0c 94 30 12 	jmp	0x2460	; 0x2460 <_ZN17SingleInputKeypad10registerObEP11KeyObserver>
     260:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <_ZN14HardwareSerial4peekEv>
     264:	0c 94 97 22 	jmp	0x452e	; 0x452e <_ZN5logic9onKeyHoldEh>
     268:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <u8x8_utf8_next>
     26c:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <_ZN12MatrixKeypad10registerObEP11KeyObserver>
     270:	0c 94 34 12 	jmp	0x2468	; 0x2468 <_ZN17SingleInputKeypad4scanEv>
     274:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <_ZN12MatrixKeypad4scanEv>
     278:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <_ZL14printf_putcharcP6__file>
     27c:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <_GLOBAL__sub_I_rows>
     280:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <u8x8_byte_4wire_sw_spi>
     284:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <u8g2_update_page_win_r0>
     288:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <_GLOBAL__sub_I_Serial3>
     28c:	0c 94 9f 10 	jmp	0x213e	; 0x213e <_ZN14HardwareSerial9availableEv>
     290:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <_ZN17SingleInputKeypad6notifyEv>
     294:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <_ZN14HardwareSerial4readEv>

00000298 <__trampolines_end>:
     298:	cd 00       	.word	0x00cd	; ????
     29a:	03 02       	muls	r16, r19
     29c:	05 05       	cpc	r16, r5
     29e:	06 04       	cpc	r0, r6
     2a0:	05 20       	and	r0, r5
     2a2:	17 ee       	ldi	r17, 0xE7	; 231
     2a4:	fb 08       	sbc	r15, r11
     2a6:	fe 09       	sbc	r31, r14
     2a8:	ff 01       	movw	r30, r30
     2aa:	7e 02       	muls	r23, r30
     2ac:	f9 05       	cpc	r31, r9
     2ae:	18 20       	and	r1, r8
     2b0:	06 00       	.word	0x0006	; ????
     2b2:	80 38       	cpi	r24, 0x80	; 128
     2b4:	01 21       	and	r16, r1
     2b6:	07 01       	movw	r0, r14
     2b8:	85 38       	cpi	r24, 0x85	; 133
     2ba:	71 09       	sbc	r23, r1
     2bc:	22 08       	sbc	r2, r2
     2be:	63 84       	ldd	r6, Z+11	; 0x0b
     2c0:	4d 91       	ld	r20, X+
     2c2:	58 02       	muls	r21, r24
     2c4:	23 0f       	add	r18, r19
     2c6:	e5 84       	ldd	r14, Z+13	; 0x0d
     2c8:	78 53       	subi	r23, 0x38	; 56
     2ca:	4a 92       	st	-Y, r4
     2cc:	41 a9       	ldd	r20, Z+49	; 0x31
     2ce:	0c 4a       	sbci	r16, 0xAC	; 172
     2d0:	29 49       	sbci	r18, 0x99	; 153
     2d2:	00 24       	eor	r0, r0
     2d4:	1f 78       	andi	r17, 0x8F	; 143
     2d6:	3a 77       	andi	r19, 0x7A	; 122
     2d8:	91 f3       	breq	.-28     	; 0x2be <__trampolines_end+0x26>
     2da:	ff ff       	.word	0xffff	; ????
     2dc:	ff af       	std	Y+63, r31	; 0x3f
     2de:	39 cb       	rjmp	.-2446   	; 0xfffff952 <__eeprom_end+0xff7ef952>
     2e0:	4e 4e       	sbci	r20, 0xEE	; 238
     2e2:	ea d4       	rcall	.+2516   	; 0xcb8 <__LOCK_REGION_LENGTH__+0x8b8>
     2e4:	a4 4e       	sbci	r26, 0xE4	; 228
     2e6:	4d 72       	andi	r20, 0x2D	; 45
     2e8:	96 9d       	mul	r25, r6
     2ea:	a5 4e       	sbci	r26, 0xE5	; 229
     2ec:	4d ea       	ldi	r20, 0xAD	; 173
     2ee:	e4 9d       	mul	r30, r4
     2f0:	25 02       	muls	r18, r21
     2f2:	25 0d       	add	r18, r5
     2f4:	e7 84       	ldd	r14, Z+15	; 0x0f
     2f6:	99 13       	cpse	r25, r25
     2f8:	2a 51       	subi	r18, 0x1A	; 26
     2fa:	6b a9       	ldd	r22, Y+51	; 0x33
     2fc:	45 4c       	sbci	r20, 0xC5	; 197
     2fe:	00 26       	eor	r0, r16
     300:	0f 06       	cpc	r0, r31
     302:	85 89       	ldd	r24, Z+21	; 0x15
     304:	a5 45       	sbci	r26, 0x55	; 85
     306:	6d 5a       	subi	r22, 0xAD	; 173
     308:	92 68       	ori	r25, 0x82	; 130
     30a:	49 16       	cp	r4, r25
     30c:	2d 01       	movw	r4, r26
     30e:	27 06       	cpc	r2, r23
     310:	61 84       	ldd	r6, Z+9	; 0x09
     312:	3d 31       	cpi	r19, 0x1D	; 29
     314:	28 0c       	add	r2, r8
     316:	43 85       	ldd	r20, Z+11	; 0x0b
     318:	57 95       	ror	r21
     31a:	24 4a       	sbci	r18, 0xA4	; 164
     31c:	d4 24       	eor	r13, r4
     31e:	65 01       	movw	r12, r10
     320:	29 0b       	sbc	r18, r25
     322:	43 85       	ldd	r20, Z+11	; 0x0b
     324:	57 91       	elpm	r21, Z+
     326:	45 52       	subi	r20, 0x25	; 37
     328:	17 a5       	ldd	r17, Z+47	; 0x2f
     32a:	04 2a       	or	r0, r20
     32c:	0b 85       	ldd	r16, Y+11	; 0x0b
     32e:	84 7a       	andi	r24, 0xA4	; 164
     330:	15 0d       	add	r17, r5
     332:	52 96       	adiw	r26, 0x12	; 18
     334:	24 00       	.word	0x0024	; ????
     336:	2b 0b       	sbc	r18, r27
     338:	a5 84       	ldd	r10, Z+13	; 0x0d
     33a:	79 15       	cp	r23, r9
     33c:	46 83       	std	Z+6, r20	; 0x06
     33e:	14 46       	sbci	r17, 0x64	; 100
     340:	00 2c       	mov	r0, r0
     342:	08 62       	ori	r16, 0x28	; 40
     344:	80 36       	cpi	r24, 0x60	; 96
     346:	93 28       	or	r9, r3
     348:	00 2d       	mov	r16, r0
     34a:	06 23       	and	r16, r22
     34c:	80 3b       	cpi	r24, 0xB0	; 176
     34e:	31 2e       	mov	r3, r17
     350:	06 21       	and	r16, r6
     352:	84 3a       	cpi	r24, 0xA4	; 164
     354:	11 2f       	mov	r17, r17
     356:	0c 04       	cpc	r0, r12
     358:	81 58       	subi	r24, 0x81	; 129
     35a:	57 ca       	rjmp	.-2898   	; 0xfffff80a <__eeprom_end+0xff7ef80a>
     35c:	a2 2c       	mov	r10, r2
     35e:	ca 32       	cpi	r28, 0x2A	; 42
     360:	00 30       	cpi	r16, 0x00	; 0
     362:	0b 05       	cpc	r16, r11
     364:	85 78       	andi	r24, 0x85	; 133
     366:	b3 64       	ori	r27, 0x43	; 67
     368:	be 25       	eor	r27, r14
     36a:	0b 00       	.word	0x000b	; ????
     36c:	31 08       	sbc	r3, r1
     36e:	03 85       	ldd	r16, Z+11	; 0x0b
     370:	68 35       	cpi	r22, 0x58	; 88
     372:	44 7d       	andi	r20, 0xD4	; 212
     374:	32 0b       	sbc	r19, r18
     376:	05 85       	ldd	r16, Z+13	; 0x0d
     378:	78 b3       	in	r23, 0x18	; 24
     37a:	64 61       	ori	r22, 0x14	; 20
     37c:	ad 6d       	ori	r26, 0xDD	; 221
     37e:	10 33       	cpi	r17, 0x30	; 48
     380:	0d 05       	cpc	r16, r13
     382:	85 78       	andi	r24, 0x85	; 133
     384:	b3 64       	ori	r27, 0x43	; 67
     386:	61 a4       	ldd	r6, Z+41	; 0x29
     388:	86 5a       	subi	r24, 0xA6	; 166
     38a:	b2 00       	.word	0x00b2	; ????
     38c:	34 0f       	add	r19, r20
     38e:	06 85       	ldd	r16, Z+14	; 0x0e
     390:	88 19       	sub	r24, r8
     392:	6a 49       	sbci	r22, 0x9A	; 154
     394:	54 c9       	rjmp	.-3416   	; 0xfffff63e <__eeprom_end+0xff7ef63e>
     396:	92 61       	ori	r25, 0x12	; 18
     398:	4c 13       	cpse	r20, r28
     39a:	00 35       	cpi	r16, 0x50	; 80
     39c:	0e 05       	cpc	r16, r14
     39e:	85 78       	andi	r24, 0x85	; 133
     3a0:	33 24       	eor	r3, r3
     3a2:	59 38       	cpi	r21, 0x89	; 137
     3a4:	a4 a1       	ldd	r26, Z+36	; 0x24
     3a6:	96 2c       	mov	r9, r6
     3a8:	00 36       	cpi	r16, 0x60	; 96
     3aa:	0d 05       	cpc	r16, r13
     3ac:	85 78       	andi	r24, 0x85	; 133
     3ae:	25 65       	ori	r18, 0x55	; 85
     3b0:	e1 90       	ld	r14, Z+
     3b2:	64 b6       	in	r6, 0x34	; 52
     3b4:	64 01       	movw	r12, r8
     3b6:	37 0d       	add	r19, r7
     3b8:	05 85       	ldd	r16, Z+13	; 0x0d
     3ba:	78 31       	cpi	r23, 0x18	; 24
     3bc:	88 59       	subi	r24, 0x98	; 152
     3be:	98 85       	ldd	r25, Y+8	; 0x08
     3c0:	59 98       	cbi	0x0b, 1	; 11
     3c2:	01 38       	cpi	r16, 0x81	; 129
     3c4:	0d 05       	cpc	r16, r13
     3c6:	85 78       	andi	r24, 0x85	; 133
     3c8:	b3 64       	ori	r27, 0x43	; 67
     3ca:	5a b2       	in	r5, 0x1a	; 26
     3cc:	64 b6       	in	r6, 0x34	; 52
     3ce:	64 01       	movw	r12, r8
     3d0:	39 0d       	add	r19, r9
     3d2:	05 85       	ldd	r16, Z+13	; 0x0d
     3d4:	78 b3       	in	r23, 0x18	; 24
     3d6:	64 b6       	in	r6, 0x34	; 52
     3d8:	64 08       	sbc	r6, r4
     3da:	b3 48       	sbci	r27, 0x83	; 131
     3dc:	02 3a       	cpi	r16, 0xA2	; 162
     3de:	07 82       	std	Z+7, r0	; 0x07
     3e0:	80 38       	cpi	r24, 0x80	; 128
     3e2:	21 0a       	sbc	r2, r17
     3e4:	3b 09       	sbc	r19, r11
     3e6:	a2 84       	ldd	r10, Z+10	; 0x0a
     3e8:	47 93       	lat	Z, r20
     3ea:	25 0a       	sbc	r2, r21
     3ec:	00 3c       	cpi	r16, 0xC0	; 192
     3ee:	09 a5       	ldd	r16, Y+41	; 0x29
     3f0:	84 79       	andi	r24, 0x94	; 148
     3f2:	19 29       	or	r17, r9
     3f4:	aa 1a       	sub	r10, r26
     3f6:	3d 09       	sbc	r19, r13
     3f8:	64 84       	ldd	r6, Z+12	; 0x0c
     3fa:	6a 31       	cpi	r22, 0x1A	; 26
     3fc:	84 43       	sbci	r24, 0x34	; 52
     3fe:	00 3e       	cpi	r16, 0xE0	; 224
     400:	09 a5       	ldd	r16, Y+41	; 0x29
     402:	84 79       	andi	r24, 0x94	; 148
     404:	91 5a       	subi	r25, 0xA1	; 161
     406:	a4 10       	cpse	r10, r4
     408:	3f 0e       	add	r3, r31
     40a:	25 85       	ldd	r18, Z+13	; 0x0d
     40c:	77 b3       	in	r23, 0x17	; 23
     40e:	64 61       	ori	r22, 0x14	; 20
     410:	26 69       	ori	r18, 0x96	; 150
     412:	61 0e       	add	r6, r17
     414:	45 00       	.word	0x0045	; ????
     416:	40 17       	cp	r20, r16
     418:	4a 85       	ldd	r20, Y+10	; 0x0a
     41a:	c6 37       	cpi	r28, 0x76	; 118
     41c:	a4 61       	ori	r26, 0x14	; 20
     41e:	16 27       	eor	r17, r22
     420:	99 a9       	ldd	r25, Y+49	; 0x31
     422:	24 95       	.word	0x9524	; ????
     424:	a4 4a       	sbci	r26, 0xA4	; 164
     426:	14 29       	or	r17, r4
     428:	61 8e       	std	Z+25, r6	; 0x19
     42a:	0d 19       	sub	r16, r13
     42c:	00 41       	sbci	r16, 0x10	; 16
     42e:	0f 07       	cpc	r16, r31
     430:	81 78       	andi	r24, 0x81	; 129
     432:	17 a7       	std	Z+47, r17	; 0x2f
     434:	49 98       	cbi	0x09, 1	; 9
     436:	64 a5       	ldd	r22, Z+44	; 0x2c
     438:	41 ca       	rjmp	.-2942   	; 0xfffff8bc <__eeprom_end+0xff7ef8bc>
     43a:	92 34       	cpi	r25, 0x42	; 66
     43c:	42 0e       	add	r4, r18
     43e:	05 85       	ldd	r16, Z+13	; 0x0d
     440:	78 31       	cpi	r23, 0x18	; 24
     442:	24 99       	sbic	0x04, 4	; 4
     444:	36 28       	or	r3, r6
     446:	99 6d       	ori	r25, 0xD9	; 217
     448:	50 00       	.word	0x0050	; ????
     44a:	43 0c       	add	r4, r3
     44c:	06 85       	ldd	r16, Z+14	; 0x0e
     44e:	88 35       	cpi	r24, 0x58	; 88
     450:	65 6a       	ori	r22, 0xA5	; 165
     452:	73 16       	cp	r7, r19
     454:	2d 00       	.word	0x002d	; ????
     456:	44 0d       	add	r20, r4
     458:	06 85       	ldd	r16, Z+14	; 0x0e
     45a:	88 31       	cpi	r24, 0x18	; 24
     45c:	44 59       	subi	r20, 0x94	; 148
     45e:	12 7a       	andi	r17, 0xA2	; 162
     460:	4b 86       	std	Y+11, r4	; 0x0b
     462:	08 45       	sbci	r16, 0x58	; 88
     464:	0c 05       	cpc	r16, r12
     466:	85 68       	ori	r24, 0x85	; 133
     468:	71 0c       	add	r7, r1
     46a:	87 24       	eor	r8, r7
     46c:	2c 0e       	add	r2, r28
     46e:	02 46       	sbci	r16, 0x62	; 98
     470:	0b 05       	cpc	r16, r11
     472:	85 68       	ori	r24, 0x85	; 133
     474:	71 2c       	mov	r7, r1
     476:	0e 49       	sbci	r16, 0x9E	; 158
     478:	58 04       	cpc	r5, r8
     47a:	47 0f       	add	r20, r23
     47c:	06 85       	ldd	r16, Z+14	; 0x0e
     47e:	88 33       	cpi	r24, 0x38	; 56
     480:	24 a1       	ldd	r18, Z+36	; 0x24
     482:	5a 1a       	sub	r5, r26
     484:	42 31       	cpi	r20, 0x12	; 18
     486:	19 12       	cpse	r1, r25
     488:	00 48       	sbci	r16, 0x80	; 128
     48a:	0b 06       	cpc	r0, r27
     48c:	85 88       	ldd	r8, Z+21	; 0x15
     48e:	11 1a       	sub	r1, r17
     490:	87 41       	sbci	r24, 0x17	; 23
     492:	74 0c       	add	r7, r4
     494:	49 07       	cpc	r20, r25
     496:	01 85       	ldd	r16, Z+9	; 0x09
     498:	38 71       	andi	r19, 0x18	; 24
     49a:	10 4a       	sbci	r17, 0xA0	; 160
     49c:	0a 05       	cpc	r16, r10
     49e:	85 78       	andi	r24, 0x85	; 133
     4a0:	d9 a3       	std	Y+33, r29	; 0x21
     4a2:	96 2c       	mov	r9, r6
     4a4:	00 4b       	sbci	r16, 0xB0	; 176
     4a6:	0e 05       	cpc	r16, r14
     4a8:	85 78       	andi	r24, 0x85	; 133
     4aa:	91 49       	sbci	r25, 0x91	; 145
     4ac:	49 49       	sbci	r20, 0x99	; 153
     4ae:	d3 92       	.word	0x92d3	; ????
     4b0:	a8 92       	.word	0x92a8	; ????
     4b2:	05 4c       	sbci	r16, 0xC5	; 197
     4b4:	09 05       	cpc	r16, r9
     4b6:	85 68       	ori	r24, 0x85	; 133
     4b8:	11 f6       	brne	.-124    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     4ba:	71 10       	cpse	r7, r1
     4bc:	4d 10       	cpse	r4, r13
     4be:	08 85       	ldd	r16, Y+8	; 0x08
     4c0:	a8 11       	cpse	r26, r8
     4c2:	8f 43       	sbci	r24, 0x3F	; 63
     4c4:	b8 44       	sbci	r27, 0x48	; 72
     4c6:	89 12       	cpse	r8, r25
     4c8:	25 92       	las	Z, r2
     4ca:	4f 01       	movw	r8, r30
     4cc:	4e 0f       	add	r20, r30
     4ce:	06 85       	ldd	r16, Z+14	; 0x0e
     4d0:	88 11       	cpse	r24, r8
     4d2:	6e 43       	sbci	r22, 0x3E	; 62
     4d4:	a4 98       	cbi	0x14, 4	; 20
     4d6:	12 69       	ori	r17, 0x92	; 146
     4d8:	c8 c6       	rjmp	.+3472   	; 0x126a <__LOCK_REGION_LENGTH__+0xe6a>
     4da:	00 4f       	sbci	r16, 0xF0	; 240
     4dc:	0d 06       	cpc	r0, r29
     4de:	85 88       	ldd	r8, Z+21	; 0x15
     4e0:	a5 45       	sbci	r26, 0x55	; 85
     4e2:	49 e8       	ldi	r20, 0x89	; 137
     4e4:	98 44       	sbci	r25, 0x48	; 72
     4e6:	99 04       	cpc	r9, r9
     4e8:	50 0d       	add	r21, r0
     4ea:	06 85       	ldd	r16, Z+14	; 0x0e
     4ec:	88 31       	cpi	r24, 0x18	; 24
     4ee:	28 a1       	ldd	r18, Y+32	; 0x20
     4f0:	71 58       	subi	r23, 0x81	; 129
     4f2:	d2 2a       	or	r13, r18
     4f4:	00 51       	subi	r16, 0x10	; 16
     4f6:	0c 26       	eor	r0, r28
     4f8:	85 87       	std	Z+13, r24	; 0x0d
     4fa:	33 24       	eor	r3, r3
     4fc:	a1 8f       	std	Z+25, r26	; 0x19
     4fe:	c9 90       	ld	r12, Y+
     500:	0a 52       	subi	r16, 0x2A	; 42
     502:	0d 05       	cpc	r16, r13
     504:	85 78       	andi	r24, 0x85	; 133
     506:	31 24       	eor	r3, r1
     508:	99 6d       	ori	r25, 0xD9	; 217
     50a:	50 32       	cpi	r21, 0x20	; 32
     50c:	5b 00       	.word	0x005b	; ????
     50e:	53 0d       	add	r21, r3
     510:	06 85       	ldd	r16, Z+14	; 0x0e
     512:	88 33       	cpi	r24, 0x38	; 56
     514:	24 a1       	ldd	r18, Z+36	; 0x24
     516:	ec 98       	cbi	0x1d, 4	; 29
     518:	0c 09       	sbc	r16, r12
     51a:	00 54       	subi	r16, 0x40	; 64
     51c:	0a 07       	cpc	r16, r26
     51e:	81 78       	andi	r24, 0x81	; 129
     520:	71 c8       	rjmp	.-3870   	; 0xfffff604 <__eeprom_end+0xff7ef604>
     522:	e2 be       	out	0x32, r14	; 50
     524:	01 55       	subi	r16, 0x51	; 81
     526:	0b 06       	cpc	r0, r27
     528:	85 88       	ldd	r8, Z+21	; 0x15
     52a:	11 fa       	bst	r1, 1
     52c:	31 19       	sub	r19, r1
     52e:	12 00       	.word	0x0012	; ????
     530:	56 10       	cpse	r5, r6
     532:	07 81       	ldd	r16, Z+7	; 0x07
     534:	78 91       	.word	0x9178	; ????
     536:	26 59       	subi	r18, 0x96	; 150
     538:	94 45       	sbci	r25, 0x54	; 84
     53a:	59 25       	eor	r21, r9
     53c:	4c d2       	rcall	.+1176   	; 0x9d6 <__LOCK_REGION_LENGTH__+0x5d6>
     53e:	38 03       	fmul	r19, r16
     540:	57 14       	cp	r5, r7
     542:	0a 85       	ldd	r16, Y+10	; 0x0a
     544:	c8 91       	.word	0x91c8	; ????
     546:	69 49       	sbci	r22, 0x99	; 153
     548:	24 95       	.word	0x9524	; ????
     54a:	a4 92       	xch	Z, r10
     54c:	54 89       	ldd	r21, Z+20	; 0x14
     54e:	92 4c       	sbci	r25, 0xC2	; 194
     550:	12 25       	eor	r17, r2
     552:	b1 04       	cpc	r11, r1
     554:	58 0e       	add	r5, r24
     556:	05 85       	ldd	r16, Z+13	; 0x0d
     558:	78 91       	.word	0x9178	; ????
     55a:	2d 4a       	sbci	r18, 0xAD	; 173
     55c:	2d cc       	rjmp	.-1958   	; 0xfffffdb8 <__eeprom_end+0xff7efdb8>
     55e:	92 44       	sbci	r25, 0x42	; 66
     560:	d9 02       	muls	r29, r25
     562:	59 0d       	add	r21, r9
     564:	05 85       	ldd	r16, Z+13	; 0x0d
     566:	78 91       	.word	0x9178	; ????
     568:	69 49       	sbci	r22, 0x99	; 153
     56a:	29 c9       	rjmp	.-3502   	; 0xfffff7be <__eeprom_end+0xff7ef7be>
     56c:	c2 26       	eor	r12, r18
     56e:	00 5a       	subi	r16, 0xA0	; 160
     570:	0b 06       	cpc	r0, r27
     572:	85 78       	andi	r24, 0x85	; 133
     574:	71 2c       	mov	r7, r1
     576:	8a d5       	rcall	.+2836   	; 0x108c <__LOCK_REGION_LENGTH__+0xc8c>
     578:	70 18       	sub	r7, r0
     57a:	5b 09       	sbc	r21, r11
     57c:	62 85       	ldd	r22, Z+10	; 0x0a
     57e:	36 b1       	in	r19, 0x06	; 6
     580:	f4 17       	cp	r31, r20
     582:	01 5c       	subi	r16, 0xC1	; 193
     584:	0c 04       	cpc	r0, r12
     586:	81 58       	subi	r24, 0x81	; 129
     588:	91 85       	ldd	r25, Z+9	; 0x09
     58a:	59 98       	cbi	0x0b, 1	; 11
     58c:	85 59       	subi	r24, 0x95	; 149
     58e:	00 5d       	subi	r16, 0xD0	; 208
     590:	09 62       	ori	r16, 0x29	; 41
     592:	81 36       	cpi	r24, 0x61	; 97
     594:	a1 f4       	brne	.+40     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     596:	97 01       	movw	r18, r14
     598:	5e 09       	sbc	r21, r14
     59a:	65 84       	ldd	r6, Z+13	; 0x0d
     59c:	7d 95 25 b5 	jmp	0x5f6a4a	; 0x5f6a4a <__TEXT_REGION_LENGTH__+0x4f6a4a>
     5a0:	00 5f       	subi	r16, 0xF0	; 240
     5a2:	07 25       	eor	r16, r7
     5a4:	80 57       	subi	r24, 0x70	; 112
     5a6:	31 08       	sbc	r3, r1
     5a8:	61 0c       	add	r6, r1
     5aa:	c5 84       	ldd	r12, Z+13	; 0x0d
     5ac:	78 b3       	in	r23, 0x18	; 24
     5ae:	26 83       	std	Z+6, r18	; 0x06
     5b0:	a6 25       	eor	r26, r6
     5b2:	43 00       	.word	0x0043	; ????
     5b4:	62 0d       	add	r22, r2
     5b6:	05 85       	ldd	r16, Z+13	; 0x0d
     5b8:	78 11       	cpse	r23, r8
     5ba:	16 87       	std	Z+14, r17	; 0x0e
     5bc:	24 b3       	in	r18, 0x14	; 20
     5be:	0d 0a       	sbc	r0, r29
     5c0:	00 63       	ori	r16, 0x30	; 48
     5c2:	0b c5       	rjmp	.+2582   	; 0xfda <__LOCK_REGION_LENGTH__+0xbda>
     5c4:	84 68       	ori	r24, 0x84	; 132
     5c6:	b3 64       	ori	r27, 0x43	; 67
     5c8:	62 2d       	mov	r22, r2
     5ca:	59 00       	.word	0x0059	; ????
     5cc:	64 0b       	sbc	r22, r20
     5ce:	05 85       	ldd	r16, Z+13	; 0x0d
     5d0:	78 d9       	rcall	.-3344   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>
     5d2:	32 68       	ori	r19, 0x82	; 130
     5d4:	b6 64       	ori	r27, 0x46	; 70
     5d6:	08 65       	ori	r16, 0x58	; 88
     5d8:	0c c5       	rjmp	.+2584   	; 0xff2 <__LOCK_REGION_LENGTH__+0xbf2>
     5da:	84 78       	andi	r24, 0x84	; 132
     5dc:	b3 64       	ori	r27, 0x43	; 67
     5de:	c3 10       	cpse	r12, r3
     5e0:	a6 43       	sbci	r26, 0x36	; 54
     5e2:	00 66       	ori	r16, 0x60	; 96
     5e4:	0b 24       	eor	r0, r11
     5e6:	81 48       	sbci	r24, 0x81	; 129
     5e8:	a5 64       	ori	r26, 0x45	; 69
     5ea:	d1 94       	neg	r13
     5ec:	75 02       	muls	r23, r21
     5ee:	67 0d       	add	r22, r7
     5f0:	05 85       	ldd	r16, Z+13	; 0x0d
     5f2:	76 33       	cpi	r23, 0x36	; 54
     5f4:	68 b6       	in	r6, 0x38	; 56
     5f6:	64 08       	sbc	r6, r4
     5f8:	2b 0b       	sbc	r18, r27
     5fa:	00 68       	ori	r16, 0x80	; 128
     5fc:	0b 05       	cpc	r16, r11
     5fe:	85 78       	andi	r24, 0x85	; 133
     600:	11 16       	cp	r1, r17
     602:	87 24       	eor	r8, r7
     604:	73 0b       	sbc	r23, r19
     606:	69 08       	sbc	r6, r9
     608:	01 85       	ldd	r16, Z+9	; 0x09
     60a:	38 91       	.word	0x9138	; ????
     60c:	0c 03       	fmul	r16, r20
     60e:	6a 09       	sbc	r22, r10
     610:	42 81       	ldd	r20, Z+2	; 0x02
     612:	36 93       	lac	Z, r19
     614:	25 bd       	out	0x25, r18	; 37
     616:	0c 6b       	ori	r16, 0xBC	; 188
     618:	0e 05       	cpc	r16, r14
     61a:	85 68       	ori	r24, 0x85	; 133
     61c:	11 66       	ori	r17, 0x61	; 97
     61e:	52 52       	subi	r21, 0x22	; 34
     620:	d2 92       	st	-Z, r13
     622:	a8 92       	.word	0x92a8	; ????
     624:	05 6c       	ori	r16, 0xC5	; 197
     626:	07 01       	movw	r0, r14
     628:	85 38       	cpi	r24, 0x85	; 133
     62a:	71 10       	cpse	r7, r1
     62c:	6d 0f       	add	r22, r29
     62e:	c9 84       	ldd	r12, Y+9	; 0x09
     630:	b8 31       	cpi	r27, 0x18	; 24
     632:	24 4b       	sbci	r18, 0xB4	; 180
     634:	96 69       	ori	r25, 0x96	; 150
     636:	99 96       	adiw	r26, 0x29	; 41
     638:	69 99       	sbic	0x0d, 1	; 13
     63a:	56 6e       	ori	r21, 0xE6	; 230
     63c:	0a c5       	rjmp	.+2580   	; 0x1052 <__LOCK_REGION_LENGTH__+0xc52>
     63e:	84 78       	andi	r24, 0x84	; 132
     640:	31 24       	eor	r3, r1
     642:	99 b7       	in	r25, 0x39	; 57
     644:	00 6f       	ori	r16, 0xF0	; 240
     646:	0a c5       	rjmp	.+2580   	; 0x105c <__LOCK_REGION_LENGTH__+0xc5c>
     648:	84 78       	andi	r24, 0x84	; 132
     64a:	b3 64       	ori	r27, 0x43	; 67
     64c:	6e c9       	rjmp	.-3364   	; 0xfffff92a <__eeprom_end+0xff7ef92a>
     64e:	02 70       	andi	r16, 0x02	; 2
     650:	0d 05       	cpc	r16, r13
     652:	85 76       	andi	r24, 0x65	; 101
     654:	31 24       	eor	r3, r1
     656:	99 6d       	ori	r25, 0xD9	; 217
     658:	50 c2       	rjmp	.+1184   	; 0xafa <__LOCK_REGION_LENGTH__+0x6fa>
     65a:	22 00       	.word	0x0022	; ????
     65c:	71 0b       	sbc	r23, r17
     65e:	05 85       	ldd	r16, Z+13	; 0x0d
     660:	76 33       	cpi	r23, 0x36	; 54
     662:	68 b6       	in	r6, 0x38	; 56
     664:	64 08       	sbc	r6, r4
     666:	1b 72       	andi	r17, 0x2B	; 43
     668:	0a c3       	rjmp	.+1556   	; 0xc7e <__LOCK_REGION_LENGTH__+0x87e>
     66a:	84 48       	sbci	r24, 0x84	; 132
     66c:	91 2c       	mov	r9, r1
     66e:	51 13       	cpse	r21, r17
     670:	00 73       	andi	r16, 0x30	; 48
     672:	0c c4       	rjmp	.+2072   	; 0xe8c <__LOCK_REGION_LENGTH__+0xa8c>
     674:	84 68       	ori	r24, 0x84	; 132
     676:	a3 44       	sbci	r26, 0x43	; 67
     678:	49 98       	cbi	0x09, 1	; 9
     67a:	44 89       	ldd	r20, Z+20	; 0x14
     67c:	02 74       	andi	r16, 0x42	; 66
     67e:	0a 03       	fmul	r16, r18
     680:	85 58       	subi	r24, 0x85	; 133
     682:	13 25       	eor	r17, r3
     684:	4b d4       	rcall	.+2198   	; 0xf1c <__LOCK_REGION_LENGTH__+0xb1c>
     686:	24 75       	andi	r18, 0x54	; 84
     688:	0a c5       	rjmp	.+2580   	; 0x109e <__LOCK_REGION_LENGTH__+0xc9e>
     68a:	84 78       	andi	r24, 0x84	; 132
     68c:	91 79       	andi	r25, 0x91	; 145
     68e:	4b 86       	std	Y+11, r4	; 0x0b
     690:	00 76       	andi	r16, 0x60	; 96
     692:	0d c5       	rjmp	.+2586   	; 0x10ae <__LOCK_REGION_LENGTH__+0xcae>
     694:	80 58       	subi	r24, 0x80	; 128
     696:	91 25       	eor	r25, r1
     698:	a5 24       	eor	r10, r5
     69a:	4a b2       	in	r4, 0x1a	; 26
     69c:	30 02       	muls	r19, r16
     69e:	77 0f       	add	r23, r23
     6a0:	c7 84       	ldd	r12, Z+15	; 0x0f
     6a2:	88 11       	cpse	r24, r8
     6a4:	45 52       	subi	r20, 0x25	; 37
     6a6:	a4 2c       	mov	r10, r4
     6a8:	4a b7       	in	r20, 0x3a	; 58
     6aa:	28 4b       	sbci	r18, 0xB8	; 184
     6ac:	00 78       	andi	r16, 0x80	; 128
     6ae:	0c c5       	rjmp	.+2584   	; 0x10c8 <__LOCK_REGION_LENGTH__+0xcc8>
     6b0:	80 68       	ori	r24, 0x80	; 128
     6b2:	91 25       	eor	r25, r1
     6b4:	b5 30       	cpi	r27, 0x05	; 5
     6b6:	4b 6a       	ori	r20, 0xAB	; 171
     6b8:	01 79       	andi	r16, 0x91	; 145
     6ba:	0f 05       	cpc	r16, r15
     6bc:	81 56       	subi	r24, 0x61	; 97
     6be:	91 25       	eor	r25, r1
     6c0:	51 52       	subi	r21, 0x21	; 33
     6c2:	4a 32       	cpi	r20, 0x2A	; 42
     6c4:	2d 8c       	ldd	r2, Y+29	; 0x1d
     6c6:	34 00       	.word	0x0034	; ????
     6c8:	7a 0a       	sbc	r7, r26
     6ca:	c5 84       	ldd	r12, Z+13	; 0x0d
     6cc:	68 31       	cpi	r22, 0x18	; 24
     6ce:	68 8d       	ldd	r22, Y+24	; 0x18
     6d0:	d9 20       	and	r13, r9
     6d2:	7b 0b       	sbc	r23, r27
     6d4:	63 85       	ldd	r22, Z+11	; 0x0b
     6d6:	56 95       	lsr	r21
     6d8:	44 2d       	mov	r20, r4
     6da:	59 d4       	rcall	.+2226   	; 0xf8e <__LOCK_REGION_LENGTH__+0xb8e>
     6dc:	16 7c       	andi	r17, 0xC6	; 198
     6de:	07 41       	sbci	r16, 0x17	; 23
     6e0:	85 36       	cpi	r24, 0x65	; 101
     6e2:	f1 10       	cpse	r15, r1
     6e4:	7d 0c       	add	r7, r13
     6e6:	63 85       	ldd	r22, Z+11	; 0x0b
     6e8:	56 91       	elpm	r21, Z
     6ea:	45 6d       	ori	r20, 0xD5	; 213
     6ec:	49 d4       	rcall	.+2194   	; 0xf80 <__LOCK_REGION_LENGTH__+0xb80>
     6ee:	12 01       	movw	r2, r4
     6f0:	7e 08       	sbc	r7, r14
     6f2:	46 84       	ldd	r4, Z+14	; 0x0e
     6f4:	8a 23       	and	r24, r26
     6f6:	59 00       	.word	0x0059	; ????
     6f8:	a0 06       	cpc	r10, r16
     6fa:	00 80       	ld	r0, Z
     6fc:	38 01       	movw	r6, r16
     6fe:	a6 09       	sbc	r26, r6
     700:	21 85       	ldd	r18, Z+9	; 0x09
     702:	37 31       	cpi	r19, 0x17	; 23
     704:	24 43       	sbci	r18, 0x34	; 52
     706:	00 a9       	ldd	r16, Z+48	; 0x30
     708:	14 28       	or	r1, r4
     70a:	85 a8       	ldd	r8, Z+53	; 0x35
     70c:	35 64       	ori	r19, 0x45	; 69
     70e:	61 12       	cpse	r6, r17
     710:	59 a2       	std	Y+33, r5	; 0x21
     712:	44 09       	sbc	r20, r4
     714:	95 28       	or	r9, r5
     716:	59 2c       	mov	r5, r9
     718:	61 a8       	ldd	r6, Z+49	; 0x31
     71a:	01 ab       	std	Z+49, r16	; 0x31
     71c:	09 a3       	std	Y+33, r16	; 0x21
     71e:	84 58       	subi	r24, 0x84	; 132
     720:	53 b1       	in	r21, 0x03	; 3
     722:	54 00       	.word	0x0054	; ????
     724:	ac 08       	sbc	r10, r12
     726:	45 80       	ldd	r4, Z+5	; 0x05
     728:	6a 31       	cpi	r22, 0x1A	; 26
     72a:	88 01       	movw	r16, r16
     72c:	ae 14       	cp	r10, r14
     72e:	08 85       	ldd	r16, Y+8	; 0x08
     730:	a8 35       	cpi	r26, 0x58	; 88
     732:	64 43       	sbci	r22, 0x34	; 52
     734:	d2 94       	swap	r13
     736:	28 93       	.word	0x9328	; ????
     738:	12 25       	eor	r17, r2
     73a:	4a 94       	dec	r4
     73c:	14 b3       	in	r17, 0x14	; 20
     73e:	21 02       	muls	r18, r17
     740:	b0 06       	cpc	r11, r16
     742:	62 84       	ldd	r6, Z+10	; 0x0a
     744:	4d 71       	andi	r20, 0x1D	; 29
     746:	b1 0c       	add	r11, r1
     748:	e5 84       	ldd	r14, Z+13	; 0x0d
     74a:	68 15       	cp	r22, r8
     74c:	46 83       	std	Z+6, r20	; 0x06
     74e:	14 e6       	ldi	r17, 0x64	; 100
     750:	c0 20       	and	r12, r0
     752:	b2 09       	sbc	r27, r2
     754:	83 80       	ldd	r8, Z+3	; 0x03
     756:	3b 31       	cpi	r19, 0x1B	; 27
     758:	25 c9       	rjmp	.-3510   	; 0xfffff9a4 <__eeprom_end+0xff7ef9a4>
     75a:	00 b3       	in	r16, 0x10	; 16
     75c:	09 83       	std	Y+1, r16	; 0x01
     75e:	84 4b       	sbci	r24, 0xB4	; 180
     760:	b1 64       	ori	r27, 0x41	; 65
     762:	43 00       	.word	0x0043	; ????
     764:	b5 0b       	sbc	r27, r21
     766:	05 85       	ldd	r16, Z+13	; 0x0d
     768:	76 91       	elpm	r23, Z
     76a:	79 1b       	sub	r23, r25
     76c:	86 30       	cpi	r24, 0x06	; 6
     76e:	04 b9       	out	0x04, r16	; 4
     770:	07 82       	std	Z+7, r0	; 0x07
     772:	84 4b       	sbci	r24, 0xB4	; 180
     774:	a1 34       	cpi	r26, 0x41	; 65
     776:	bb 09       	sbc	r27, r11
     778:	a3 84       	ldd	r10, Z+11	; 0x0b
     77a:	58 53       	subi	r21, 0x38	; 56
     77c:	b1 54       	subi	r27, 0x41	; 65
     77e:	00 bc       	out	0x20, r0	; 32
     780:	11 c8       	rjmp	.-4062   	; 0xfffff7a4 <__eeprom_end+0xff7ef7a4>
     782:	84 99       	sbic	0x10, 4	; 16
     784:	a1 95       	neg	r26
     786:	c2 28       	or	r12, r2
     788:	89 92       	st	Y+, r8
     78a:	44 4b       	sbci	r20, 0xB4	; 180
     78c:	86 24       	eor	r8, r6
     78e:	4c 00       	.word	0x004c	; ????
     790:	bd 0d       	add	r27, r13
     792:	c8 84       	ldd	r12, Y+8	; 0x08
     794:	a9 a1       	ldd	r26, Y+33	; 0x21
     796:	95 86       	std	Z+13, r9	; 0x0d
     798:	a4 4f       	sbci	r26, 0xF4	; 244
     79a:	52 24       	eor	r5, r2
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	12 e8       	ldi	r17, 0x82	; 130
     7a0:	84 99       	sbic	0x10, 4	; 16
     7a2:	b1 03       	fmuls	r19, r17
     7a4:	51 16       	cp	r5, r17
     7a6:	a5 c9       	rjmp	.-3254   	; 0xfffffaf2 <__eeprom_end+0xff7efaf2>
     7a8:	41 c9       	rjmp	.-3454   	; 0xfffffa2c <__eeprom_end+0xff7efa2c>
     7aa:	92 21       	and	r25, r2
     7ac:	ca 12       	cpse	r12, r26
     7ae:	00 d7       	rcall	.+3584   	; 0x15b0 <__LOCK_REGION_LENGTH__+0x11b0>
     7b0:	0b a4       	ldd	r0, Y+43	; 0x2b
     7b2:	84 69       	ori	r24, 0x94	; 148
     7b4:	11 0d       	add	r17, r1
     7b6:	91 92       	st	Z+, r9
     7b8:	4c 01       	movw	r8, r24
     7ba:	f7 0b       	sbc	r31, r23
     7bc:	c5 84       	ldd	r12, Z+13	; 0x0d
     7be:	79 a5       	ldd	r23, Y+41	; 0x29
     7c0:	83 83       	std	Z+3, r24	; 0x03
     7c2:	0e 28       	or	r0, r14
     7c4:	00 00       	nop
     7c6:	00 00       	nop
     7c8:	0c 06       	cpc	r0, r28
     7ca:	d4 05       	cpc	r29, r4
     7cc:	23 fb       	bst	r18, 3
     7ce:	ae 04       	cpc	r10, r14
     7d0:	d3 ff       	sbrs	r29, 3
     7d2:	ff 06       	cpc	r15, r31
     7d4:	0c 07       	cpc	r16, r28
     7d6:	62 84       	ldd	r6, Z+10	; 0x0a
     7d8:	49 63       	ori	r20, 0x39	; 57
     7da:	06 15       	cp	r16, r6
     7dc:	08 43       	sbci	r16, 0x38	; 56
     7de:	80 0e       	add	r8, r16
     7e0:	33 08       	sbc	r3, r3
     7e2:	06 1b       	sub	r16, r22
     7e4:	08 a2       	std	Y+32, r0	; 0x20
     7e6:	84 49       	sbci	r24, 0x94	; 148
     7e8:	63 12       	cpse	r6, r19
     7ea:	06 1f       	adc	r16, r22
     7ec:	0d 25       	eor	r16, r13
     7ee:	81 57       	subi	r24, 0x71	; 113
     7f0:	b3 64       	ori	r27, 0x43	; 67
     7f2:	a2 b1       	in	r26, 0x02	; 2
     7f4:	0e 45       	sbci	r16, 0x5E	; 94
     7f6:	00 06       	cpc	r0, r16
     7f8:	21 0a       	sbc	r2, r17
     7fa:	83 84       	ldd	r8, Z+11	; 0x0b
     7fc:	58 33       	cpi	r21, 0x38	; 56
     7fe:	0d 11       	cpse	r16, r13
     800:	00 06       	cpc	r0, r16
     802:	22 0a       	sbc	r2, r18
     804:	03 81       	ldd	r16, Z+3	; 0x03
     806:	38 31       	cpi	r19, 0x18	; 24
     808:	46 bd       	out	0x26, r20	; 38
     80a:	00 06       	cpc	r0, r16
     80c:	23 09       	sbc	r18, r3
     80e:	42 81       	ldd	r20, Z+2	; 0x02
     810:	38 63       	ori	r19, 0x38	; 56
     812:	e9 07       	cpc	r30, r25
     814:	06 24       	eor	r0, r6
     816:	10 64       	ori	r17, 0x40	; 64
     818:	85 65       	ori	r24, 0x55	; 85
     81a:	a3 84       	ldd	r10, Z+11	; 0x0b
     81c:	b2 12       	cpse	r11, r18
     81e:	49 c9       	rjmp	.-3438   	; 0xfffffab2 <__eeprom_end+0xff7efab2>
     820:	16 25       	eor	r17, r6
     822:	12 00       	.word	0x0012	; ????
     824:	06 25       	eor	r16, r6
     826:	0a 62       	ori	r16, 0x2A	; 42
     828:	81 35       	cpi	r24, 0x51	; 81
     82a:	d3 6f       	ori	r29, 0xF3	; 243
     82c:	8a 00       	.word	0x008a	; ????
     82e:	06 26       	eor	r0, r22
     830:	11 27       	eor	r17, r17
     832:	81 85       	ldd	r24, Z+9	; 0x09
     834:	23 47       	sbci	r18, 0x73	; 115
     836:	4a d4       	rcall	.+2196   	; 0x10cc <__LOCK_REGION_LENGTH__+0xccc>
     838:	16 65       	ori	r17, 0x56	; 86
     83a:	d9 90       	ld	r13, Y+
     83c:	6e d2       	rcall	.+1244   	; 0xd1a <__LOCK_REGION_LENGTH__+0x91a>
     83e:	04 06       	cpc	r0, r20
     840:	27 08       	sbc	r2, r7
     842:	01 85       	ldd	r16, Z+9	; 0x09
     844:	38 71       	andi	r19, 0x18	; 24
     846:	10 06       	cpc	r1, r16
     848:	28 0d       	add	r18, r8
     84a:	c8 80       	ld	r12, Y
     84c:	96 11       	cpse	r25, r6
     84e:	cb 6b       	ori	r28, 0xBB	; 187
     850:	32 ec       	ldi	r19, 0xC2	; 194
     852:	70 06       	cpc	r7, r16
     854:	06 29       	or	r16, r6
     856:	0d e4       	ldi	r16, 0x4D	; 77
     858:	80 48       	sbci	r24, 0x80	; 128
     85a:	53 95       	inc	r21
     85c:	94 48       	sbci	r25, 0x84	; 132
     85e:	4a 14       	cp	r4, r10
     860:	00 06       	cpc	r0, r16
     862:	2a 0d       	add	r18, r10
     864:	a8 80       	ld	r10, Y
     866:	98 97       	sbiw	r26, 0x28	; 40
     868:	44 b1       	in	r20, 0x04	; 4
     86a:	bc 26       	eor	r11, r28
     86c:	c3 02       	muls	r28, r19
     86e:	06 2b       	or	r16, r22
     870:	0e c8       	rjmp	.-4068   	; 0xfffff88e <__eeprom_end+0xff7ef88e>
     872:	80 98       	cbi	0x10, 0	; 16
     874:	19 27       	eor	r17, r25
     876:	51 2c       	mov	r5, r1
     878:	af c9       	rjmp	.-3234   	; 0xfffffbd8 <__eeprom_end+0xff7efbd8>
     87a:	b0 00       	.word	0x00b0	; ????
     87c:	06 2c       	mov	r0, r6
     87e:	13 27       	eor	r17, r19
     880:	81 74       	andi	r24, 0x41	; 65
     882:	b3 03       	fmuls	r19, r19
     884:	e2 90       	ld	r14, -Z
     886:	88 6a       	ori	r24, 0xA8	; 168
     888:	94 e5       	ldi	r25, 0x54	; 84
     88a:	40 0e       	add	r4, r16
     88c:	0c 09       	sbc	r16, r12
     88e:	00 06       	cpc	r0, r16
     890:	2d 12       	cpse	r2, r29
     892:	27 81       	ldd	r18, Z+7	; 0x07
     894:	74 b3       	in	r23, 0x14	; 20
     896:	03 e2       	ldi	r16, 0x23	; 35
     898:	90 88       	ldd	r9, Z+16	; 0x10
     89a:	6a 9c       	mul	r6, r10
     89c:	03 39       	cpi	r16, 0x93	; 147
     89e:	30 24       	eor	r3, r0
     8a0:	00 06       	cpc	r0, r16
     8a2:	2e 13       	cpse	r18, r30
     8a4:	87 81       	ldd	r24, Z+7	; 0x07
     8a6:	74 95       	.word	0x9574	; ????
     8a8:	53 77       	andi	r21, 0x73	; 115
     8aa:	40 1c       	adc	r4, r0
     8ac:	12 51       	subi	r17, 0x12	; 18
     8ae:	8d 73       	andi	r24, 0x3D	; 61
     8b0:	20 07       	cpc	r18, r16
     8b2:	86 04       	cpc	r8, r6
     8b4:	06 2f       	mov	r16, r22
     8b6:	0a a4       	ldd	r0, Y+42	; 0x2a
     8b8:	84 59       	subi	r24, 0x94	; 148
     8ba:	13 d6       	rcall	.+3110   	; 0x14e2 <__LOCK_REGION_LENGTH__+0x10e2>
     8bc:	86 04       	cpc	r8, r6
     8be:	06 30       	cpi	r16, 0x06	; 6
     8c0:	0b 04       	cpc	r0, r11
     8c2:	85 58       	subi	r24, 0x85	; 133
     8c4:	93 83       	std	Z+3, r25	; 0x03
     8c6:	6d 43       	sbci	r22, 0x3D	; 61
     8c8:	02 06       	cpc	r0, r18
     8ca:	31 09       	sbc	r19, r1
     8cc:	c3 80       	ldd	r12, Z+3	; 0x03
     8ce:	35 d5       	rcall	.+2666   	; 0x133a <__LOCK_REGION_LENGTH__+0xf3a>
     8d0:	a5 04       	cpc	r10, r5
     8d2:	06 32       	cpi	r16, 0x26	; 38
     8d4:	0b 03       	fmul	r16, r19
     8d6:	81 35       	cpi	r24, 0x51	; 81
     8d8:	13 47       	sbci	r17, 0x73	; 115
     8da:	2d 25       	eor	r18, r13
     8dc:	00 06       	cpc	r0, r16
     8de:	33 13       	cpse	r19, r19
     8e0:	ec 80       	ldd	r14, Y+4	; 0x04
     8e2:	c5 0f       	add	r28, r21
     8e4:	e6 50       	subi	r30, 0x06	; 6
     8e6:	a2 26       	eor	r10, r18
     8e8:	d6 41       	sbci	r29, 0x16	; 22
     8ea:	49 53       	subi	r20, 0x39	; 57
     8ec:	2d 07       	cpc	r18, r29
     8ee:	86 1c       	adc	r8, r6
     8f0:	06 34       	cpi	r16, 0x46	; 70
     8f2:	17 4c       	sbci	r17, 0xC7	; 199
     8f4:	81 c5       	rjmp	.+2818   	; 0x13f8 <__LOCK_REGION_LENGTH__+0xff8>
     8f6:	0f e5       	ldi	r16, 0x5F	; 95
     8f8:	58 92       	.word	0x9258	; ????
     8fa:	b3 e5       	ldi	r27, 0x53	; 83
     8fc:	50 a2       	std	Z+32, r5	; 0x20
     8fe:	26 d6       	rcall	.+3148   	; 0x154c <__LOCK_REGION_LENGTH__+0x114c>
     900:	41 49       	sbci	r20, 0x91	; 145
     902:	53 2d       	mov	r21, r3
     904:	07 86       	std	Z+15, r0	; 0x0f
     906:	1c 06       	cpc	r1, r28
     908:	35 17       	cp	r19, r21
     90a:	0d 81       	ldd	r16, Y+5	; 0x05
     90c:	e5 8f       	std	Z+29, r30	; 0x1d
     90e:	ed 50       	subi	r30, 0x0D	; 13
     910:	a4 26       	eor	r10, r20
     912:	99 2a       	or	r9, r25
     914:	aa c3       	rjmp	.+1876   	; 0x106a <__LOCK_REGION_LENGTH__+0xc6a>
     916:	92 e6       	ldi	r25, 0x62	; 98
     918:	40 96       	adiw	r24, 0x10	; 16
     91a:	23 43       	sbci	r18, 0x33	; 51
     91c:	8e 00       	.word	0x008e	; ????
     91e:	06 36       	cpi	r16, 0x66	; 102
     920:	19 4d       	sbci	r17, 0xD9	; 217
     922:	81 e5       	ldi	r24, 0x51	; 81
     924:	8f e5       	ldi	r24, 0x5F	; 95
     926:	8c 3b       	cpi	r24, 0xBC	; 188
     928:	14 a9       	ldd	r17, Z+52	; 0x34
     92a:	49 a6       	std	Y+41, r4	; 0x29
     92c:	8a ea       	ldi	r24, 0xAA	; 170
     92e:	b0 a4       	ldd	r11, Z+40	; 0x28
     930:	39 90       	ld	r3, Y+
     932:	e5 c8       	rjmp	.-3638   	; 0xfffffafe <__eeprom_end+0xff7efafe>
     934:	90 23       	and	r25, r16
     936:	00 06       	cpc	r0, r16
     938:	37 13       	cpse	r19, r23
     93a:	08 85       	ldd	r16, Y+8	; 0x08
     93c:	98 95       	break
     93e:	03 39       	cpi	r16, 0x93	; 147
     940:	90 03       	fmuls	r17, r16
     942:	c9 a6       	std	Y+41, r12	; 0x29
     944:	45 e1       	ldi	r20, 0x15	; 21
     946:	98 0c       	add	r9, r8
     948:	13 00       	.word	0x0013	; ????
     94a:	06 38       	cpi	r16, 0x86	; 134
     94c:	12 08       	sbc	r1, r2
     94e:	85 98       	cbi	0x10, 5	; 16
     950:	55 cc       	rjmp	.-1878   	; 0x1fc <__trampolines_start>
     952:	81 1c       	adc	r8, r1
     954:	48 36       	cpi	r20, 0x68	; 104
     956:	2d 0a       	sbc	r2, r29
     958:	c7 64       	ori	r28, 0x47	; 71
     95a:	98 00       	.word	0x0098	; ????
     95c:	06 39       	cpi	r16, 0x96	; 150
     95e:	10 46       	sbci	r17, 0x60	; 96
     960:	81 74       	andi	r24, 0x41	; 65
     962:	33 a5       	ldd	r19, Z+43	; 0x2b
     964:	f1 10       	cpse	r15, r1
     966:	69 62       	ori	r22, 0x29	; 41
     968:	9a aa       	std	Y+50, r9	; 0x32
     96a:	83 00       	.word	0x0083	; ????
     96c:	06 3a       	cpi	r16, 0xA6	; 166
     96e:	11 86       	std	Z+9, r1	; 0x09
     970:	81 74       	andi	r24, 0x41	; 65
     972:	95 63       	ori	r25, 0x35	; 53
     974:	53 1a       	sub	r5, r19
     976:	0f 91       	pop	r16
     978:	26 a6       	std	Z+46, r2	; 0x2e
     97a:	a9 3a       	cpi	r26, 0xA9	; 169
     97c:	08 06       	cpc	r0, r24
     97e:	40 07       	cpc	r20, r16
     980:	22 80       	ldd	r2, Z+2	; 0x02
     982:	28 21       	and	r18, r8
     984:	06 41       	sbci	r16, 0x16	; 22
     986:	11 09       	sbc	r17, r1
     988:	81 98       	cbi	0x10, 1	; 16
     98a:	9d d3       	rcall	.+1850   	; 0x10c6 <__LOCK_REGION_LENGTH__+0xcc6>
     98c:	e4 a4       	ldd	r14, Z+44	; 0x2c
     98e:	18 a9       	ldd	r17, Y+48	; 0x30
     990:	83 1a       	sub	r8, r19
     992:	0d 13       	cpse	r16, r29
     994:	00 06       	cpc	r0, r16
     996:	42 12       	cpse	r4, r18
     998:	27 81       	ldd	r18, Z+7	; 0x07
     99a:	85 97       	sbiw	r24, 0x25	; 37
     99c:	e4 a8       	ldd	r14, Z+52	; 0x34
     99e:	18 49       	sbci	r17, 0x98	; 152
     9a0:	91 36       	cpi	r25, 0x61	; 97
     9a2:	a4 9b       	sbis	0x14, 4	; 20
     9a4:	32 44       	sbci	r19, 0x42	; 66
     9a6:	00 06       	cpc	r0, r16
     9a8:	43 11       	cpse	r20, r3
     9aa:	08 81       	ld	r16, Y
     9ac:	88 0f       	add	r24, r24
     9ae:	e4 40       	sbci	r30, 0x04	; 4
     9b0:	0e 64       	ori	r16, 0x4E	; 78
     9b2:	92 f3       	brmi	.-28     	; 0x998 <__LOCK_REGION_LENGTH__+0x598>
     9b4:	9a 0c       	add	r9, r10
     9b6:	0b 00       	.word	0x000b	; ????
     9b8:	06 44       	sbci	r16, 0x46	; 70
     9ba:	0d 46       	sbci	r16, 0x6D	; 109
     9bc:	81 66       	ori	r24, 0x61	; 97
     9be:	db 55       	subi	r29, 0x5B	; 91
     9c0:	34 4e       	sbci	r19, 0xE4	; 228
     9c2:	d1 90       	ld	r13, Z+
     9c4:	00 06       	cpc	r0, r16
     9c6:	45 0e       	add	r4, r21
     9c8:	06 81       	ldd	r16, Z+6	; 0x06
     9ca:	64 a7       	std	Z+44, r22	; 0x2c
     9cc:	45 43       	sbci	r20, 0x35	; 53
     9ce:	a4 2c       	mov	r10, r4
     9d0:	69 2b       	or	r22, r25
     9d2:	00 06       	cpc	r0, r16
     9d4:	46 0d       	add	r20, r6
     9d6:	e7 80       	ldd	r14, Z+7	; 0x07
     9d8:	75 97       	sbiw	r30, 0x15	; 21
     9da:	43 aa       	std	Z+51, r4	; 0x33
     9dc:	75 8b       	std	Z+21, r23	; 0x15
     9de:	86 08       	sbc	r8, r6
     9e0:	06 47       	sbci	r16, 0x76	; 118
     9e2:	0c a4       	ldd	r0, Y+44	; 0x2c
     9e4:	80 48       	sbci	r24, 0x80	; 128
     9e6:	23 29       	or	r18, r3
     9e8:	91 94       	neg	r9
     9ea:	28 00       	.word	0x0028	; ????
     9ec:	06 48       	sbci	r16, 0x86	; 134
     9ee:	0d e4       	ldi	r16, 0x4D	; 77
     9f0:	84 65       	ori	r24, 0x54	; 84
     9f2:	a3 44       	sbci	r26, 0x43	; 67
     9f4:	52 b2       	in	r5, 0x12	; 18
     9f6:	45 89       	ldd	r20, Z+21	; 0x15
     9f8:	04 06       	cpc	r0, r20
     9fa:	49 10       	cpse	r4, r9
     9fc:	07 81       	ldd	r16, Z+7	; 0x07
     9fe:	85 2b       	or	r24, r21
     a00:	46 b5       	in	r20, 0x26	; 38
     a02:	28 cb       	rjmp	.-2480   	; 0x54 <__SREG__+0x15>
     a04:	86 74       	andi	r24, 0x46	; 70
     a06:	93 26       	eor	r9, r19
     a08:	00 06       	cpc	r0, r16
     a0a:	4a 13       	cpse	r20, r26
     a0c:	47 81       	ldd	r20, Z+7	; 0x07
     a0e:	83 2b       	or	r24, r19
     a10:	46 b5       	in	r20, 0x26	; 38
     a12:	28 cb       	rjmp	.-2480   	; 0x64 <__SREG__+0x25>
     a14:	86 74       	andi	r24, 0x46	; 70
     a16:	53 86       	std	Z+11, r5	; 0x0b
     a18:	1c 4c       	sbci	r17, 0xCC	; 204
     a1a:	22 00       	.word	0x0022	; ????
     a1c:	06 4b       	sbci	r16, 0xB6	; 182
     a1e:	08 42       	sbci	r16, 0x28	; 40
     a20:	80 0d       	add	r24, r0
     a22:	31 04       	cpc	r3, r1
     a24:	06 4c       	sbci	r16, 0xC6	; 198
     a26:	09 63       	ori	r16, 0x39	; 57
     a28:	80 0e       	add	r8, r16
     a2a:	71 49       	sbci	r23, 0x91	; 145
     a2c:	00 06       	cpc	r0, r16
     a2e:	4d 08       	sbc	r4, r13
     a30:	42 80       	ldd	r4, Z+2	; 0x02
     a32:	05 31       	cpi	r16, 0x15	; 21
     a34:	04 06       	cpc	r0, r20
     a36:	4e 07       	cpc	r20, r30
     a38:	22 80       	ldd	r2, Z+2	; 0x02
     a3a:	0d 21       	and	r16, r13
     a3c:	06 4f       	sbci	r16, 0xF6	; 246
     a3e:	09 62       	ori	r16, 0x29	; 41
     a40:	84 0d       	add	r24, r4
     a42:	31 28       	or	r3, r1
     a44:	00 06       	cpc	r0, r16
     a46:	50 07       	cpc	r21, r16
     a48:	22 80       	ldd	r2, Z+2	; 0x02
     a4a:	05 21       	and	r16, r5
     a4c:	06 51       	subi	r16, 0x16	; 22
     a4e:	09 43       	sbci	r16, 0x39	; 57
     a50:	80 0e       	add	r8, r16
     a52:	31 24       	eor	r3, r1
     a54:	01 06       	cpc	r0, r17
     a56:	52 08       	sbc	r5, r2
     a58:	42 80       	ldd	r4, Z+2	; 0x02
     a5a:	0d 31       	cpi	r16, 0x1D	; 29
     a5c:	04 06       	cpc	r0, r20
     a5e:	53 07       	cpc	r21, r19
     a60:	23 80       	ldd	r2, Z+3	; 0x03
     a62:	0d 31       	cpi	r16, 0x1D	; 29
     a64:	06 54       	subi	r16, 0x46	; 70
     a66:	07 62       	ori	r16, 0x27	; 39
     a68:	80 0d       	add	r24, r0
     a6a:	63 06       	cpc	r6, r19
     a6c:	55 07       	cpc	r21, r21
     a6e:	62 80       	ldd	r6, Z+2	; 0x02
     a70:	05 63       	ori	r16, 0x35	; 53
     a72:	06 56       	subi	r16, 0x66	; 102
     a74:	07 41       	sbci	r16, 0x17	; 23
     a76:	80 05       	cpc	r24, r0
     a78:	21 06       	cpc	r2, r17
     a7a:	58 0a       	sbc	r5, r24
     a7c:	64 80       	ldd	r6, Z+4	; 0x04
     a7e:	0e 11       	cpse	r16, r14
     a80:	49 89       	ldd	r20, Y+17	; 0x11
     a82:	02 06       	cpc	r0, r18
     a84:	5a 07       	cpc	r21, r26
     a86:	22 80       	ldd	r2, Z+2	; 0x02
     a88:	0d 21       	and	r16, r13
     a8a:	06 5b       	subi	r16, 0xB6	; 182
     a8c:	07 22       	and	r0, r23
     a8e:	80 0d       	add	r24, r0
     a90:	21 06       	cpc	r2, r17
     a92:	60 08       	sbc	r6, r0
     a94:	42 84       	ldd	r4, Z+10	; 0x0a
     a96:	49 b1       	in	r20, 0x09	; 9
     a98:	00 06       	cpc	r0, r16
     a9a:	61 09       	sbc	r22, r1
     a9c:	e2 84       	ldd	r14, Z+10	; 0x0a
     a9e:	49 11       	cpse	r20, r9
     aa0:	25 3d       	cpi	r18, 0xD5	; 213
     aa2:	06 62       	ori	r16, 0x26	; 38
     aa4:	0d e5       	ldi	r16, 0x5D	; 93
     aa6:	84 68       	ori	r24, 0x84	; 132
     aa8:	91 25       	eor	r25, r1
     aaa:	51 32       	cpi	r21, 0x21	; 33
     aac:	85 6d       	ori	r24, 0xD5	; 213
     aae:	00 06       	cpc	r0, r16
     ab0:	63 0d       	add	r22, r3
     ab2:	e6 88       	ldd	r14, Z+22	; 0x16
     ab4:	88 11       	cpse	r24, r8
     ab6:	25 96       	adiw	r28, 0x05	; 5
     ab8:	61 49       	sbci	r22, 0x91	; 145
     aba:	5b 01       	movw	r10, r22
     abc:	06 64       	ori	r16, 0x46	; 70
     abe:	0d e4       	ldi	r16, 0x4D	; 77
     ac0:	80 49       	sbci	r24, 0x90	; 144
     ac2:	21 65       	ori	r18, 0x51	; 81
     ac4:	93 92       	.word	0x9293	; ????
     ac6:	45 c9       	rjmp	.-3446   	; 0xfffffd52 <__eeprom_end+0xff7efd52>
     ac8:	00 06       	cpc	r0, r16
     aca:	65 0c       	add	r6, r5
     acc:	e5 80       	ldd	r14, Z+5	; 0x05
     ace:	58 33       	cpi	r21, 0x38	; 56
     ad0:	25 35       	cpi	r18, 0x55	; 85
     ad2:	b7 64       	ori	r27, 0x47	; 71
     ad4:	01 06       	cpc	r0, r17
     ad6:	66 0b       	sbc	r22, r22
     ad8:	e5 80       	ldd	r14, Z+5	; 0x05
     ada:	68 31       	cpi	r22, 0x18	; 24
     adc:	84 1d       	adc	r24, r4
     ade:	c5 00       	.word	0x00c5	; ????
     ae0:	06 67       	ori	r16, 0x76	; 118
     ae2:	0e 05       	cpc	r16, r14
     ae4:	85 78       	andi	r24, 0x85	; 133
     ae6:	a9 69       	ori	r26, 0x99	; 153
     ae8:	49 29       	or	r20, r9
     aea:	89 c4       	rjmp	.+2322   	; 0x13fe <__LOCK_REGION_LENGTH__+0xffe>
     aec:	12 00       	.word	0x0012	; ????
     aee:	06 68       	ori	r16, 0x86	; 134
     af0:	0e 05       	cpc	r16, r14
     af2:	85 78       	andi	r24, 0x85	; 133
     af4:	15 66       	ori	r17, 0x65	; 101
     af6:	5a 12       	cpse	r5, r26
     af8:	25 35       	cpi	r18, 0x55	; 85
     afa:	2d 0c       	add	r2, r13
     afc:	06 69       	ori	r16, 0x96	; 150
     afe:	0b e4       	ldi	r16, 0x4B	; 75
     b00:	80 58       	subi	r24, 0x80	; 128
     b02:	a3 44       	sbci	r26, 0x43	; 67
     b04:	52 b2       	in	r5, 0x12	; 18
     b06:	35 06       	cpc	r3, r21
     b08:	6a 0d       	add	r22, r10
     b0a:	03 85       	ldd	r16, Z+11	; 0x0b
     b0c:	58 91       	.word	0x9158	; ????
     b0e:	28 51       	subi	r18, 0x18	; 24
     b10:	12 55       	subi	r17, 0x52	; 82
     b12:	a2 08       	sbc	r10, r2
     b14:	06 6b       	ori	r16, 0xB6	; 182
     b16:	0c c4       	rjmp	.+2072   	; 0x1330 <__LOCK_REGION_LENGTH__+0xf30>
     b18:	80 48       	sbci	r24, 0x80	; 128
     b1a:	17 65       	ori	r17, 0x57	; 87
     b1c:	51 16       	cp	r5, r17
     b1e:	65 00       	.word	0x0065	; ????
     b20:	06 6c       	ori	r16, 0xC6	; 198
     b22:	09 62       	ori	r16, 0x29	; 41
     b24:	80 27       	eor	r24, r16
     b26:	93 28       	or	r9, r3
     b28:	00 06       	cpc	r0, r16
     b2a:	6d 0d       	add	r22, r13
     b2c:	86 80       	ldd	r8, Z+6	; 0x06
     b2e:	78 13       	cpse	r23, r24
     b30:	25 8b       	std	Z+21, r18	; 0x15
     b32:	0e 44       	sbci	r16, 0x4E	; 78
     b34:	09 00       	.word	0x0009	; ????
     b36:	06 6e       	ori	r16, 0xE6	; 230
     b38:	0c 88       	ldd	r0, Y+20	; 0x14
     b3a:	80 99       	sbic	0x10, 0	; 16
     b3c:	11 cb       	rjmp	.-2526   	; 0x160 <__SREG__+0x121>
     b3e:	6b 32       	cpi	r22, 0x2B	; 43
     b40:	2c 00       	.word	0x002c	; ????
     b42:	06 6f       	ori	r16, 0xF6	; 246
     b44:	10 e7       	ldi	r17, 0x70	; 112
     b46:	80 85       	ldd	r24, Z+8	; 0x08
     b48:	29 46       	sbci	r18, 0x69	; 105
     b4a:	52 a4       	ldd	r5, Z+42	; 0x2a
     b4c:	0d e9       	ldi	r16, 0x9D	; 157
     b4e:	a6 0c       	add	r10, r6
     b50:	11 00       	.word	0x0011	; ????
     b52:	06 70       	andi	r16, 0x06	; 6
     b54:	07 41       	sbci	r16, 0x17	; 23
     b56:	80 0d       	add	r24, r0
     b58:	21 06       	cpc	r2, r17
     b5a:	71 0b       	sbc	r23, r17
     b5c:	23 81       	ldd	r18, Z+3	; 0x03
     b5e:	38 33       	cpi	r19, 0x38	; 56
     b60:	88 51       	subi	r24, 0x18	; 24
     b62:	2f 00       	.word	0x002f	; ????
     b64:	06 79       	andi	r16, 0x96	; 150
     b66:	12 e9       	ldi	r17, 0x92	; 146
     b68:	80 98       	cbi	0x10, 0	; 16
     b6a:	97 23       	and	r25, r23
     b6c:	3a 90       	ld	r3, -Y
     b6e:	64 91       	lpm	r22, Z
     b70:	94 c4       	rjmp	.+2344   	; 0x149a <__LOCK_REGION_LENGTH__+0x109a>
     b72:	73 34       	cpi	r23, 0x43	; 67
     b74:	4c 00       	.word	0x004c	; ????
     b76:	06 7e       	andi	r16, 0xE6	; 230
     b78:	0f e8       	ldi	r16, 0x8F	; 143
     b7a:	80 96       	adiw	r24, 0x20	; 32
     b7c:	11 cb       	rjmp	.-2526   	; 0x1a0 <__SREG__+0x161>
     b7e:	6b 32       	cpi	r22, 0x2B	; 43
     b80:	ec 68       	ori	r30, 0x8C	; 140
     b82:	12 67       	ori	r17, 0x72	; 114
     b84:	00 06       	cpc	r0, r16
     b86:	86 13       	cpse	r24, r22
     b88:	27 81       	ldd	r18, Z+7	; 0x07
     b8a:	74 b3       	in	r23, 0x14	; 20
     b8c:	03 e2       	ldi	r16, 0x23	; 35
     b8e:	90 88       	ldd	r9, Z+16	; 0x10
     b90:	6a 32       	cpi	r22, 0x2A	; 42
     b92:	24 91       	lpm	r18, Z
     b94:	96 03       	fmuls	r17, r22
     b96:	43 02       	muls	r20, r19
     b98:	06 88       	ldd	r0, Z+22	; 0x16
     b9a:	0e 25       	eor	r16, r14
     b9c:	81 58       	subi	r24, 0x81	; 129
     b9e:	13 6a       	ori	r17, 0xA3	; 163
     ba0:	3a 94       	dec	r3
     ba2:	a6 da       	rcall	.-2740   	; 0xf0 <__SREG__+0xb1>
     ba4:	a0 00       	.word	0x00a0	; ????
     ba6:	06 91       	elpm	r16, Z
     ba8:	0c 43       	sbci	r16, 0x3C	; 60
     baa:	81 35       	cpi	r24, 0x51	; 81
     bac:	13 29       	or	r17, r3
     bae:	6a d4       	rcall	.+2260   	; 0x1484 <__LOCK_REGION_LENGTH__+0x1084>
     bb0:	52 02       	muls	r21, r18
     bb2:	06 95       	lsr	r16
     bb4:	0a 03       	fmul	r16, r18
     bb6:	81 33       	cpi	r24, 0x31	; 49
     bb8:	d5 a5       	ldd	r29, Z+45	; 0x2d
     bba:	aa 00       	.word	0x00aa	; ????
     bbc:	06 98       	cbi	0x00, 6	; 0
     bbe:	0b 43       	sbci	r16, 0x3B	; 59
     bc0:	81 45       	sbci	r24, 0x51	; 81
     bc2:	93 a3       	std	Z+35, r25	; 0x23
     bc4:	51 4b       	sbci	r21, 0xB1	; 177
     bc6:	09 06       	cpc	r0, r25
     bc8:	a1 0f       	add	r26, r17
     bca:	c9 80       	ldd	r12, Y+1	; 0x01
     bcc:	98 2d       	mov	r25, r8
     bce:	27 c5       	rjmp	.+2638   	; 0x161e <__LOCK_REGION_LENGTH__+0x121e>
     bd0:	48 1d       	adc	r20, r8
     bd2:	d4 68       	ori	r29, 0x84	; 132
     bd4:	98 00       	.word	0x0098	; ????
     bd6:	06 a4       	ldd	r0, Z+46	; 0x2e
     bd8:	13 29       	or	r17, r3
     bda:	81 98       	cbi	0x10, 1	; 16
     bdc:	9d 03       	fmulsu	r17, r21
     bde:	49 4e       	sbci	r20, 0xE9	; 233
     be0:	92 93       	st	-Z, r25
     be2:	62 a4       	ldd	r6, Z+42	; 0x2a
     be4:	0e 6a       	ori	r16, 0xAE	; 174
     be6:	34 4c       	sbci	r19, 0xC4	; 196
     be8:	00 06       	cpc	r0, r16
     bea:	a9 11       	cpse	r26, r9
     bec:	09 81       	ldd	r16, Y+1	; 0x01
     bee:	98 8f       	std	Y+24, r25	; 0x18
     bf0:	a4 73       	andi	r26, 0x34	; 52
     bf2:	0e 95 93 38 	call	0x407126	; 0x407126 <__TEXT_REGION_LENGTH__+0x307126>
     bf6:	51 a3       	std	Z+33, r21	; 0x21
     bf8:	61 02       	muls	r22, r17
     bfa:	06 aa       	std	Z+54, r0	; 0x36
     bfc:	16 ed       	ldi	r17, 0xD6	; 214
     bfe:	80 d8       	rcall	.-3840   	; 0xfffffd00 <__eeprom_end+0xff7efd00>
     c00:	9d 63       	ori	r25, 0x3D	; 61
     c02:	3a 90       	ld	r3, -Y
     c04:	e5 48       	sbci	r30, 0x85	; 133
     c06:	36 0c       	add	r3, r6
     c08:	4a 8e       	std	Y+26, r4	; 0x1a
     c0a:	25 3a       	cpi	r18, 0xA5	; 165
     c0c:	96 0c       	add	r9, r6
     c0e:	07 05       	cpc	r16, r7
     c10:	06 af       	std	Z+62, r16	; 0x3e
     c12:	13 29       	or	r17, r3
     c14:	81 98       	cbi	0x10, 1	; 16
     c16:	8f c4       	rjmp	.+2334   	; 0x1536 <__LOCK_REGION_LENGTH__+0x1136>
     c18:	f2 90       	ld	r15, -Z
     c1a:	e6 88       	ldd	r14, Z+22	; 0x16
     c1c:	94 46       	sbci	r25, 0x64	; 100
     c1e:	71 a2       	std	Z+33, r7	; 0x21
     c20:	46 c3       	rjmp	.+1676   	; 0x12ae <__LOCK_REGION_LENGTH__+0xeae>
     c22:	04 06       	cpc	r0, r20
     c24:	b5 10       	cpse	r11, r5
     c26:	a6 81       	ldd	r26, Z+6	; 0x06
     c28:	65 a9       	ldd	r22, Z+53	; 0x35
     c2a:	e6 60       	ori	r30, 0x06	; 6
     c2c:	da 2a       	or	r13, r26
     c2e:	1a a7       	std	Y+42, r17	; 0x2a
     c30:	68 48       	sbci	r22, 0x88	; 136
     c32:	00 06       	cpc	r0, r16
     c34:	ba 0c       	add	r11, r10
     c36:	c7 80       	ldd	r12, Z+7	; 0x07
     c38:	75 ad       	ldd	r23, Z+61	; 0x3d
     c3a:	5a b7       	in	r21, 0x3a	; 58
     c3c:	68 88       	ldd	r6, Y+16	; 0x10
     c3e:	00 06       	cpc	r0, r16
     c40:	be 0e       	add	r11, r30
     c42:	a7 80       	ldd	r10, Z+7	; 0x07
     c44:	78 25       	eor	r23, r8
     c46:	46 52       	subi	r20, 0x26	; 38
     c48:	25 99       	sbic	0x04, 5	; 4
     c4a:	86 21       	and	r24, r6
     c4c:	01 06       	cpc	r0, r17
     c4e:	c0 0f       	add	r28, r16
     c50:	24 81       	ldd	r18, Z+4	; 0x04
     c52:	48 23       	and	r20, r24
     c54:	65 39       	cpi	r22, 0x95	; 149
     c56:	20 0d       	add	r18, r0
     c58:	91 94       	neg	r9
     c5a:	28 00       	.word	0x0028	; ????
     c5c:	06 c1       	rjmp	.+524    	; 0xe6a <__LOCK_REGION_LENGTH__+0xa6a>
     c5e:	0c a4       	ldd	r0, Y+44	; 0x2c
     c60:	80 48       	sbci	r24, 0x80	; 128
     c62:	23 29       	or	r18, r3
     c64:	91 94       	neg	r9
     c66:	28 00       	.word	0x0028	; ????
     c68:	06 c2       	rjmp	.+1036   	; 0x1076 <__LOCK_REGION_LENGTH__+0xc76>
     c6a:	0f 24       	eor	r0, r15
     c6c:	81 48       	sbci	r24, 0x81	; 129
     c6e:	a3 84       	ldd	r10, Z+11	; 0x0b
     c70:	39 20       	and	r3, r9
     c72:	29 91       	ld	r18, Y+
     c74:	94 28       	or	r9, r4
     c76:	00 06       	cpc	r0, r16
     c78:	c3 0d       	add	r28, r3
     c7a:	e4 80       	ldd	r14, Z+4	; 0x04
     c7c:	48 b3       	in	r20, 0x18	; 24
     c7e:	4a 4a       	sbci	r20, 0xAA	; 170
     c80:	24 25       	eor	r18, r4
     c82:	0a 00       	.word	0x000a	; ????
     c84:	06 c6       	rjmp	.+3084   	; 0x1892 <__LOCK_REGION_LENGTH__+0x1492>
     c86:	0f 44       	sbci	r16, 0x4F	; 79
     c88:	85 65       	ori	r24, 0x55	; 85
     c8a:	55 07       	cpc	r21, r21
     c8c:	94 48       	sbci	r25, 0x84	; 132
     c8e:	4a b6       	in	r4, 0x3a	; 58
     c90:	28 91       	.word	0x9128	; ????
     c92:	00 06       	cpc	r0, r16
     c94:	c7 10       	cpse	r12, r7
     c96:	64 85       	ldd	r22, Z+12	; 0x0c
     c98:	65 23       	and	r22, r21
     c9a:	49 39       	cpi	r20, 0x99	; 153
     c9c:	a0 44       	sbci	r26, 0x40	; 64
     c9e:	52 b2       	in	r5, 0x12	; 18
     ca0:	45 89       	ldd	r20, Z+21	; 0x15
     ca2:	04 06       	cpc	r0, r20
     ca4:	c9 0f       	add	r28, r25
     ca6:	24 85       	ldd	r18, Z+12	; 0x0c
     ca8:	66 93       	lac	Z, r22
     caa:	03 4a       	sbci	r16, 0xA3	; 163
     cac:	24 25       	eor	r18, r4
     cae:	5b 94       	des	5
     cb0:	48 00       	.word	0x0048	; ????
     cb2:	06 cc       	rjmp	.-2036   	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     cb4:	10 07       	cpc	r17, r16
     cb6:	81 85       	ldd	r24, Z+9	; 0x09
     cb8:	2b 46       	sbci	r18, 0x6B	; 107
     cba:	b5 28       	or	r11, r5
     cbc:	cb 86       	std	Y+11, r12	; 0x0b
     cbe:	74 93       	xch	Z, r23
     cc0:	26 00       	.word	0x0026	; ????
     cc2:	06 ce       	rjmp	.-1012   	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     cc4:	11 27       	eor	r17, r17
     cc6:	81 85       	ldd	r24, Z+9	; 0x09
     cc8:	23 47       	sbci	r18, 0x73	; 115
     cca:	62 54       	subi	r22, 0x42	; 66
     ccc:	8b b2       	in	r8, 0x1b	; 27
     cce:	6c 48       	sbci	r22, 0x8C	; 140
     cd0:	37 69       	ori	r19, 0x97	; 151
     cd2:	02 06       	cpc	r0, r18
     cd4:	d2 0c       	add	r13, r2
     cd6:	89 84       	ldd	r8, Y+9	; 0x09
     cd8:	b8 25       	eor	r27, r8
     cda:	e7 40       	sbci	r30, 0x07	; 7
     cdc:	8e 0c       	add	r8, r14
     cde:	07 06       	cpc	r0, r23
     ce0:	d3 10       	cpse	r13, r3
     ce2:	e9 84       	ldd	r14, Y+9	; 0x09
     ce4:	b8 95       	.word	0x95b8	; ????
     ce6:	03 39       	cpi	r16, 0x93	; 147
     ce8:	92 43       	sbci	r25, 0x32	; 50
     cea:	72 0e       	add	r7, r18
     cec:	e4 c8       	rjmp	.-3640   	; 0xfffffeb6 <__eeprom_end+0xff7efeb6>
     cee:	70 06       	cpc	r7, r16
     cf0:	d4 07       	cpc	r29, r20
     cf2:	21 84       	ldd	r2, Z+9	; 0x09
     cf4:	38 11       	cpse	r19, r8
     cf6:	06 d5       	rcall	.+2572   	; 0x1704 <__LOCK_REGION_LENGTH__+0x1304>
     cf8:	0c a4       	ldd	r0, Y+44	; 0x2c
     cfa:	80 48       	sbci	r24, 0x80	; 128
     cfc:	23 29       	or	r18, r3
     cfe:	91 94       	neg	r9
     d00:	28 00       	.word	0x0028	; ????
     d02:	06 f0       	brts	.+0      	; 0xd04 <__LOCK_REGION_LENGTH__+0x904>
     d04:	0b 84       	ldd	r0, Y+11	; 0x0b
     d06:	84 68       	ori	r24, 0x84	; 132
     d08:	a3 44       	sbci	r26, 0x43	; 67
     d0a:	52 a2       	std	Z+34, r5	; 0x22
     d0c:	00 06       	cpc	r0, r16
     d0e:	f1 09       	sbc	r31, r1
     d10:	e2 84       	ldd	r14, Z+10	; 0x0a
     d12:	49 11       	cpse	r20, r9
     d14:	25 3d       	cpi	r18, 0xD5	; 213
     d16:	06 f2       	brts	.-128    	; 0xc98 <__LOCK_REGION_LENGTH__+0x898>
     d18:	0d e5       	ldi	r16, 0x5D	; 93
     d1a:	84 68       	ori	r24, 0x84	; 132
     d1c:	91 25       	eor	r25, r1
     d1e:	51 32       	cpi	r21, 0x21	; 33
     d20:	85 6d       	ori	r24, 0xD5	; 213
     d22:	00 06       	cpc	r0, r16
     d24:	f3 0e       	add	r15, r19
     d26:	e7 84       	ldd	r14, Z+15	; 0x0f
     d28:	88 91       	.word	0x9188	; ????
     d2a:	25 15       	cp	r18, r5
     d2c:	25 19       	sub	r18, r5
     d2e:	a4 b8       	out	0x04, r10	; 4
     d30:	15 06       	cpc	r1, r21
     d32:	f4 0e       	add	r15, r20
     d34:	06 85       	ldd	r16, Z+14	; 0x0e
     d36:	88 11       	cpse	r24, r8
     d38:	0d a3       	std	Y+37, r16	; 0x25
     d3a:	71 50       	subi	r23, 0x01	; 1
     d3c:	d2 22       	and	r13, r18
     d3e:	00 06       	cpc	r0, r16
     d40:	f5 10       	cpse	r15, r5
     d42:	06 81       	ldd	r16, Z+6	; 0x06
     d44:	68 95       	.word	0x9568	; ????
     d46:	6a 4a       	sbci	r22, 0xAA	; 170
     d48:	54 09       	sbc	r21, r4
     d4a:	4d 49       	sbci	r20, 0x9D	; 157
     d4c:	a2 24       	eor	r10, r2
     d4e:	00 06       	cpc	r0, r16
     d50:	f6 0c       	add	r15, r6
     d52:	e4 84       	ldd	r14, Z+12	; 0x0c
     d54:	68 33       	cpi	r22, 0x38	; 56
     d56:	64 e1       	ldi	r22, 0x14	; 20
     d58:	62 ca       	rjmp	.-2876   	; 0x21e <__trampolines_start+0x22>
     d5a:	00 06       	cpc	r0, r16
     d5c:	f7 0e       	add	r15, r23
     d5e:	05 85       	ldd	r16, Z+13	; 0x0d
     d60:	78 a9       	ldd	r23, Y+48	; 0x30
     d62:	69 49       	sbci	r22, 0x99	; 153
     d64:	29 89       	ldd	r18, Y+17	; 0x11
     d66:	c4 12       	cpse	r12, r20
     d68:	00 06       	cpc	r0, r16
     d6a:	f8 0e       	add	r15, r24
     d6c:	05 85       	ldd	r16, Z+13	; 0x0d
     d6e:	78 15       	cp	r23, r8
     d70:	66 5a       	subi	r22, 0xA6	; 166
     d72:	12 25       	eor	r17, r2
     d74:	35 2d       	mov	r19, r5
     d76:	0c 06       	cpc	r0, r28
     d78:	f9 0b       	sbc	r31, r25
     d7a:	e4 80       	ldd	r14, Z+4	; 0x04
     d7c:	58 a3       	std	Y+32, r21	; 0x20
     d7e:	44 52       	subi	r20, 0x24	; 36
     d80:	b2 35       	cpi	r27, 0x52	; 82
     d82:	06 ff       	sbrs	r16, 6
     d84:	09 c3       	rjmp	.+1554   	; 0x1398 <__LOCK_REGION_LENGTH__+0xf98>
     d86:	80 35       	cpi	r24, 0x50	; 80
     d88:	d5 a5       	ldd	r29, Z+45	; 0x2d
     d8a:	04 20       	and	r0, r4
     d8c:	09 07       	cpc	r16, r25
     d8e:	00 80       	ld	r0, Z
     d90:	18 01       	movw	r2, r16
     d92:	20 0a       	sbc	r2, r16
     d94:	07 00       	.word	0x0007	; ????
     d96:	80 18       	sub	r8, r0
     d98:	01 20       	and	r0, r1
     d9a:	0b 07       	cpc	r16, r27
     d9c:	00 80       	ld	r0, Z
     d9e:	08 01       	movw	r0, r16
     da0:	20 0c       	add	r2, r0
     da2:	07 00       	.word	0x0007	; ????
     da4:	80 08       	sbc	r8, r0
     da6:	01 20       	and	r0, r1
     da8:	0d 07       	cpc	r16, r29
     daa:	00 80       	ld	r0, Z
     dac:	08 01       	movw	r0, r16
     dae:	20 0e       	add	r2, r16
     db0:	07 00       	.word	0x0007	; ????
     db2:	80 08       	sbc	r8, r0
     db4:	01 20       	and	r0, r1
     db6:	0f 07       	cpc	r16, r31
     db8:	00 80       	ld	r0, Z
     dba:	08 01       	movw	r0, r16
     dbc:	20 18       	sub	r2, r0
     dbe:	07 41       	sbci	r16, 0x17	; 23
     dc0:	84 3e       	cpi	r24, 0xE4	; 228
     dc2:	21 20       	and	r2, r1
     dc4:	19 07       	cpc	r17, r25
     dc6:	41 84       	ldd	r4, Z+9	; 0x09
     dc8:	3d 21       	and	r19, r13
     dca:	20 1c       	adc	r2, r0
     dcc:	09 63       	ori	r16, 0x39	; 57
     dce:	84 5d       	subi	r24, 0xD4	; 212
     dd0:	53 51       	subi	r21, 0x13	; 19
     dd2:	02 20       	and	r0, r2
     dd4:	1d 0a       	sbc	r1, r29
     dd6:	63 84       	ldd	r6, Z+11	; 0x0b
     dd8:	5c 91       	ld	r21, X
     dda:	28 15       	cp	r18, r8
     ddc:	00 20       	and	r0, r0
     dde:	1e 0a       	sbc	r1, r30
     de0:	63 84       	ldd	r6, Z+11	; 0x0b
     de2:	56 91       	elpm	r21, Z
     de4:	28 15       	cp	r18, r8
     de6:	00 20       	and	r0, r0
     de8:	22 0a       	sbc	r2, r18
     dea:	63 84       	ldd	r6, Z+11	; 0x0b
     dec:	58 93       	.word	0x9358	; ????
     dee:	0c 0a       	sbc	r0, r28
     df0:	00 20       	and	r0, r0
     df2:	26 08       	sbc	r2, r6
     df4:	27 84       	ldd	r2, Z+15	; 0x0f
     df6:	98 11       	cpse	r25, r8
     df8:	15 20       	and	r1, r5
     dfa:	32 07       	cpc	r19, r18
     dfc:	61 84       	ldd	r6, Z+9	; 0x09
     dfe:	3d 31       	cpi	r19, 0x1D	; 29
     e00:	20 33       	cpi	r18, 0x30	; 48
     e02:	07 62       	ori	r16, 0x27	; 39
     e04:	84 4d       	sbci	r24, 0xD4	; 212
     e06:	71 20       	and	r7, r1
     e08:	39 09       	sbc	r19, r9
     e0a:	a2 84       	ldd	r10, Z+10	; 0x0a
     e0c:	38 a3       	std	Y+32, r19	; 0x20
     e0e:	94 02       	muls	r25, r20
     e10:	20 3a       	cpi	r18, 0xA0	; 160
     e12:	0a a2       	std	Y+34, r0	; 0x22
     e14:	80 38       	cpi	r24, 0x80	; 128
     e16:	11 25       	eor	r17, r1
     e18:	89 02       	muls	r24, r25
     e1a:	20 44       	sbci	r18, 0x40	; 64
     e1c:	0b c5       	rjmp	.+2582   	; 0x1834 <__LOCK_REGION_LENGTH__+0x1434>
     e1e:	80 59       	subi	r24, 0x90	; 144
     e20:	99 15       	cp	r25, r9
     e22:	b3 22       	and	r11, r19
     e24:	00 20       	and	r0, r0
     e26:	70 0a       	sbc	r7, r16
     e28:	83 80       	ldd	r8, Z+3	; 0x03
     e2a:	3b 31       	cpi	r19, 0x1B	; 27
     e2c:	24 ca       	rjmp	.-3000   	; 0x276 <__trampolines_start+0x7a>
     e2e:	10 20       	and	r1, r0
     e30:	74 0b       	sbc	r23, r20
     e32:	84 80       	ldd	r8, Z+4	; 0x04
     e34:	4b 15       	cp	r20, r11
     e36:	29 43       	sbci	r18, 0x39	; 57
     e38:	94 00       	.word	0x0094	; ????
     e3a:	20 75       	andi	r18, 0x50	; 80
     e3c:	09 83       	std	Y+1, r16	; 0x01
     e3e:	84 4b       	sbci	r24, 0xB4	; 180
     e40:	71 1a       	sub	r7, r17
     e42:	02 20       	and	r0, r2
     e44:	76 0a       	sbc	r7, r22
     e46:	83 84       	ldd	r8, Z+11	; 0x0b
     e48:	4b a1       	ldd	r20, Y+35	; 0x23
     e4a:	0c c9       	rjmp	.-3560   	; 0x64 <__SREG__+0x25>
     e4c:	10 20       	and	r1, r0
     e4e:	77 0a       	sbc	r7, r23
     e50:	83 84       	ldd	r8, Z+11	; 0x0b
     e52:	4b b1       	in	r20, 0x0b	; 11
     e54:	44 49       	sbci	r20, 0x94	; 148
     e56:	04 20       	and	r0, r4
     e58:	78 0a       	sbc	r7, r24
     e5a:	83 84       	ldd	r8, Z+11	; 0x0b
     e5c:	5b b1       	in	r21, 0x0b	; 11
     e5e:	54 86       	std	Z+12, r5	; 0x0c
     e60:	00 20       	and	r0, r0
     e62:	79 0b       	sbc	r23, r25
     e64:	83 80       	ldd	r8, Z+3	; 0x03
     e66:	3b 31       	cpi	r19, 0x1B	; 27
     e68:	24 43       	sbci	r18, 0x34	; 52
     e6a:	92 00       	.word	0x0092	; ????
     e6c:	20 80       	ld	r2, Z
     e6e:	0a 83       	std	Y+2, r16	; 0x02
     e70:	80 38       	cpi	r24, 0x80	; 128
     e72:	31 24       	eor	r3, r1
     e74:	ca 10       	cpse	r12, r10
     e76:	20 81       	ld	r18, Z
     e78:	08 82       	st	Y, r0
     e7a:	84 48       	sbci	r24, 0x84	; 132
     e7c:	a1 34       	cpi	r26, 0x41	; 65
     e7e:	20 82       	st	Z, r2
     e80:	0a 83       	std	Y+2, r16	; 0x02
     e82:	80 38       	cpi	r24, 0x80	; 128
     e84:	31 25       	eor	r19, r1
     e86:	c9 00       	.word	0x00c9	; ????
     e88:	20 83       	st	Z, r18
     e8a:	0a 83       	std	Y+2, r16	; 0x02
     e8c:	84 48       	sbci	r24, 0x84	; 132
     e8e:	b1 64       	ori	r27, 0x41	; 65
     e90:	43 00       	.word	0x0043	; ????
     e92:	20 84       	ldd	r2, Z+8	; 0x08
     e94:	0b 84       	ldd	r0, Y+11	; 0x0b
     e96:	80 48       	sbci	r24, 0x80	; 128
     e98:	15 29       	or	r17, r5
     e9a:	43 94       	inc	r4
     e9c:	00 20       	and	r0, r0
     e9e:	85 09       	sbc	r24, r5
     ea0:	83 84       	ldd	r8, Z+11	; 0x0b
     ea2:	48 71       	andi	r20, 0x18	; 24
     ea4:	1a 02       	muls	r17, r26
     ea6:	20 86       	std	Z+8, r2	; 0x08
     ea8:	0a 83       	std	Y+2, r16	; 0x02
     eaa:	84 48       	sbci	r24, 0x84	; 132
     eac:	a1 0c       	add	r10, r1
     eae:	c9 10       	cpse	r12, r9
     eb0:	20 87       	std	Z+8, r18	; 0x08
     eb2:	0a 83       	std	Y+2, r16	; 0x02
     eb4:	84 48       	sbci	r24, 0x84	; 132
     eb6:	b1 44       	sbci	r27, 0x41	; 65
     eb8:	49 04       	cpc	r4, r9
     eba:	20 88       	ldd	r2, Z+16	; 0x10
     ebc:	0a 83       	std	Y+2, r16	; 0x02
     ebe:	84 58       	subi	r24, 0x84	; 132
     ec0:	b1 54       	subi	r27, 0x41	; 65
     ec2:	86 00       	.word	0x0086	; ????
     ec4:	20 89       	ldd	r18, Z+16	; 0x10
     ec6:	0b 83       	std	Y+3, r16	; 0x03
     ec8:	80 38       	cpi	r24, 0x80	; 128
     eca:	31 24       	eor	r3, r1
     ecc:	43 92       	.word	0x9243	; ????
     ece:	00 21       	and	r16, r0
     ed0:	22 0a       	sbc	r2, r18
     ed2:	65 84       	ldd	r6, Z+13	; 0x0d
     ed4:	7d b1       	in	r23, 0x0d	; 13
     ed6:	28 a5       	ldd	r18, Y+40	; 0x28
     ed8:	01 22       	and	r0, r17
     eda:	02 0d       	add	r16, r2
     edc:	05 85       	ldd	r16, Z+13	; 0x0d
     ede:	68 33       	cpi	r22, 0x38	; 56
     ee0:	46 8a       	std	Z+22, r4	; 0x16
     ee2:	b4 d9       	rcall	.-3224   	; 0x24c <__trampolines_start+0x50>
     ee4:	92 05       	cpc	r25, r2
     ee6:	22 0f       	add	r18, r18
     ee8:	0a 26       	eor	r0, r26
     eea:	85 87       	std	Z+13, r24	; 0x0d
     eec:	71 08       	sbc	r7, r1
     eee:	fd 31       	cpi	r31, 0x1D	; 29
     ef0:	22 11       	cpse	r18, r2
     ef2:	0e 46       	sbci	r16, 0x6E	; 110
     ef4:	81 76       	andi	r24, 0x61	; 97
     ef6:	71 50       	subi	r23, 0x01	; 1
     ef8:	e3 6a       	ori	r30, 0xA3	; 163
     efa:	58 14       	cp	r5, r8
     efc:	87 01       	movw	r16, r14
     efe:	22 12       	cpse	r2, r18
     f00:	08 25       	eor	r16, r8
     f02:	84 6b       	ori	r24, 0xB4	; 180
     f04:	31 08       	sbc	r3, r1
     f06:	22 15       	cp	r18, r2
     f08:	0b 03       	fmul	r16, r19
     f0a:	89 77       	andi	r24, 0x79	; 121
     f0c:	55 89       	ldd	r21, Z+21	; 0x15
     f0e:	2a 51       	subi	r18, 0x1A	; 26
     f10:	09 22       	and	r0, r25
     f12:	1a 0c       	add	r1, r10
     f14:	06 81       	ldd	r16, Z+6	; 0x06
     f16:	78 db       	rcall	.-2320   	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     f18:	98 48       	sbci	r25, 0x88	; 136
     f1a:	99 68       	ori	r25, 0x89	; 137
     f1c:	02 22       	and	r0, r18
     f1e:	1e 13       	cpse	r17, r30
     f20:	cb 84       	ldd	r12, Y+11	; 0x0b
     f22:	b8 b3       	in	r27, 0x18	; 24
     f24:	2d 59       	subi	r18, 0x9D	; 157
     f26:	12 25       	eor	r17, r2
     f28:	61 28       	or	r6, r1
     f2a:	86 5a       	subi	r24, 0xA6	; 166
     f2c:	12 45       	sbci	r17, 0x52	; 82
     f2e:	db 02       	muls	r29, r27
     f30:	22 2b       	or	r18, r18
     f32:	0b 64       	ori	r16, 0x4B	; 75
     f34:	81 36       	cpi	r24, 0x61	; 97
     f36:	a5 64       	ori	r26, 0x45	; 69
     f38:	fd 49       	sbci	r31, 0x9D	; 157
     f3a:	02 22       	and	r0, r18
     f3c:	48 09       	sbc	r20, r8
     f3e:	a5 84       	ldd	r10, Z+13	; 0x0d
     f40:	69 a1       	ldd	r22, Y+33	; 0x21
     f42:	1e 07       	cpc	r17, r30
     f44:	22 60       	ori	r18, 0x02	; 2
     f46:	0c a5       	ldd	r16, Y+44	; 0x2c
     f48:	84 69       	ori	r24, 0x94	; 148
     f4a:	97 0c       	add	r9, r7
     f4c:	52 34       	cpi	r21, 0x42	; 66
     f4e:	8c 00       	.word	0x008c	; ????
     f50:	22 64       	ori	r18, 0x42	; 66
     f52:	0b c5       	rjmp	.+2582   	; 0x196a <__LOCK_REGION_LENGTH__+0x156a>
     f54:	80 68       	ori	r24, 0x80	; 128
     f56:	37 68       	ori	r19, 0x87	; 135
     f58:	aa 3a       	cpi	r26, 0xAA	; 170
     f5a:	08 22       	and	r0, r24
     f5c:	65 0c       	add	r6, r5
     f5e:	c5 80       	ldd	r12, Z+5	; 0x05
     f60:	69 a3       	std	Y+33, r22	; 0x21
     f62:	4a 4b       	sbci	r20, 0xBA	; 186
     f64:	8e 0c       	add	r8, r14
     f66:	02 fb       	bst	r16, 2
     f68:	50 0b       	sbc	r21, r16
     f6a:	23 81       	ldd	r18, Z+3	; 0x03
     f6c:	38 33       	cpi	r19, 0x38	; 56
     f6e:	88 51       	subi	r24, 0x18	; 24
     f70:	2f 00       	.word	0x002f	; ????
     f72:	fb 51       	subi	r31, 0x1B	; 27
     f74:	0b 23       	and	r16, r27
     f76:	81 38       	cpi	r24, 0x81	; 129
     f78:	35 84       	ldd	r3, Z+13	; 0x0d
     f7a:	51 b7       	in	r21, 0x31	; 49
     f7c:	00 fb       	bst	r16, 0
     f7e:	56 11       	cpse	r21, r6
     f80:	c9 80       	ldd	r12, Y+1	; 0x01
     f82:	95 91       	lpm	r25, Z+
     f84:	03 3a       	cpi	r16, 0xA3	; 163
     f86:	90 0c       	add	r9, r0
     f88:	43 0e       	add	r4, r19
     f8a:	27 39       	cpi	r18, 0x97	; 151
     f8c:	10 02       	muls	r17, r16
     f8e:	fb 57       	subi	r31, 0x7B	; 123
     f90:	11 ca       	rjmp	.-3038   	; 0x3b4 <__trampolines_end+0x11c>
     f92:	80 a5       	ldd	r24, Z+40	; 0x28
     f94:	91 03       	fmuls	r17, r17
     f96:	49 0e       	add	r4, r25
     f98:	44 c3       	rjmp	.+1672   	; 0x1622 <__LOCK_REGION_LENGTH__+0x1222>
     f9a:	1d 4e       	sbci	r17, 0xED	; 237
     f9c:	72 24       	eor	r7, r2
     f9e:	05 fb       	bst	r16, 5
     fa0:	58 0b       	sbc	r21, r24
     fa2:	e3 80       	ldd	r14, Z+3	; 0x03
     fa4:	35 55       	subi	r19, 0x55	; 85
     fa6:	1a 93       	st	-Y, r17
     fa8:	0a 00       	.word	0x000a	; ????
     faa:	fb 59       	subi	r31, 0x9B	; 155
     fac:	0d c4       	rjmp	.+2074   	; 0x17c8 <__LOCK_REGION_LENGTH__+0x13c8>
     fae:	80 45       	sbci	r24, 0x50	; 80
     fb0:	95 25       	eor	r25, r5
     fb2:	43 98       	cbi	0x08, 3	; 8
     fb4:	44 11       	cpse	r20, r4
     fb6:	00 fb       	bst	r16, 0
     fb8:	66 12       	cpse	r6, r22
     fba:	e9 80       	ldd	r14, Y+1	; 0x01
     fbc:	98 97       	sbiw	r26, 0x28	; 40
     fbe:	23 3a       	cpi	r18, 0xA3	; 163
     fc0:	90 64       	ori	r25, 0x40	; 64
     fc2:	91 94       	neg	r9
     fc4:	c4 73       	andi	r28, 0x34	; 52
     fc6:	34 4c       	sbci	r19, 0xC4	; 196
     fc8:	00 fb       	bst	r16, 0
     fca:	67 10       	cpse	r6, r7
     fcc:	aa 80       	ldd	r10, Y+2	; 0x02
     fce:	a9 97       	sbiw	r28, 0x29	; 41
     fd0:	84 d1       	rcall	.+776    	; 0x12da <__LOCK_REGION_LENGTH__+0xeda>
     fd2:	98 03       	fmulsu	r17, r16
     fd4:	89 2a       	or	r8, r25
     fd6:	0d 53       	subi	r16, 0x3D	; 61
     fd8:	00 fb       	bst	r16, 0
     fda:	68 0c       	add	r6, r8
     fdc:	03 81       	ldd	r16, Z+3	; 0x03
     fde:	38 11       	cpse	r19, r8
     fe0:	29 72       	andi	r18, 0x29	; 41
     fe2:	14 2d       	mov	r17, r4
     fe4:	00 fb       	bst	r16, 0
     fe6:	69 0d       	add	r22, r9
     fe8:	e4 80       	ldd	r14, Z+4	; 0x04
     fea:	48 11       	cpse	r20, r8
     fec:	2a 3b       	cpi	r18, 0xBA	; 186
     fee:	90 25       	eor	r25, r0
     ff0:	4a 00       	.word	0x004a	; ????
     ff2:	fb 6a       	ori	r31, 0xAB	; 171
     ff4:	13 29       	or	r17, r3
     ff6:	81 98       	cbi	0x10, 1	; 16
     ff8:	9d 03       	fmulsu	r17, r21
     ffa:	49 4e       	sbci	r20, 0xE9	; 233
     ffc:	92 93       	st	-Z, r25
     ffe:	62 a4       	ldd	r6, Z+42	; 0x2a
    1000:	0e 6a       	ori	r16, 0xAE	; 174
    1002:	34 4c       	sbci	r19, 0xC4	; 196
    1004:	00 fb       	bst	r16, 0
    1006:	6b 11       	cpse	r22, r11
    1008:	e9 80       	ldd	r14, Y+1	; 0x01
    100a:	9a 3b       	cpi	r25, 0xBA	; 186
    100c:	e4 14       	cp	r14, r4
    100e:	25 4c       	sbci	r18, 0xC5	; 197
    1010:	8a d1       	rcall	.+788    	; 0x1326 <__LOCK_REGION_LENGTH__+0xf26>
    1012:	36 0d       	add	r19, r6
    1014:	83 00       	.word	0x0083	; ????
    1016:	fb 6c       	ori	r31, 0xCB	; 203
    1018:	0d 24       	eor	r0, r13
    101a:	81 58       	subi	r24, 0x81	; 129
    101c:	55 49       	sbci	r21, 0x95	; 149
    101e:	97 2e       	mov	r9, r23
    1020:	db 90       	.word	0x90db	; ????
    1022:	00 fb       	bst	r16, 0
    1024:	6d 0f       	add	r22, r29
    1026:	e5 80       	ldd	r14, Z+5	; 0x05
    1028:	59 b3       	in	r21, 0x19	; 25
    102a:	23 52       	subi	r18, 0x23	; 35
    102c:	12 25       	eor	r17, r2
    102e:	51 92       	st	Z+, r5
    1030:	0c 02       	muls	r16, r28
    1032:	fb 7a       	andi	r31, 0xAB	; 171
    1034:	13 47       	sbci	r17, 0x73	; 115
    1036:	81 73       	andi	r24, 0x31	; 49
    1038:	b5 d5       	rcall	.+2922   	; 0x1ba4 <_ZN5Print6printfEPKcz+0x2e>
    103a:	81 68       	ori	r24, 0x81	; 129
    103c:	50 d2       	rcall	.+1184   	; 0x14de <__LOCK_REGION_LENGTH__+0x10de>
    103e:	38 4a       	sbci	r19, 0xA8	; 168
    1040:	6a 75       	andi	r22, 0x5A	; 90
    1042:	60 48       	sbci	r22, 0x80	; 128
    1044:	00 fb       	bst	r16, 0
    1046:	7b 15       	cp	r23, r11
    1048:	48 81       	ld	r20, Y
    104a:	83 35       	cpi	r24, 0x53	; 83
    104c:	66 39       	cpi	r22, 0x96	; 150
    104e:	92 0d       	add	r25, r2
    1050:	52 b8       	out	0x02, r5	; 2
    1052:	03 49       	sbci	r16, 0x93	; 147
    1054:	2d 4a       	sbci	r18, 0xAD	; 173
    1056:	73 64       	ori	r23, 0x43	; 67
    1058:	88 00       	.word	0x0088	; ????
    105a:	fb 7c       	andi	r31, 0xCB	; 203
    105c:	11 08       	sbc	r1, r1
    105e:	81 85       	ldd	r24, Z+9	; 0x09
    1060:	35 66       	ori	r19, 0x65	; 101
    1062:	39 92       	st	Y+, r3
    1064:	23 c3       	rjmp	.+1606   	; 0x16ac <__LOCK_REGION_LENGTH__+0x12ac>
    1066:	a0 83       	st	Z, r26
    1068:	49 1c       	adc	r4, r9
    106a:	02 fb       	bst	r16, 2
    106c:	7d 10       	cpse	r7, r13
    106e:	e8 80       	ld	r14, Y
    1070:	85 35       	cpi	r24, 0x55	; 85
    1072:	66 39       	cpi	r22, 0x96	; 150
    1074:	92 0c       	add	r9, r2
    1076:	83 8e       	std	Z+27, r8	; 0x1b
    1078:	25 71       	andi	r18, 0x15	; 21
    107a:	08 fb       	.word	0xfb08	; ????
    107c:	89 0e       	add	r8, r25
    107e:	26 85       	ldd	r18, Z+14	; 0x0e
    1080:	69 a5       	ldd	r22, Y+41	; 0x29
    1082:	25 d9       	rcall	.-3510   	; 0x2ce <__trampolines_end+0x36>
    1084:	8e c5       	rjmp	.+2844   	; 0x1ba2 <_ZN5Print6printfEPKcz+0x2c>
    1086:	69 69       	ori	r22, 0x99	; 153
    1088:	18 fb       	.word	0xfb18	; ????
    108a:	8a 0c       	add	r8, r10
    108c:	24 81       	ldd	r18, Z+4	; 0x04
    108e:	45 55       	subi	r20, 0x55	; 85
    1090:	c9 81       	ldd	r28, Y+1	; 0x01
    1092:	ac d4       	rcall	.+2392   	; 0x19ec <__LOCK_REGION_LENGTH__+0x15ec>
    1094:	06 fb       	bst	r16, 6
    1096:	8b 0c       	add	r8, r11
    1098:	24 81       	ldd	r18, Z+4	; 0x04
    109a:	45 55       	subi	r20, 0x55	; 85
    109c:	89 b3       	in	r24, 0x19	; 25
    109e:	4c 6a       	ori	r20, 0xAC	; 172
    10a0:	03 fb       	bst	r16, 3
    10a2:	8d 0e       	add	r8, r29
    10a4:	44 81       	ldd	r20, Z+4	; 0x04
    10a6:	45 93       	las	Z, r20
    10a8:	49 3a       	cpi	r20, 0xA9	; 169
    10aa:	90 65       	ori	r25, 0x50	; 80
    10ac:	52 1b       	sub	r21, r18
    10ae:	00 fb       	bst	r16, 0
    10b0:	8e 17       	cp	r24, r30
    10b2:	49 81       	ldd	r20, Y+1	; 0x01
    10b4:	98 8f       	std	Y+24, r25	; 0x18
    10b6:	e4 40       	sbci	r30, 0x04	; 4
    10b8:	0e e4       	ldi	r16, 0x4E	; 78
    10ba:	40 8e       	std	Z+24, r4	; 0x18
    10bc:	e4 50       	subi	r30, 0x04	; 4
    10be:	39 c9       	rjmp	.-3470   	; 0x332 <__trampolines_end+0x9a>
    10c0:	01 1d       	adc	r16, r1
    10c2:	48 86       	std	Y+8, r4	; 0x08
    10c4:	21 01       	movw	r4, r2
    10c6:	fb 8f       	std	Y+27, r31	; 0x1b
    10c8:	17 4a       	sbci	r17, 0xA7	; 167
    10ca:	81 a8       	ldd	r8, Z+49	; 0x31
    10cc:	0f e5       	ldi	r16, 0x5F	; 95
    10ce:	48 8e       	std	Y+24, r4	; 0x18
    10d0:	e4 48       	sbci	r30, 0x84	; 132
    10d2:	0e e5       	ldi	r16, 0x5E	; 94
    10d4:	58 94       	seh
    10d6:	03 49       	sbci	r16, 0x93	; 147
    10d8:	8e e8       	ldi	r24, 0x8E	; 142
    10da:	48 32       	cpi	r20, 0x28	; 40
    10dc:	1c fb       	.word	0xfb1c	; ????
    10de:	90 0c       	add	r9, r0
    10e0:	45 81       	ldd	r20, Z+5	; 0x05
    10e2:	58 99       	sbic	0x0b, 0	; 11
    10e4:	35 a6       	std	Z+45, r3	; 0x2d
    10e6:	8d 83       	std	Y+5, r24	; 0x05
    10e8:	02 fb       	bst	r16, 2
    10ea:	91 0c       	add	r9, r1
    10ec:	46 81       	ldd	r20, Z+6	; 0x06
    10ee:	68 d9       	rcall	.-3376   	; 0x3c0 <__trampolines_end+0x128>
    10f0:	35 6e       	ori	r19, 0xE5	; 229
    10f2:	4d 86       	std	Y+13, r4	; 0x0d
    10f4:	01 fb       	bst	r16, 1
    10f6:	92 17       	cp	r25, r18
    10f8:	49 81       	ldd	r20, Y+1	; 0x01
    10fa:	98 9d       	mul	r25, r8
    10fc:	a4 49       	sbci	r26, 0x94	; 148
    10fe:	0e e4       	ldi	r16, 0x4E	; 78
    1100:	40 8e       	std	Z+24, r4	; 0x18
    1102:	e4 50       	subi	r30, 0x04	; 4
    1104:	39 c9       	rjmp	.-3470   	; 0x378 <__trampolines_end+0xe0>
    1106:	01 1d       	adc	r16, r1
    1108:	48 86       	std	Y+8, r4	; 0x08
    110a:	21 01       	movw	r4, r2
    110c:	fb 93       	.word	0x93fb	; ????
    110e:	17 4a       	sbci	r17, 0xA7	; 167
    1110:	81 a8       	ldd	r8, Z+49	; 0x31
    1112:	9d c4       	rjmp	.+2362   	; 0x1a4e <__ctors_end+0x16>
    1114:	49 8e       	std	Y+25, r4	; 0x19
    1116:	e4 48       	sbci	r30, 0x84	; 132
    1118:	0e e5       	ldi	r16, 0x5E	; 94
    111a:	58 39       	cpi	r21, 0x98	; 152
    111c:	ca 81       	ldd	r28, Y+2	; 0x02
    111e:	24 07       	cpc	r18, r20
    1120:	a2 e1       	ldi	r26, 0x12	; 18
    1122:	00 fb       	bst	r16, 0
    1124:	94 0d       	add	r25, r4
    1126:	45 81       	ldd	r20, Z+5	; 0x05
    1128:	58 95       	.word	0x9558	; ????
    112a:	b4 15       	cp	r27, r4
    112c:	d3 c6       	rjmp	.+3494   	; 0x1ed4 <millis+0xe>
    112e:	41 01       	movw	r8, r2
    1130:	fb 95       	.word	0x95fb	; ????
    1132:	0e 46       	sbci	r16, 0x6E	; 110
    1134:	81 68       	ori	r24, 0x81	; 129
    1136:	95 44       	sbci	r25, 0x45	; 69
    1138:	49 58       	subi	r20, 0x89	; 137
    113a:	8d 5b       	subi	r24, 0xBD	; 189
    113c:	93 61       	ori	r25, 0x13	; 19
    113e:	fb 9f       	mul	r31, r27
    1140:	0f c8       	rjmp	.-4066   	; 0x160 <__SREG__+0x121>
    1142:	80 85       	ldd	r24, Z+8	; 0x08
    1144:	1b a5       	ldd	r17, Y+43	; 0x2b
    1146:	49 ba       	out	0x19, r4	; 25
    1148:	26 5a       	subi	r18, 0xA6	; 166
    114a:	36 64       	ori	r19, 0x46	; 70
    114c:	00 fb       	bst	r16, 0
    114e:	a4 0f       	add	r26, r20
    1150:	24 81       	ldd	r18, Z+4	; 0x04
    1152:	48 23       	and	r20, r24
    1154:	65 39       	cpi	r22, 0x95	; 149
    1156:	20 0d       	add	r18, r0
    1158:	91 94       	neg	r9
    115a:	28 00       	.word	0x0028	; ????
    115c:	fb a5       	ldd	r31, Y+43	; 0x2b
    115e:	10 25       	eor	r17, r0
    1160:	85 68       	ori	r24, 0x85	; 133
    1162:	23 a5       	ldd	r18, Z+43	; 0x2b
    1164:	99 92       	st	Y+, r9
    1166:	29 4a       	sbci	r18, 0xA9	; 169
    1168:	29 19       	sub	r18, r9
    116a:	d2 00       	.word	0x00d2	; ????
    116c:	fb a7       	std	Y+43, r31	; 0x2b
    116e:	0a 65       	ori	r16, 0x5A	; 90
    1170:	84 68       	ori	r24, 0x84	; 132
    1172:	23 25       	eor	r18, r3
    1174:	51 24       	eor	r5, r1
    1176:	fb a8       	ldd	r15, Y+51	; 0x33
    1178:	0c e4       	ldi	r16, 0x4C	; 76
    117a:	80 45       	sbci	r24, 0x50	; 80
    117c:	57 1b       	sub	r21, r23
    117e:	b2 28       	or	r11, r2
    1180:	53 00       	.word	0x0053	; ????
    1182:	fb a9       	ldd	r31, Y+51	; 0x33
    1184:	0c a5       	ldd	r16, Y+44	; 0x2c
    1186:	80 55       	subi	r24, 0x50	; 80
    1188:	93 49       	sbci	r25, 0x93	; 147
    118a:	91 26       	eor	r9, r17
    118c:	26 00       	.word	0x0026	; ????
    118e:	fb ab       	std	Y+51, r31	; 0x33
    1190:	11 06       	cpc	r1, r17
    1192:	85 65       	ori	r24, 0x55	; 85
    1194:	25 26       	eor	r2, r21
    1196:	51 4b       	sbci	r21, 0xB1	; 177
    1198:	34 2c       	mov	r3, r4
    119a:	51 a4       	ldd	r5, Z+41	; 0x29
    119c:	64 12       	cpse	r6, r20
    119e:	00 fb       	bst	r16, 0
    11a0:	ac 0e       	add	r10, r28
    11a2:	a7 80       	ldd	r10, Z+7	; 0x07
    11a4:	78 25       	eor	r23, r8
    11a6:	46 52       	subi	r20, 0x26	; 38
    11a8:	a5 69       	ori	r26, 0x95	; 149
    11aa:	18 12       	cpse	r1, r24
    11ac:	00 fb       	bst	r16, 0
    11ae:	ad 10       	cpse	r10, r13
    11b0:	a8 80       	ld	r10, Y
    11b2:	78 a5       	ldd	r23, Y+40	; 0x28
    11b4:	46 5a       	subi	r20, 0xA6	; 166
    11b6:	94 44       	sbci	r25, 0x44	; 68
    11b8:	49 94       	.word	0x9449	; ????
    11ba:	0c 83       	std	Y+4, r16	; 0x04
    11bc:	00 fb       	bst	r16, 0
    11be:	ae 0c       	add	r10, r14
    11c0:	89 84       	ldd	r8, Y+9	; 0x09
    11c2:	b8 25       	eor	r27, r8
    11c4:	e7 40       	sbci	r30, 0x07	; 7
    11c6:	8e 0c       	add	r8, r14
    11c8:	07 fb       	bst	r16, 7
    11ca:	af 0a       	sbc	r10, r31
    11cc:	67 84       	ldd	r6, Z+15	; 0x0f
    11ce:	56 b3       	in	r21, 0x16	; 22
    11d0:	c5 c3       	rjmp	.+1930   	; 0x195c <__LOCK_REGION_LENGTH__+0x155c>
    11d2:	10 fb       	bst	r17, 0
    11d4:	b0 10       	cpse	r11, r0
    11d6:	e9 84       	ldd	r14, Y+9	; 0x09
    11d8:	b8 95       	.word	0x95b8	; ????
    11da:	03 39       	cpi	r16, 0x93	; 147
    11dc:	92 43       	sbci	r25, 0x32	; 50
    11de:	72 0e       	add	r7, r18
    11e0:	e4 c8       	rjmp	.-3640   	; 0x3aa <__trampolines_end+0x112>
    11e2:	70 fb       	bst	r23, 0
    11e4:	b1 0d       	add	r27, r1
    11e6:	c7 84       	ldd	r12, Z+15	; 0x0f
    11e8:	56 23       	and	r21, r22
    11ea:	e6 40       	sbci	r30, 0x06	; 6
    11ec:	bc c5       	rjmp	.+2936   	; 0x1d66 <initTimer10Ms+0x20>
    11ee:	c3 10       	cpse	r12, r3
    11f0:	fb b2       	in	r15, 0x1b	; 27
    11f2:	07 22       	and	r0, r23
    11f4:	80 0b       	sbc	r24, r16
    11f6:	21 fb       	bst	r18, 1
    11f8:	b3 07       	cpc	r27, r19
    11fa:	22 80       	ldd	r2, Z+2	; 0x02
    11fc:	06 21       	and	r16, r6
    11fe:	fb b4       	in	r15, 0x2b	; 43
    1200:	08 24       	eor	r0, r8
    1202:	80 0b       	sbc	r24, r16
    1204:	31 04       	cpc	r3, r1
    1206:	fb b5       	in	r31, 0x2b	; 43
    1208:	08 23       	and	r16, r24
    120a:	80 07       	cpc	r24, r16
    120c:	91 04       	cpc	r9, r1
    120e:	fb b6       	in	r15, 0x3b	; 59
    1210:	08 43       	sbci	r16, 0x38	; 56
    1212:	80 0a       	sbc	r8, r16
    1214:	d3 00       	.word	0x00d3	; ????
    1216:	fb b9       	out	0x0b, r31	; 11
    1218:	08 42       	sbci	r16, 0x28	; 40
    121a:	80 06       	cpc	r8, r16
    121c:	11 05       	cpc	r17, r1
    121e:	fb d7       	rcall	.+4086   	; 0x2216 <_ZN14HardwareSerial5beginEmh+0x6a>
    1220:	10 64       	ori	r17, 0x40	; 64
    1222:	85 65       	ori	r24, 0x55	; 85
    1224:	23 49       	sbci	r18, 0x93	; 147
    1226:	39 a0       	ldd	r3, Y+33	; 0x21
    1228:	44 52       	subi	r20, 0x24	; 36
    122a:	b2 45       	sbci	r27, 0x52	; 82
    122c:	89 04       	cpc	r8, r9
    122e:	fb d8       	rcall	.-3594   	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
    1230:	10 64       	ori	r17, 0x40	; 64
    1232:	85 55       	subi	r24, 0x55	; 85
    1234:	15 49       	sbci	r17, 0x95	; 149
    1236:	39 a0       	ldd	r3, Y+33	; 0x21
    1238:	44 52       	subi	r20, 0x24	; 36
    123a:	b2 45       	sbci	r27, 0x52	; 82
    123c:	89 04       	cpc	r8, r9
    123e:	fb d9       	rcall	.-3082   	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
    1240:	0f 44       	sbci	r16, 0x4F	; 79
    1242:	85 65       	ori	r24, 0x55	; 85
    1244:	55 07       	cpc	r21, r21
    1246:	94 48       	sbci	r25, 0x84	; 132
    1248:	4a b6       	in	r4, 0x3a	; 58
    124a:	28 91       	.word	0x9128	; ????
    124c:	00 fb       	bst	r16, 0
    124e:	da 0f       	add	r29, r26
    1250:	44 85       	ldd	r20, Z+12	; 0x0c
    1252:	55 55       	subi	r21, 0x55	; 85
    1254:	07 94       	ror	r0
    1256:	48 4a       	sbci	r20, 0xA8	; 168
    1258:	b6 28       	or	r11, r6
    125a:	91 00       	.word	0x0091	; ????
    125c:	fb e3       	ldi	r31, 0x3B	; 59
    125e:	0f 24       	eor	r0, r15
    1260:	85 56       	subi	r24, 0x65	; 101
    1262:	93 03       	fmuls	r17, r19
    1264:	4a 24       	eor	r4, r10
    1266:	25 5b       	subi	r18, 0xB5	; 181
    1268:	94 48       	sbci	r25, 0x84	; 132
    126a:	00 fb       	bst	r16, 0
    126c:	fc 10       	cpse	r15, r12
    126e:	e8 80       	ld	r14, Y
    1270:	85 39       	cpi	r24, 0x95	; 149
    1272:	66 52       	subi	r22, 0x26	; 38
    1274:	98 2d       	mov	r25, r8
    1276:	b1 9c       	mul	r11, r1
    1278:	0c 0b       	sbc	r16, r28
    127a:	00 fb       	bst	r16, 0
    127c:	fd 11       	cpse	r31, r13
    127e:	e9 7c       	andi	r30, 0xC9	; 201
    1280:	84 b9       	out	0x04, r24	; 4
    1282:	66 49       	sbci	r22, 0x96	; 150
    1284:	14 6a       	ori	r17, 0xA4	; 164
    1286:	53 9c       	mul	r5, r3
    1288:	c4 d1       	rcall	.+904    	; 0x1612 <__LOCK_REGION_LENGTH__+0x1212>
    128a:	30 01       	movw	r6, r0
    128c:	fb fe       	.word	0xfefb	; ????
    128e:	0a c3       	rjmp	.+1556   	; 0x18a4 <__LOCK_REGION_LENGTH__+0x14a4>
    1290:	80 36       	cpi	r24, 0x60	; 96
    1292:	55 1a       	sub	r5, r21
    1294:	93 00       	.word	0x0093	; ????
    1296:	fb ff       	.word	0xfffb	; ????
    1298:	0c a4       	ldd	r0, Y+44	; 0x2c
    129a:	80 46       	sbci	r24, 0x60	; 96
    129c:	95 25       	eor	r25, r5
    129e:	43 98       	cbi	0x08, 3	; 8
    12a0:	24 00       	.word	0x0024	; ????
    12a2:	fd 3e       	cpi	r31, 0xED	; 237
    12a4:	0c 63       	ori	r16, 0x3C	; 60
    12a6:	81 45       	sbci	r24, 0x51	; 81
    12a8:	95 44       	sbci	r25, 0x45	; 69
    12aa:	49 d4       	rcall	.+2194   	; 0x1b3e <_ZN5Print5printERK6String+0x12>
    12ac:	ad 14       	cp	r10, r13
    12ae:	fd 3f       	cpi	r31, 0xFD	; 253
    12b0:	0d 63       	ori	r16, 0x3D	; 61
    12b2:	85 45       	sbci	r24, 0x55	; 85
    12b4:	91 45       	sbci	r25, 0x51	; 81
    12b6:	59 d4       	rcall	.+2226   	; 0x1b6a <_ZN5Print5printEPKc+0x20>
    12b8:	a5 14       	cp	r10, r5
    12ba:	01 fd       	sbrc	r16, 1
    12bc:	fc 1f       	adc	r31, r28
    12be:	4e 81       	ldd	r20, Y+6	; 0x06
    12c0:	e6 bb       	out	0x16, r30	; 22
    12c2:	83 49       	sbci	r24, 0x93	; 147
    12c4:	0e 26       	eor	r0, r30
    12c6:	39 98       	cbi	0x07, 1	; 7
    12c8:	e4 60       	ori	r30, 0x04	; 4
    12ca:	92 25       	eor	r25, r2
    12cc:	62 92       	st	-Z, r6
    12ce:	25 62       	ori	r18, 0x25	; 37
    12d0:	92 25       	eor	r25, r2
    12d2:	62 34       	cpi	r22, 0x42	; 66
    12d4:	69 aa       	std	Y+49, r6	; 0x31
    12d6:	34 24       	eor	r3, r4
    12d8:	43 08       	sbc	r4, r3
    12da:	fe 80       	ldd	r15, Y+6	; 0x06
    12dc:	0a 83       	std	Y+2, r16	; 0x02
    12de:	84 58       	subi	r24, 0x84	; 132
    12e0:	33 0d       	add	r19, r3
    12e2:	11 00       	.word	0x0011	; ????
    12e4:	fe 81       	ldd	r31, Y+6	; 0x06
    12e6:	0c 25       	eor	r16, r12
    12e8:	81 58       	subi	r24, 0x81	; 129
    12ea:	99 2c       	mov	r9, r9
    12ec:	71 d8       	rcall	.-3870   	; 0x3d0 <__trampolines_end+0x138>
    12ee:	13 00       	.word	0x0013	; ????
    12f0:	fe 82       	std	Y+6, r15	; 0x06
    12f2:	0c 25       	eor	r16, r12
    12f4:	85 78       	andi	r24, 0x85	; 133
    12f6:	99 2c       	mov	r9, r9
    12f8:	71 d8       	rcall	.-3870   	; 0x3dc <__trampolines_end+0x144>
    12fa:	13 00       	.word	0x0013	; ????
    12fc:	fe 83       	std	Y+6, r31	; 0x06
    12fe:	09 42       	sbci	r16, 0x29	; 41
    1300:	81 38       	cpi	r24, 0x81	; 129
    1302:	63 e9       	ldi	r22, 0x93	; 147
    1304:	07 fe       	sbrs	r0, 7
    1306:	84 0a       	sbc	r8, r20
    1308:	42 85       	ldd	r20, Z+10	; 0x0a
    130a:	38 b1       	in	r19, 0x08	; 8
    130c:	f4 53       	subi	r31, 0x34	; 52
    130e:	00 fe       	sbrs	r0, 0
    1310:	85 10       	cpse	r8, r5
    1312:	64 85       	ldd	r22, Z+12	; 0x0c
    1314:	65 a3       	std	Z+37, r22	; 0x25
    1316:	84 b2       	in	r8, 0x14	; 20
    1318:	12 49       	sbci	r17, 0x92	; 146
    131a:	c9 16       	cp	r12, r25
    131c:	25 12       	cpse	r2, r21
    131e:	00 fe       	sbrs	r0, 0
    1320:	86 10       	cpse	r8, r6
    1322:	64 85       	ldd	r22, Z+12	; 0x0c
    1324:	55 a3       	std	Z+37, r21	; 0x25
    1326:	84 b2       	in	r8, 0x14	; 20
    1328:	12 49       	sbci	r17, 0x92	; 146
    132a:	c9 16       	cp	r12, r25
    132c:	25 12       	cpse	r2, r21
    132e:	00 fe       	sbrs	r0, 0
    1330:	87 0a       	sbc	r8, r23
    1332:	62 81       	ldd	r22, Z+2	; 0x02
    1334:	35 d3       	rcall	.+1642   	; 0x19a0 <__LOCK_REGION_LENGTH__+0x15a0>
    1336:	6f 8a       	std	Y+23, r6	; 0x17
    1338:	00 fe       	sbrs	r0, 0
    133a:	88 09       	sbc	r24, r8
    133c:	02 85       	ldd	r16, Z+10	; 0x0a
    133e:	38 91       	.word	0x9138	; ????
    1340:	f4 29       	or	r31, r4
    1342:	fe 89       	ldd	r31, Y+22	; 0x16
    1344:	12 27       	eor	r17, r18
    1346:	81 85       	ldd	r24, Z+9	; 0x09
    1348:	23 47       	sbci	r18, 0x73	; 115
    134a:	4a d4       	rcall	.+2196   	; 0x1be0 <_ZN6String10invalidateEv+0x1a>
    134c:	16 65       	ori	r17, 0x56	; 86
    134e:	99 92       	st	Y+, r9
    1350:	aa c9       	rjmp	.-3244   	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
    1352:	a0 00       	.word	0x00a0	; ????
    1354:	fe 8a       	std	Y+22, r15	; 0x16
    1356:	13 28       	or	r1, r3
    1358:	81 85       	ldd	r24, Z+9	; 0x09
    135a:	15 e7       	ldi	r17, 0x75	; 117
    135c:	80 0e       	add	r8, r16
    135e:	e7 40       	sbci	r30, 0x07	; 7
    1360:	36 a8       	ldd	r3, Z+54	; 0x36
    1362:	49 1a       	sub	r4, r25
    1364:	0d 12       	cpse	r0, r29
    1366:	00 fe       	sbrs	r0, 0
    1368:	8b 0c       	add	r8, r11
    136a:	03 81       	ldd	r16, Z+3	; 0x03
    136c:	38 a1       	ldd	r19, Y+32	; 0x20
    136e:	44 72       	andi	r20, 0x24	; 36
    1370:	14 2d       	mov	r17, r4
    1372:	00 fe       	sbrs	r0, 0
    1374:	8c 0d       	add	r24, r12
    1376:	e4 80       	ldd	r14, Z+4	; 0x04
    1378:	48 a3       	std	Y+32, r20	; 0x20
    137a:	64 3a       	cpi	r22, 0xA4	; 164
    137c:	92 25       	eor	r25, r2
    137e:	43 00       	.word	0x0043	; ????
    1380:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1382:	08 01       	movw	r0, r16
    1384:	85 38       	cpi	r24, 0x85	; 133
    1386:	71 10       	cpse	r7, r1
    1388:	fe 8e       	std	Y+30, r15	; 0x1e
    138a:	09 02       	muls	r16, r25
    138c:	85 38       	cpi	r24, 0x85	; 133
    138e:	91 f4       	brne	.+36     	; 0x13b4 <__LOCK_REGION_LENGTH__+0xfb4>
    1390:	29 fe       	.word	0xfe29	; ????
    1392:	8f 0f       	add	r24, r31
    1394:	a9 80       	ldd	r10, Y+1	; 0x01
    1396:	96 91       	elpm	r25, Z
    1398:	03 3a       	cpi	r16, 0xA3	; 163
    139a:	90 0c       	add	r9, r0
    139c:	43 4e       	sbci	r20, 0xE3	; 227
    139e:	08 01       	movw	r0, r16
    13a0:	fe 90       	ld	r15, -X
    13a2:	0f aa       	std	Y+55, r0	; 0x37
    13a4:	80 a6       	std	Z+40, r8	; 0x28
    13a6:	91 03       	fmuls	r17, r17
    13a8:	49 0e       	add	r4, r25
    13aa:	44 c3       	rjmp	.+1672   	; 0x1a34 <__ctors_start+0x4>
    13ac:	9d 90       	ld	r9, X+
    13ae:	02 fe       	sbrs	r0, 2
    13b0:	91 0a       	sbc	r9, r17
    13b2:	c3 80       	ldd	r12, Z+3	; 0x03
    13b4:	36 55       	subi	r19, 0x56	; 86
    13b6:	5a 13       	cpse	r21, r26
    13b8:	00 fe       	sbrs	r0, 0
    13ba:	92 0b       	sbc	r25, r18
    13bc:	a4 80       	ldd	r10, Z+4	; 0x04
    13be:	46 95       	lsr	r20
    13c0:	25 43       	sbci	r18, 0x35	; 53
    13c2:	1a 01       	movw	r2, r20
    13c4:	fe 93       	st	-X, r31
    13c6:	0d e4       	ldi	r16, 0x4D	; 77
    13c8:	80 48       	sbci	r24, 0x80	; 128
    13ca:	53 95       	inc	r21
    13cc:	94 48       	sbci	r25, 0x84	; 132
    13ce:	4a 14       	cp	r4, r10
    13d0:	00 fe       	sbrs	r0, 0
    13d2:	94 0e       	add	r9, r20
    13d4:	e5 80       	ldd	r14, Z+5	; 0x05
    13d6:	58 53       	subi	r21, 0x38	; 56
    13d8:	07 16       	cp	r0, r23
    13da:	a5 94       	asr	r10
    13dc:	0c 69       	ori	r16, 0x9C	; 156
    13de:	00 fe       	sbrs	r0, 0
    13e0:	95 10       	cpse	r9, r5
    13e2:	a9 80       	ldd	r10, Y+1	; 0x01
    13e4:	98 97       	sbiw	r26, 0x28	; 40
    13e6:	e4 68       	ori	r30, 0x84	; 132
    13e8:	0e e8       	ldi	r16, 0x8E	; 142
    13ea:	40 32       	cpi	r20, 0x20	; 32
    13ec:	0c 09       	sbc	r16, r12
    13ee:	00 fe       	sbrs	r0, 0
    13f0:	96 0f       	add	r25, r22
    13f2:	aa 80       	ldd	r10, Y+2	; 0x02
    13f4:	a8 97       	sbiw	r28, 0x28	; 40
    13f6:	e4 84       	ldd	r14, Z+12	; 0x0c
    13f8:	1c 48       	sbci	r17, 0x8C	; 140
    13fa:	72 20       	and	r7, r2
    13fc:	1a 0e       	add	r1, r26
    13fe:	fe 97       	sbiw	r30, 0x3e	; 62
    1400:	0c c4       	rjmp	.+2072   	; 0x1c1a <_ZN6String12changeBufferEj+0x30>
    1402:	80 58       	subi	r24, 0x80	; 128
    1404:	53 07       	cpc	r21, r19
    1406:	b2 6c       	ori	r27, 0xC2	; 194
    1408:	48 00       	.word	0x0048	; ????
    140a:	fe 98       	cbi	0x1f, 6	; 31
    140c:	0c c4       	rjmp	.+2072   	; 0x1c26 <_ZN6String7reserveEj+0x8>
    140e:	80 48       	sbci	r24, 0x80	; 128
    1410:	91 e4       	ldi	r25, 0x41	; 65
    1412:	40 56       	subi	r20, 0x60	; 96
    1414:	19 02       	muls	r17, r25
    1416:	fe 99       	sbic	0x1f, 6	; 31
    1418:	11 c9       	rjmp	.-3550   	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
    141a:	80 98       	cbi	0x10, 0	; 16
    141c:	99 03       	fmulsu	r17, r17
    141e:	49 8e       	std	Y+25, r4	; 0x19
    1420:	e6 80       	ldd	r14, Z+6	; 0x06
    1422:	0e 24       	eor	r0, r14
    1424:	c3 90       	.word	0x90c3	; ????
    1426:	00 fe       	sbrs	r0, 0
    1428:	9a 10       	cpse	r9, r10
    142a:	ca 80       	ldd	r12, Y+2	; 0x02
    142c:	a8 99       	sbic	0x15, 0	; 21
    142e:	23 75       	andi	r18, 0x53	; 83
    1430:	42 0e       	add	r4, r18
    1432:	24 39       	cpi	r18, 0x94	; 148
    1434:	10 0d       	add	r17, r0
    1436:	07 fe       	sbrs	r0, 7
    1438:	9b 0b       	sbc	r25, r27
    143a:	e3 80       	ldd	r14, Z+3	; 0x03
    143c:	38 d3       	rcall	.+1648   	; 0x1aae <_ZN5Print5flushEv>
    143e:	1a 45       	sbci	r17, 0x5A	; 90
    1440:	0b 00       	.word	0x000b	; ????
    1442:	fe 9c       	mul	r15, r14
    1444:	0d e4       	ldi	r16, 0x4D	; 77
    1446:	80 48       	sbci	r24, 0x80	; 128
    1448:	13 25       	eor	r17, r3
    144a:	39 90       	ld	r3, Y+
    144c:	55 86       	std	Z+13, r5	; 0x0d
    144e:	00 fe       	sbrs	r0, 0
    1450:	9d 13       	cpse	r25, r29
    1452:	47 81       	ldd	r20, Z+7	; 0x07
    1454:	73 b5       	in	r23, 0x23	; 35
    1456:	d5 81       	ldd	r29, Z+5	; 0x05
    1458:	68 50       	subi	r22, 0x08	; 8
    145a:	d2 38       	cpi	r29, 0x82	; 130
    145c:	ca 72       	andi	r28, 0x2A	; 42
    145e:	20 07       	cpc	r18, r16
    1460:	86 04       	cpc	r8, r6
    1462:	fe 9e       	mul	r15, r30
    1464:	15 48       	sbci	r17, 0x85	; 133
    1466:	81 83       	std	Z+1, r24	; 0x01
    1468:	35 66       	ori	r19, 0x65	; 101
    146a:	39 92       	st	Y+, r3
    146c:	0d 52       	subi	r16, 0x2D	; 45
    146e:	b8 03       	fmulsu	r19, r16
    1470:	51 98       	cbi	0x0a, 1	; 10
    1472:	23 39       	cpi	r18, 0x93	; 147
    1474:	32 44       	sbci	r19, 0x42	; 66
    1476:	00 fe       	sbrs	r0, 0
    1478:	9f 10       	cpse	r9, r15
    147a:	e8 80       	ld	r14, Y
    147c:	86 35       	cpi	r24, 0x56	; 86
    147e:	66 39       	cpi	r22, 0x96	; 150
    1480:	92 23       	and	r25, r18
    1482:	c3 a0       	ldd	r12, Z+35	; 0x23
    1484:	a3 21       	and	r26, r3
    1486:	00 fe       	sbrs	r0, 0
    1488:	a0 0f       	add	r26, r16
    148a:	c8 80       	ld	r12, Y
    148c:	86 35       	cpi	r24, 0x56	; 86
    148e:	66 39       	cpi	r22, 0x96	; 150
    1490:	92 0c       	add	r9, r2
    1492:	83 0e       	add	r8, r19
    1494:	86 00       	.word	0x0086	; ????
    1496:	fe a1       	ldd	r31, Y+38	; 0x26
    1498:	12 47       	sbci	r17, 0x72	; 114
    149a:	81 83       	std	Z+1, r24	; 0x01
    149c:	b5 d5       	rcall	.+2922   	; 0x2008 <pinMode+0xae>
    149e:	81 68       	ori	r24, 0x81	; 129
    14a0:	50 d2       	rcall	.+1184   	; 0x1942 <__LOCK_REGION_LENGTH__+0x1542>
    14a2:	b8 0e       	add	r11, r24
    14a4:	e4 c0       	rjmp	.+456    	; 0x166e <__LOCK_REGION_LENGTH__+0x126e>
    14a6:	90 00       	.word	0x0090	; ????
    14a8:	fe a2       	std	Y+38, r15	; 0x26
    14aa:	15 48       	sbci	r17, 0x85	; 133
    14ac:	85 93       	las	Z, r24
    14ae:	35 66       	ori	r19, 0x65	; 101
    14b0:	39 92       	st	Y+, r3
    14b2:	0d 52       	subi	r16, 0x2D	; 45
    14b4:	b8 03       	fmulsu	r19, r16
    14b6:	39 90       	ld	r3, Y+
    14b8:	23 39       	cpi	r18, 0x93	; 147
    14ba:	32 44       	sbci	r19, 0x42	; 66
    14bc:	00 fe       	sbrs	r0, 0
    14be:	a3 0e       	add	r10, r19
    14c0:	a8 80       	ld	r10, Y
    14c2:	88 35       	cpi	r24, 0x58	; 88
    14c4:	66 39       	cpi	r22, 0x96	; 150
    14c6:	92 23       	and	r25, r18
    14c8:	c3 a0       	ldd	r12, Z+35	; 0x23
    14ca:	00 fe       	sbrs	r0, 0
    14cc:	a4 0d       	add	r26, r4
    14ce:	88 80       	ld	r8, Y
    14d0:	88 35       	cpi	r24, 0x58	; 88
    14d2:	66 39       	cpi	r22, 0x96	; 150
    14d4:	92 0c       	add	r9, r2
    14d6:	83 00       	.word	0x0083	; ????
    14d8:	fe a5       	ldd	r31, Y+46	; 0x2e
    14da:	14 87       	std	Z+12, r17	; 0x0c
    14dc:	81 73       	andi	r24, 0x31	; 49
    14de:	97 a3       	std	Z+39, r25	; 0x27
    14e0:	5b 1d       	adc	r21, r11
    14e2:	88 06       	cpc	r8, r24
    14e4:	25 8d       	ldd	r18, Z+29	; 0x1d
    14e6:	eb 40       	sbci	r30, 0x0B	; 11
    14e8:	0e 0c       	add	r0, r14
    14ea:	09 00       	.word	0x0009	; ????
    14ec:	fe a6       	std	Y+46, r15	; 0x2e
    14ee:	16 88       	ldd	r1, Z+22	; 0x16
    14f0:	81 83       	std	Z+1, r24	; 0x01
    14f2:	97 13       	cpse	r25, r23
    14f4:	c6 2c       	mov	r12, r6
    14f6:	47 b2       	in	r4, 0x17	; 23
    14f8:	41 0a       	sbc	r4, r17
    14fa:	77 20       	and	r7, r7
    14fc:	07 72       	andi	r16, 0x27	; 39
    14fe:	24 47       	sbci	r18, 0x74	; 116
    1500:	86 08       	sbc	r8, r6
    1502:	fe a7       	std	Y+46, r31	; 0x2e
    1504:	10 e8       	ldi	r17, 0x80	; 128
    1506:	80 88       	ldd	r8, Z+16	; 0x10
    1508:	97 13       	cpse	r25, r23
    150a:	c6 2c       	mov	r12, r6
    150c:	47 72       	andi	r20, 0x27	; 39
    150e:	64 18       	sub	r6, r4
    1510:	14 00       	.word	0x0014	; ????
    1512:	fe a8       	ldd	r15, Y+54	; 0x36
    1514:	0e c8       	rjmp	.-4068   	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
    1516:	80 88       	ldd	r8, Z+16	; 0x10
    1518:	97 13       	cpse	r25, r23
    151a:	c6 2c       	mov	r12, r6
    151c:	47 92       	lat	Z, r4
    151e:	61 10       	cpse	r6, r1
    1520:	fe a9       	ldd	r31, Y+54	; 0x36
    1522:	0a a4       	ldd	r0, Y+42	; 0x2a
    1524:	84 58       	subi	r24, 0x84	; 132
    1526:	13 d6       	rcall	.+3110   	; 0x214e <_ZN14HardwareSerial9availableEv+0x10>
    1528:	86 04       	cpc	r8, r6
    152a:	fe aa       	std	Y+54, r15	; 0x36
    152c:	0a a5       	ldd	r16, Y+42	; 0x2a
    152e:	84 68       	ori	r24, 0x84	; 132
    1530:	93 16       	cp	r9, r19
    1532:	93 41       	sbci	r25, 0x13	; 19
    1534:	fe ab       	std	Y+54, r31	; 0x36
    1536:	0c e4       	ldi	r16, 0x4C	; 76
    1538:	84 58       	subi	r24, 0x84	; 132
    153a:	93 03       	fmuls	r17, r19
    153c:	61 6d       	ori	r22, 0xD1	; 209
    153e:	48 00       	.word	0x0048	; ????
    1540:	fe ac       	ldd	r15, Y+62	; 0x3e
    1542:	0c e5       	ldi	r16, 0x5C	; 92
    1544:	84 68       	ori	r24, 0x84	; 132
    1546:	93 43       	sbci	r25, 0x33	; 51
    1548:	69 31       	cpi	r22, 0x19	; 25
    154a:	19 04       	cpc	r1, r9
    154c:	fe ad       	ldd	r31, Y+62	; 0x3e
    154e:	09 c3       	rjmp	.+1554   	; 0x1b62 <_ZN5Print5printEPKc+0x18>
    1550:	84 55       	subi	r24, 0x54	; 84
    1552:	d5 a5       	ldd	r29, Z+45	; 0x2d
    1554:	04 fe       	sbrs	r0, 4
    1556:	ae 0b       	sbc	r26, r30
    1558:	c4 80       	ldd	r12, Z+4	; 0x04
    155a:	45 95       	asr	r20
    155c:	65 52       	subi	r22, 0x25	; 37
    155e:	1b 00       	.word	0x001b	; ????
    1560:	fe af       	std	Y+62, r31	; 0x3e
    1562:	0b 03       	fmul	r16, r19
    1564:	85 55       	subi	r24, 0x55	; 85
    1566:	95 46       	sbci	r25, 0x65	; 101
    1568:	2d 25       	eor	r18, r13
    156a:	00 fe       	sbrs	r0, 0
    156c:	b0 0c       	add	r11, r0
    156e:	04 81       	ldd	r16, Z+4	; 0x04
    1570:	45 95       	asr	r20
    1572:	03 59       	subi	r16, 0x93	; 147
    1574:	26 b5       	in	r18, 0x26	; 38
    1576:	01 fe       	sbrs	r0, 1
    1578:	b1 13       	cpse	r27, r17
    157a:	cc 80       	ldd	r12, Y+4	; 0x04
    157c:	c5 0f       	add	r28, r21
    157e:	24 89       	ldd	r18, Z+20	; 0x14
    1580:	9c 24       	eor	r9, r12
    1582:	f2 90       	ld	r15, -Z
    1584:	c4 61       	ori	r28, 0x14	; 20
    1586:	9c 0e       	add	r9, r28
    1588:	2b 00       	.word	0x002b	; ????
    158a:	fe b2       	in	r15, 0x1e	; 30
    158c:	12 cd       	rjmp	.-1500   	; 0xfb2 <__LOCK_REGION_LENGTH__+0xbb2>
    158e:	80 d5       	rcall	.+2816   	; 0x2090 <pinMode+0x136>
    1590:	0f 24       	eor	r0, r15
    1592:	cd 49       	sbci	r28, 0x9D	; 157
    1594:	f3 30       	cpi	r31, 0x03	; 3
    1596:	c4 69       	ori	r28, 0x94	; 148
    1598:	1c 0f       	add	r17, r28
    159a:	33 00       	.word	0x0033	; ????
    159c:	fe b3       	in	r31, 0x1e	; 30
    159e:	0d 68       	ori	r16, 0x8D	; 141
    15a0:	80 88       	ldd	r8, Z+16	; 0x10
    15a2:	13 55       	subi	r17, 0x53	; 83
    15a4:	a2 68       	ori	r26, 0x82	; 130
    15a6:	18 14       	cp	r1, r8
    15a8:	00 fe       	sbrs	r0, 0
    15aa:	b4 0c       	add	r11, r4
    15ac:	6a 80       	ldd	r6, Y+2	; 0x02
    15ae:	a8 d5       	rcall	.+2896   	; 0x2100 <digitalRead+0xa>
    15b0:	16 55       	subi	r17, 0x56	; 86
    15b2:	86 43       	sbci	r24, 0x36	; 54
    15b4:	00 fe       	sbrs	r0, 0
    15b6:	b5 17       	cp	r27, r21
    15b8:	4c 81       	ldd	r20, Y+4	; 0x04
    15ba:	c5 0f       	add	r28, r21
    15bc:	e5 58       	subi	r30, 0x85	; 133
    15be:	92 73       	andi	r25, 0x32	; 50
    15c0:	4c 12       	cpse	r4, r28
    15c2:	39 49       	sbci	r19, 0x99	; 153
    15c4:	e4 21       	and	r30, r4
    15c6:	89 c3       	rjmp	.+1810   	; 0x1cda <_ZN6String6concatEPKcj+0x10>
    15c8:	38 1d       	adc	r19, r8
    15ca:	56 00       	.word	0x0056	; ????
    15cc:	fe b6       	in	r15, 0x3e	; 62
    15ce:	16 4d       	sbci	r17, 0xD6	; 214
    15d0:	81 d5       	rcall	.+2818   	; 0x20d4 <digitalWrite+0x3e>
    15d2:	0f e5       	ldi	r16, 0x5F	; 95
    15d4:	60 92 f3 90 	sts	0x90F3, r6	; 0x8090f3 <__bss_end+0x5c72>
    15d8:	34 27       	eor	r19, r20
    15da:	cd c3       	rjmp	.+1946   	; 0x1d76 <initTimer10Ms+0x30>
    15dc:	10 a7       	std	Z+40, r17	; 0x28
    15de:	71 3c       	cpi	r23, 0xC1	; 193
    15e0:	cc 00       	.word	0x00cc	; ????
    15e2:	fe b7       	in	r31, 0x3e	; 62
    15e4:	10 e8       	ldi	r17, 0x80	; 128
    15e6:	80 88       	ldd	r8, Z+16	; 0x10
    15e8:	19 27       	eor	r17, r25
    15ea:	39 35       	cpi	r19, 0x59	; 89
    15ec:	aa 44       	sbci	r26, 0x4A	; 74
    15ee:	d1 30       	cpi	r29, 0x01	; 1
    15f0:	28 00       	.word	0x0028	; ????
    15f2:	fe b8       	out	0x0e, r15	; 14
    15f4:	0f ca       	rjmp	.-3042   	; 0xa14 <__LOCK_REGION_LENGTH__+0x614>
    15f6:	80 a8       	ldd	r8, Z+48	; 0x30
    15f8:	9b 23       	and	r25, r27
    15fa:	75 4a       	sbci	r23, 0xA5	; 165
    15fc:	54 8b       	std	Z+20, r21	; 0x14
    15fe:	2a c3       	rjmp	.+1620   	; 0x1c54 <_ZN6String7reserveEj+0x36>
    1600:	21 fe       	sbrs	r2, 1
    1602:	b9 19       	sub	r27, r9
    1604:	0e 81       	ldd	r16, Y+6	; 0x06
    1606:	e5 0f       	add	r30, r21
    1608:	ea 60       	ori	r30, 0x0A	; 10
    160a:	a4 46       	sbci	r26, 0x64	; 100
    160c:	99 9a       	sbi	0x13, 1	; 19
    160e:	64 49       	sbci	r22, 0x94	; 148
    1610:	3a 4c       	sbci	r19, 0xCA	; 202
    1612:	69 0e       	add	r6, r25
    1614:	a4 39       	cpi	r26, 0x94	; 148
    1616:	32 e8       	ldi	r19, 0x82	; 130
    1618:	08 00       	.word	0x0008	; ????
    161a:	fe ba       	out	0x1e, r15	; 30
    161c:	18 0e       	add	r1, r24
    161e:	81 e5       	ldi	r24, 0x51	; 81
    1620:	0f ea       	ldi	r16, 0xAF	; 175
    1622:	60 a4       	ldd	r6, Z+40	; 0x28
    1624:	46 99       	sbic	0x08, 6	; 8
    1626:	9a 64       	ori	r25, 0x4A	; 74
    1628:	49 3a       	cpi	r20, 0xA9	; 169
    162a:	5c 73       	andi	r21, 0x3C	; 60
    162c:	20 cd       	rjmp	.-1472   	; 0x106e <__LOCK_REGION_LENGTH__+0xc6e>
    162e:	91 41       	sbci	r25, 0x11	; 17
    1630:	47 00       	.word	0x0047	; ????
    1632:	fe bb       	out	0x1e, r31	; 30
    1634:	11 aa       	std	Z+49, r1	; 0x31
    1636:	80 a8       	ldd	r8, Z+48	; 0x30
    1638:	0f e8       	ldi	r16, 0x8F	; 143
    163a:	40 d4       	rcall	.+2176   	; 0x1ebc <millisTimerConfig+0x84>
    163c:	16 25       	eor	r17, r6
    163e:	59 32       	cpi	r21, 0x29	; 41
    1640:	0c 12       	cpse	r0, r28
    1642:	00 fe       	sbrs	r0, 0
    1644:	bc 0e       	add	r11, r28
    1646:	a9 80       	ldd	r10, Y+1	; 0x01
    1648:	98 2d       	mov	r25, r8
    164a:	47 49       	sbci	r20, 0x97	; 151
    164c:	94 25       	eor	r25, r4
    164e:	b5 64       	ori	r27, 0x45	; 69
    1650:	38 fe       	.word	0xfe38	; ????
    1652:	bd 1a       	sub	r11, r29
    1654:	4e 81       	ldd	r20, Y+6	; 0x06
    1656:	e5 0f       	add	r30, r21
    1658:	e6 cc       	rjmp	.-1588   	; 0x1026 <__LOCK_REGION_LENGTH__+0xc26>
    165a:	3a 18       	sub	r3, r10
    165c:	a9 51       	subi	r26, 0x19	; 25
    165e:	a6 26       	eor	r10, r22
    1660:	59 92       	st	Y+, r5
    1662:	0e 53       	subi	r16, 0x3E	; 62
    1664:	9a 03       	fmulsu	r17, r18
    1666:	69 8e       	std	Y+25, r6	; 0x19
    1668:	0c 3a       	cpi	r16, 0xAC	; 172
    166a:	02 fe       	sbrs	r0, 2
    166c:	be 1a       	sub	r11, r30
    166e:	4e 81       	ldd	r20, Y+6	; 0x06
    1670:	e5 0f       	add	r30, r21
    1672:	e6 cc       	rjmp	.-1588   	; 0x1040 <__LOCK_REGION_LENGTH__+0xc40>
    1674:	3a 18       	sub	r3, r10
    1676:	a9 51       	subi	r26, 0x19	; 25
    1678:	a6 26       	eor	r10, r22
    167a:	59 92       	st	Y+, r5
    167c:	0e d7       	rcall	.+3612   	; 0x249a <_ZN17SingleInputKeypad4scanEv+0x32>
    167e:	1c 48       	sbci	r17, 0x8C	; 140
    1680:	73 64       	ori	r23, 0x43	; 67
    1682:	d0 11       	cpse	r29, r0
    1684:	00 fe       	sbrs	r0, 0
    1686:	bf 12       	cpse	r11, r31
    1688:	ea 80       	ldd	r14, Y+2	; 0x02
    168a:	a8 0f       	add	r26, r24
    168c:	e4 54       	subi	r30, 0x44	; 68
    168e:	1d 88       	ldd	r1, Y+21	; 0x15
    1690:	da a2       	std	Y+34, r13	; 0x22
    1692:	24 4b       	sbci	r18, 0xB4	; 180
    1694:	86 41       	sbci	r24, 0x16	; 22
    1696:	02 fe       	sbrs	r0, 2
    1698:	c0 11       	cpse	r28, r0
    169a:	ea 80       	ldd	r14, Y+2	; 0x02
    169c:	a8 9d       	mul	r26, r8
    169e:	53 75       	andi	r21, 0x53	; 83
    16a0:	20 6a       	ori	r18, 0xA0	; 160
    16a2:	8b 92       	.word	0x928b	; ????
    16a4:	2c 1a       	sub	r2, r28
    16a6:	0e 01       	movw	r0, r28
    16a8:	fe c1       	rjmp	.+1020   	; 0x1aa6 <__bad_interrupt+0x2>
    16aa:	13 08       	sbc	r1, r3
    16ac:	81 88       	ldd	r8, Z+17	; 0x11
    16ae:	95 03       	fmuls	r17, r21
    16b0:	39 90       	ld	r3, Y+
    16b2:	03 c9       	rjmp	.-3578   	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
    16b4:	a6 45       	sbci	r26, 0x56	; 86
    16b6:	61 94       	neg	r6
    16b8:	25 c3       	rjmp	.+1610   	; 0x1d04 <_ZN6String6concatEPKcj+0x3a>
    16ba:	04 fe       	sbrs	r0, 4
    16bc:	c2 11       	cpse	r28, r2
    16be:	09 81       	ldd	r16, Y+1	; 0x01
    16c0:	98 95       	break
    16c2:	23 39       	cpi	r18, 0x93	; 147
    16c4:	92 23       	and	r25, r18
    16c6:	c9 a8       	ldd	r12, Y+49	; 0x31
    16c8:	15 b3       	in	r17, 0x15	; 21
    16ca:	d2 70       	andi	r29, 0x02	; 2
    16cc:	fe c3       	rjmp	.+2044   	; 0x1eca <millis+0x4>
    16ce:	13 08       	sbc	r1, r3
    16d0:	81 88       	ldd	r8, Z+17	; 0x11
    16d2:	95 03       	fmuls	r17, r21
    16d4:	39 90       	ld	r3, Y+
    16d6:	03 c9       	rjmp	.-3578   	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
    16d8:	a6 45       	sbci	r26, 0x56	; 86
    16da:	61 94       	neg	r6
    16dc:	25 c3       	rjmp	.+1610   	; 0x1d28 <_ZN6String6concatEPKc+0x2>
    16de:	04 fe       	sbrs	r0, 4
    16e0:	c4 11       	cpse	r28, r4
    16e2:	09 81       	ldd	r16, Y+1	; 0x01
    16e4:	98 95       	break
    16e6:	23 39       	cpi	r18, 0x93	; 147
    16e8:	92 23       	and	r25, r18
    16ea:	c9 a8       	ldd	r12, Y+49	; 0x31
    16ec:	15 b3       	in	r17, 0x15	; 21
    16ee:	d2 70       	andi	r29, 0x02	; 2
    16f0:	fe c5       	rjmp	.+3068   	; 0x22ee <__vector_88+0x60>
    16f2:	13 08       	sbc	r1, r3
    16f4:	81 88       	ldd	r8, Z+17	; 0x11
    16f6:	95 03       	fmuls	r17, r21
    16f8:	51 98       	cbi	0x0a, 1	; 10
    16fa:	03 c9       	rjmp	.-3578   	; 0x902 <__LOCK_REGION_LENGTH__+0x502>
    16fc:	a6 45       	sbci	r26, 0x56	; 86
    16fe:	61 94       	neg	r6
    1700:	25 c3       	rjmp	.+1610   	; 0x1d4c <initTimer10Ms+0x6>
    1702:	04 fe       	sbrs	r0, 4
    1704:	c6 11       	cpse	r28, r6
    1706:	09 81       	ldd	r16, Y+1	; 0x01
    1708:	98 95       	break
    170a:	23 51       	subi	r18, 0x13	; 19
    170c:	9a 23       	and	r25, r26
    170e:	c9 a8       	ldd	r12, Y+49	; 0x31
    1710:	15 b3       	in	r17, 0x15	; 21
    1712:	d2 70       	andi	r29, 0x02	; 2
    1714:	fe c7       	rjmp	.+4092   	; 0x2712 <_ZN12MatrixKeypad4scanEv+0x42>
    1716:	13 08       	sbc	r1, r3
    1718:	81 88       	ldd	r8, Z+17	; 0x11
    171a:	95 03       	fmuls	r17, r21
    171c:	51 98       	cbi	0x0a, 1	; 10
    171e:	03 c9       	rjmp	.-3578   	; 0x926 <__LOCK_REGION_LENGTH__+0x526>
    1720:	a6 45       	sbci	r26, 0x56	; 86
    1722:	61 94       	neg	r6
    1724:	25 c3       	rjmp	.+1610   	; 0x1d70 <initTimer10Ms+0x2a>
    1726:	04 fe       	sbrs	r0, 4
    1728:	c8 13       	cpse	r28, r24
    172a:	08 81       	ld	r16, Y
    172c:	88 95       	sleep
    172e:	03 51       	subi	r16, 0x13	; 19
    1730:	98 03       	fmulsu	r17, r16
    1732:	c9 a6       	std	Y+41, r12	; 0x29
    1734:	45 61       	ori	r20, 0x15	; 21
    1736:	94 25       	eor	r25, r4
    1738:	c3 20       	and	r12, r3
    173a:	fe c9       	rjmp	.-3076   	; 0xb38 <__LOCK_REGION_LENGTH__+0x738>
    173c:	0f 26       	eor	r0, r31
    173e:	81 74       	andi	r24, 0x41	; 65
    1740:	35 a5       	ldd	r19, Z+45	; 0x2d
    1742:	f1 14       	cp	r15, r1
    1744:	a6 71       	andi	r26, 0x16	; 22
    1746:	16 2d       	mov	r17, r6
    1748:	00 fe       	sbrs	r0, 0
    174a:	ca 11       	cpse	r28, r10
    174c:	46 81       	ldd	r20, Z+6	; 0x06
    174e:	64 35       	cpi	r22, 0x54	; 84
    1750:	65 51       	subi	r22, 0x15	; 21
    1752:	12 86       	std	Z+10, r1	; 0x0a
    1754:	53 a6       	std	Z+43, r5	; 0x2b
    1756:	c6 59       	subi	r28, 0x96	; 150
    1758:	b4 00       	.word	0x00b4	; ????
    175a:	fe cb       	rjmp	.-2052   	; 0xf58 <__LOCK_REGION_LENGTH__+0xb58>
    175c:	0a 85       	ldd	r16, Y+10	; 0x0a
    175e:	80 68       	ori	r24, 0x80	; 128
    1760:	25 55       	subi	r18, 0x55	; 85
    1762:	b2 41       	sbci	r27, 0x12	; 18
    1764:	fe cc       	rjmp	.-1540   	; 0x1162 <__LOCK_REGION_LENGTH__+0xd62>
    1766:	0c a7       	std	Y+44, r16	; 0x2c
    1768:	80 78       	andi	r24, 0x80	; 128
    176a:	b5 b5       	in	r27, 0x25	; 37
    176c:	a4 d9       	rcall	.-3256   	; 0xab6 <__LOCK_REGION_LENGTH__+0x6b6>
    176e:	30 04       	cpc	r3, r0
    1770:	fe cd       	rjmp	.-1028   	; 0x136e <__LOCK_REGION_LENGTH__+0xf6e>
    1772:	10 66       	ori	r17, 0x60	; 96
    1774:	81 74       	andi	r24, 0x41	; 65
    1776:	97 63       	ori	r25, 0x37	; 55
    1778:	53 1a       	sub	r5, r19
    177a:	4f 61       	ori	r20, 0x1F	; 31
    177c:	1a 67       	ori	r17, 0x7A	; 122
    177e:	d1 02       	muls	r29, r17
    1780:	fe ce       	rjmp	.-516    	; 0x157e <__LOCK_REGION_LENGTH__+0x117e>
    1782:	13 86       	std	Z+11, r1	; 0x0b
    1784:	81 64       	ori	r24, 0x41	; 65
    1786:	97 63       	ori	r25, 0x37	; 55
    1788:	53 16       	cp	r5, r19
    178a:	25 61       	ori	r18, 0x15	; 21
    178c:	38 65       	ori	r19, 0x58	; 88
    178e:	6a 9c       	mul	r6, r10
    1790:	45 0b       	sbc	r20, r21
    1792:	00 fe       	sbrs	r0, 0
    1794:	cf 0c       	add	r12, r15
    1796:	c5 80       	ldd	r12, Z+5	; 0x05
    1798:	68 95       	.word	0x9568	; ????
    179a:	43 52       	subi	r20, 0x23	; 35
    179c:	25 1b       	sub	r18, r21
    179e:	04 fe       	sbrs	r0, 4
    17a0:	d0 0e       	add	r13, r16
    17a2:	e7 80       	ldd	r14, Z+7	; 0x07
    17a4:	78 97       	sbiw	r30, 0x18	; 24
    17a6:	a3 5b       	subi	r26, 0xB3	; 179
    17a8:	4b 9a       	sbi	0x09, 3	; 9
    17aa:	0d 43       	sbci	r16, 0x3D	; 61
    17ac:	00 fe       	sbrs	r0, 0
    17ae:	d1 12       	cpse	r13, r17
    17b0:	09 81       	ldd	r16, Y+1	; 0x01
    17b2:	98 9d       	mul	r25, r8
    17b4:	d3 e4       	ldi	r29, 0x43	; 67
    17b6:	48 8c       	ldd	r4, Y+24	; 0x18
    17b8:	d4 21       	and	r29, r4
    17ba:	07 92       	lat	Z, r0
    17bc:	61 48       	sbci	r22, 0x81	; 129
    17be:	00 fe       	sbrs	r0, 0
    17c0:	d2 0f       	add	r29, r18
    17c2:	c9 80       	ldd	r12, Y+1	; 0x01
    17c4:	98 9d       	mul	r25, r8
    17c6:	d3 94       	inc	r13
    17c8:	30 29       	or	r19, r0
    17ca:	26 d1       	rcall	.+588    	; 0x1a18 <__LOCK_REGION_LENGTH__+0x1618>
    17cc:	30 08       	sbc	r3, r0
    17ce:	fe d3       	rcall	.+2044   	; 0x1fcc <pinMode+0x72>
    17d0:	0e 05       	cpc	r16, r14
    17d2:	81 68       	ori	r24, 0x81	; 129
    17d4:	95 43       	sbci	r25, 0x35	; 53
    17d6:	52 25       	eor	r21, r2
    17d8:	8a c6       	rjmp	.+3348   	; 0x24ee <_ZN17SingleInputKeypad4scanEv+0x86>
    17da:	41 01       	movw	r8, r2
    17dc:	fe d4       	rcall	.+2556   	; 0x21da <_ZN14HardwareSerial5beginEmh+0x2e>
    17de:	0d c5       	rjmp	.+2586   	; 0x21fa <_ZN14HardwareSerial5beginEmh+0x4e>
    17e0:	80 58       	subi	r24, 0x80	; 128
    17e2:	95 43       	sbci	r25, 0x35	; 53
    17e4:	52 12       	cpse	r5, r18
    17e6:	25 c9       	rjmp	.-3510   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
    17e8:	20 fe       	sbrs	r2, 0
    17ea:	d5 12       	cpse	r13, r21
    17ec:	27 81       	ldd	r18, Z+7	; 0x07
    17ee:	85 97       	sbiw	r24, 0x25	; 37
    17f0:	e4 a8       	ldd	r14, Z+52	; 0x34
    17f2:	18 65       	ori	r17, 0x58	; 88
    17f4:	91 36       	cpi	r25, 0x61	; 97
    17f6:	a4 6a       	ori	r26, 0xA4	; 164
    17f8:	32 28       	or	r3, r2
    17fa:	00 fe       	sbrs	r0, 0
    17fc:	d6 13       	cpse	r29, r22
    17fe:	28 85       	ldd	r18, Y+8	; 0x08
    1800:	95 97       	sbiw	r26, 0x25	; 37
    1802:	e4 04       	cpc	r14, r4
    1804:	35 0a       	sbc	r3, r21
    1806:	a3 24       	eor	r10, r3
    1808:	1b d4       	rcall	.+2102   	; 0x2040 <pinMode+0xe6>
    180a:	24 8d       	ldd	r18, Z+28	; 0x1c
    180c:	06 09       	sbc	r16, r6
    180e:	fe d7       	rcall	.+4092   	; 0x280c <_ZN12MatrixKeypad4scanEv+0x13c>
    1810:	0f 05       	cpc	r16, r15
    1812:	81 58       	subi	r24, 0x81	; 129
    1814:	53 47       	sbci	r21, 0x73	; 115
    1816:	a4 4a       	sbci	r26, 0xA4	; 164
    1818:	94 0c       	add	r9, r4
    181a:	e1 a0       	ldd	r14, Z+33	; 0x21
    181c:	00 fe       	sbrs	r0, 0
    181e:	d8 0d       	add	r29, r8
    1820:	c5 80       	ldd	r12, Z+5	; 0x05
    1822:	58 53       	subi	r21, 0x38	; 56
    1824:	47 a4       	ldd	r4, Z+47	; 0x2f
    1826:	24 4a       	sbci	r18, 0xA4	; 164
    1828:	92 41       	sbci	r25, 0x12	; 18
    182a:	fe d9       	rcall	.-3076   	; 0xc28 <__LOCK_REGION_LENGTH__+0x828>
    182c:	11 08       	sbc	r1, r1
    182e:	81 88       	ldd	r8, Z+17	; 0x11
    1830:	0f e4       	ldi	r16, 0x4F	; 79
    1832:	40 0e       	add	r4, r16
    1834:	64 92       	xch	Z, r6
    1836:	b3 9c       	mul	r11, r3
    1838:	0c 43       	sbci	r16, 0x3C	; 60
    183a:	00 fe       	sbrs	r0, 0
    183c:	da 14       	cp	r13, r10
    183e:	09 81       	ldd	r16, Y+1	; 0x01
    1840:	98 0f       	add	r25, r24
    1842:	e4 48       	sbci	r30, 0x84	; 132
    1844:	8e 84       	ldd	r8, Y+14	; 0x0e
    1846:	52 12       	cpse	r5, r18
    1848:	49 49       	sbci	r20, 0x99	; 153
    184a:	9c c4       	rjmp	.+2360   	; 0x2184 <_ZN14HardwareSerial4readEv+0xc>
    184c:	d1 30       	cpi	r29, 0x01	; 1
    184e:	08 fe       	.word	0xfe08	; ????
    1850:	db 0c       	add	r13, r11
    1852:	05 81       	ldd	r16, Z+5	; 0x05
    1854:	58 27       	eor	r21, r24
    1856:	65 61       	ori	r22, 0x15	; 21
    1858:	5a 1d       	adc	r21, r10
    185a:	06 fe       	sbrs	r0, 6
    185c:	dc 0c       	add	r13, r12
    185e:	06 81       	ldd	r16, Z+6	; 0x06
    1860:	68 1b       	sub	r22, r24
    1862:	b6 ca       	rjmp	.-2708   	; 0xdd0 <__LOCK_REGION_LENGTH__+0x9d0>
    1864:	f1 30       	cpi	r31, 0x01	; 1
    1866:	04 fe       	sbrs	r0, 4
    1868:	dd 0d       	add	r29, r13
    186a:	66 81       	ldd	r22, Z+6	; 0x06
    186c:	65 db       	rcall	.-2358   	; 0xf38 <__LOCK_REGION_LENGTH__+0xb38>
    186e:	ab e8       	ldi	r26, 0x8B	; 139
    1870:	98 0c       	add	r9, r8
    1872:	09 00       	.word	0x0009	; ????
    1874:	fe de       	rcall	.-516    	; 0x1672 <__LOCK_REGION_LENGTH__+0x1272>
    1876:	10 67       	ori	r17, 0x70	; 112
    1878:	81 75       	andi	r24, 0x51	; 81
    187a:	1b f7       	brvc	.-58     	; 0x1842 <__LOCK_REGION_LENGTH__+0x1442>
    187c:	12 26       	eor	r1, r18
    187e:	e1 98       	cbi	0x1c, 1	; 28
    1880:	84 d1       	rcall	.+776    	; 0x1b8a <_ZN5Print6printfEPKcz+0x14>
    1882:	10 01       	movw	r2, r0
    1884:	fe df       	rcall	.-4      	; 0x1882 <__LOCK_REGION_LENGTH__+0x1482>
    1886:	09 02       	muls	r16, r25
    1888:	81 28       	or	r8, r1
    188a:	d3 17       	cp	r29, r19
    188c:	05 fe       	sbrs	r0, 5
    188e:	e0 09       	sbc	r30, r0
    1890:	03 81       	ldd	r16, Z+3	; 0x03
    1892:	38 13       	cpse	r19, r24
    1894:	f5 65       	ori	r31, 0x55	; 85
    1896:	fe e1       	ldi	r31, 0x1E	; 30
    1898:	0d 06       	cpc	r0, r29
    189a:	81 64       	ori	r24, 0x41	; 65
    189c:	a7 45       	sbci	r26, 0x57	; 87
    189e:	2d 43       	sbci	r18, 0x3D	; 61
    18a0:	92 b6       	in	r9, 0x32	; 50
    18a2:	02 fe       	sbrs	r0, 2
    18a4:	e2 0d       	add	r30, r2
    18a6:	06 81       	ldd	r16, Z+6	; 0x06
    18a8:	64 a7       	std	Z+44, r22	; 0x2c
    18aa:	45 a5       	ldd	r20, Z+45	; 0x2d
    18ac:	61 49       	sbci	r22, 0x91	; 145
    18ae:	5b 01       	movw	r10, r22
    18b0:	fe e3       	ldi	r31, 0x3E	; 62
    18b2:	0b 86       	std	Y+11, r0	; 0x0b
    18b4:	80 68       	ori	r24, 0x80	; 128
    18b6:	a7 45       	sbci	r26, 0x57	; 87
    18b8:	a5 61       	ori	r26, 0x15	; 21
    18ba:	01 fe       	sbrs	r0, 1
    18bc:	e4 0d       	add	r30, r4
    18be:	87 80       	ldd	r8, Z+7	; 0x07
    18c0:	78 27       	eor	r23, r24
    18c2:	46 59       	subi	r20, 0x96	; 150
    18c4:	94 0c       	add	r9, r4
    18c6:	43 00       	.word	0x0043	; ????
    18c8:	fe e5       	ldi	r31, 0x5E	; 94
    18ca:	0d e7       	ldi	r16, 0x7D	; 125
    18cc:	80 75       	andi	r24, 0x50	; 80
    18ce:	97 63       	ori	r25, 0x37	; 55
    18d0:	a9 6b       	ori	r26, 0xB9	; 185
    18d2:	32 28       	or	r3, r2
    18d4:	00 fe       	sbrs	r0, 0
    18d6:	e6 0f       	add	r30, r22
    18d8:	e8 80       	ld	r14, Y
    18da:	85 97       	sbiw	r24, 0x25	; 37
    18dc:	a3 95       	inc	r26
    18de:	74 4d       	sbci	r23, 0xD4	; 212
    18e0:	d2 68       	ori	r29, 0x82	; 130
    18e2:	90 00       	.word	0x0090	; ????
    18e4:	fe e7       	ldi	r31, 0x7E	; 126
    18e6:	0a c3       	rjmp	.+1556   	; 0x1efc <__vector_14+0x24>
    18e8:	80 38       	cpi	r24, 0x80	; 128
    18ea:	13 47       	sbci	r17, 0x73	; 115
    18ec:	d1 02       	muls	r29, r17
    18ee:	fe e8       	ldi	r31, 0x8E	; 142
    18f0:	0b c4       	rjmp	.+2070   	; 0x2108 <digitalRead+0x12>
    18f2:	80 48       	sbci	r24, 0x80	; 128
    18f4:	93 23       	and	r25, r19
    18f6:	59 65       	ori	r21, 0x59	; 89
    18f8:	08 fe       	.word	0xfe08	; ????
    18fa:	e9 0b       	sbc	r30, r25
    18fc:	84 80       	ldd	r8, Z+4	; 0x04
    18fe:	48 a3       	std	Y+32, r20	; 0x20
    1900:	44 52       	subi	r20, 0x24	; 36
    1902:	a2 00       	.word	0x00a2	; ????
    1904:	fe ea       	ldi	r31, 0xAE	; 174
    1906:	0b a5       	ldd	r16, Y+43	; 0x2b
    1908:	80 58       	subi	r24, 0x80	; 128
    190a:	23 55       	subi	r18, 0x53	; 83
    190c:	a2 68       	ori	r26, 0x82	; 130
    190e:	14 fe       	sbrs	r1, 4
    1910:	eb 0e       	add	r14, r27
    1912:	a7 80       	ldd	r10, Z+7	; 0x07
    1914:	78 25       	eor	r23, r8
    1916:	46 52       	subi	r20, 0x26	; 38
    1918:	a5 69       	ori	r26, 0x95	; 149
    191a:	18 12       	cpse	r1, r24
    191c:	00 fe       	sbrs	r0, 0
    191e:	ec 10       	cpse	r14, r12
    1920:	e6 80       	ldd	r14, Z+6	; 0x06
    1922:	65 15       	cp	r22, r5
    1924:	26 59       	subi	r18, 0x96	; 150
    1926:	12 0d       	add	r17, r2
    1928:	4b 2d       	mov	r20, r11
    192a:	09 33       	cpi	r16, 0x39	; 57
    192c:	00 fe       	sbrs	r0, 0
    192e:	ed 0d       	add	r30, r13
    1930:	e4 84       	ldd	r14, Z+12	; 0x0c
    1932:	65 a3       	std	Z+37, r22	; 0x25
    1934:	44 52       	subi	r20, 0x24	; 36
    1936:	b2 45       	sbci	r27, 0x52	; 82
    1938:	89 04       	cpc	r8, r9
    193a:	fe ee       	ldi	r31, 0xEE	; 238
    193c:	0d e4       	ldi	r16, 0x4D	; 77
    193e:	84 55       	subi	r24, 0x54	; 84
    1940:	a3 44       	sbci	r26, 0x43	; 67
    1942:	52 b2       	in	r5, 0x12	; 18
    1944:	45 89       	ldd	r20, Z+21	; 0x15
    1946:	04 fe       	sbrs	r0, 4
    1948:	ef 10       	cpse	r14, r15
    194a:	07 81       	ldd	r16, Z+7	; 0x07
    194c:	85 2b       	or	r24, r21
    194e:	46 b5       	in	r20, 0x26	; 38
    1950:	28 cb       	rjmp	.-2480   	; 0xfa2 <__LOCK_REGION_LENGTH__+0xba2>
    1952:	86 54       	subi	r24, 0x46	; 70
    1954:	4d 06       	cpc	r4, r29
    1956:	05 fe       	sbrs	r0, 5
    1958:	f0 0e       	add	r15, r16
    195a:	a8 80       	ld	r10, Y
    195c:	86 91       	elpm	r24, Z
    195e:	03 e9       	ldi	r16, 0x93	; 147
    1960:	9a a4       	ldd	r9, Y+42	; 0x2a
    1962:	d1 b0       	in	r13, 0x01	; 1
    1964:	00 fe       	sbrs	r0, 0
    1966:	f1 13       	cpse	r31, r17
    1968:	47 81       	ldd	r20, Z+7	; 0x07
    196a:	83 2b       	or	r24, r19
    196c:	46 b5       	in	r20, 0x26	; 38
    196e:	28 cb       	rjmp	.-2480   	; 0xfc0 <__LOCK_REGION_LENGTH__+0xbc0>
    1970:	86 54       	subi	r24, 0x46	; 70
    1972:	4d 06       	cpc	r4, r29
    1974:	1d 4b       	sbci	r17, 0xBD	; 189
    1976:	22 00       	.word	0x0022	; ????
    1978:	fe f2       	brts	.-66     	; 0x1938 <__LOCK_REGION_LENGTH__+0x1538>
    197a:	12 e8       	ldi	r17, 0x82	; 130
    197c:	80 84       	ldd	r8, Z+8	; 0x08
    197e:	91 03       	fmuls	r17, r17
    1980:	d9 20       	and	r13, r9
    1982:	46 69       	ori	r20, 0x96	; 150
    1984:	32 0c       	add	r3, r2
    1986:	39 98       	cbi	0x07, 1	; 7
    1988:	64 00       	.word	0x0064	; ????
    198a:	fe f3       	brts	.-2      	; 0x198a <__LOCK_REGION_LENGTH__+0x158a>
    198c:	0a c3       	rjmp	.+1556   	; 0x1fa2 <pinMode+0x48>
    198e:	80 36       	cpi	r24, 0x60	; 96
    1990:	55 1a       	sub	r5, r21
    1992:	b2 24       	eor	r11, r2
    1994:	fe f4       	brtc	.+62     	; 0x19d4 <__LOCK_REGION_LENGTH__+0x15d4>
    1996:	0c c4       	rjmp	.+2072   	; 0x21b0 <_ZN14HardwareSerial5beginEmh+0x4>
    1998:	80 46       	sbci	r24, 0x60	; 96
    199a:	95 55       	subi	r25, 0x55	; 85
    199c:	86 30       	cpi	r24, 0x06	; 6
    199e:	49 00       	.word	0x0049	; ????
    19a0:	fe f5       	brtc	.+126    	; 0x1a20 <__LOCK_REGION_LENGTH__+0x1620>
    19a2:	10 26       	eor	r1, r16
    19a4:	81 67       	ori	r24, 0x71	; 113
    19a6:	31 24       	eor	r3, r1
    19a8:	69 92       	st	Y+, r6
    19aa:	25 59       	subi	r18, 0x95	; 149
    19ac:	d4 a7       	std	Z+44, r29	; 0x2c
    19ae:	29 04       	cpc	r2, r9
    19b0:	fe f6       	brtc	.-66     	; 0x1970 <__LOCK_REGION_LENGTH__+0x1570>
    19b2:	12 07       	cpc	r17, r18
    19b4:	81 78       	andi	r24, 0x81	; 129
    19b6:	31 24       	eor	r3, r1
    19b8:	71 94       	neg	r7
    19ba:	45 59       	subi	r20, 0x95	; 149
    19bc:	29 8b       	std	Y+17, r18	; 0x11
    19be:	b2 44       	sbci	r27, 0x42	; 66
    19c0:	9a 02       	muls	r25, r26
    19c2:	fe f7       	brtc	.-2      	; 0x19c2 <__LOCK_REGION_LENGTH__+0x15c2>
    19c4:	0f 05       	cpc	r16, r15
    19c6:	85 68       	ori	r24, 0x85	; 133
    19c8:	91 d9       	rcall	.-3294   	; 0xcec <__LOCK_REGION_LENGTH__+0x8ec>
    19ca:	92 28       	or	r9, r2
    19cc:	51 a2       	std	Z+33, r5	; 0x21
    19ce:	6d 18       	sub	r6, r13
    19d0:	02 fe       	sbrs	r0, 2
    19d2:	f8 13       	cpse	r31, r24
    19d4:	47 81       	ldd	r20, Z+7	; 0x07
    19d6:	78 93       	.word	0x9378	; ????
    19d8:	c6 5a       	subi	r28, 0xA6	; 166
    19da:	94 45       	sbci	r25, 0x54	; 84
    19dc:	59 94       	.word	0x9459	; ????
    19de:	95 b2       	in	r9, 0x15	; 21
    19e0:	28 4b       	sbci	r18, 0xB8	; 184
    19e2:	a4 29       	or	r26, r4
    19e4:	fe f9       	.word	0xf9fe	; ????
    19e6:	12 65       	ori	r17, 0x52	; 82
    19e8:	85 65       	ori	r24, 0x55	; 85
    19ea:	a9 69       	ori	r26, 0x99	; 153
    19ec:	49 94       	.word	0x9449	; ????
    19ee:	44 49       	sbci	r20, 0x94	; 148
    19f0:	a2 2c       	mov	r10, r2
    19f2:	a1 16       	cp	r10, r17
    19f4:	6a 00       	.word	0x006a	; ????
    19f6:	fe fa       	.word	0xfafe	; ????
    19f8:	12 66       	ori	r17, 0x62	; 98
    19fa:	85 74       	andi	r24, 0x45	; 69
    19fc:	99 64       	ori	r25, 0x49	; 73
    19fe:	49 96       	adiw	r24, 0x19	; 25
    1a00:	64 51       	subi	r22, 0x14	; 20
    1a02:	2f ca       	rjmp	.-2978   	; 0xe62 <__LOCK_REGION_LENGTH__+0xa62>
    1a04:	14 8b       	std	Z+20, r17	; 0x14
    1a06:	22 00       	.word	0x0022	; ????
    1a08:	fe fb       	.word	0xfbfe	; ????
    1a0a:	0f 05       	cpc	r16, r15
    1a0c:	85 68       	ori	r24, 0x85	; 133
    1a0e:	a9 d9       	rcall	.-3246   	; 0xd62 <__LOCK_REGION_LENGTH__+0x962>
    1a10:	92 28       	or	r9, r2
    1a12:	89 92       	st	Y+, r8
    1a14:	64 90       	lpm	r6, Z
    1a16:	00 fe       	sbrs	r0, 0
    1a18:	fc 0f       	add	r31, r28
    1a1a:	06 85       	ldd	r16, Z+14	; 0x0e
    1a1c:	78 99       	sbic	0x0f, 0	; 15
    1a1e:	64 49       	sbci	r22, 0x94	; 148
    1a20:	96 64       	ori	r25, 0x46	; 70
    1a22:	51 2f       	mov	r21, r17
    1a24:	ca 14       	cp	r12, r10
    1a26:	fe ff       	.word	0xfffe	; ????
    1a28:	07 00       	.word	0x0007	; ????
    1a2a:	80 08       	sbc	r8, r0
    1a2c:	01 00       	.word	0x0001	; ????
	...

00001a30 <__ctors_start>:
    1a30:	b1 11       	cpse	r27, r1
    1a32:	1b 13       	cpse	r17, r27
    1a34:	da 14       	cp	r13, r10
    1a36:	72 24       	eor	r7, r2

00001a38 <__ctors_end>:
    1a38:	11 24       	eor	r1, r1
    1a3a:	1f be       	out	0x3f, r1	; 63
    1a3c:	cf ef       	ldi	r28, 0xFF	; 255
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	df e3       	ldi	r29, 0x3F	; 63
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	00 e0       	ldi	r16, 0x00	; 0
    1a46:	0c bf       	out	0x3c, r16	; 60
    1a48:	18 be       	out	0x38, r1	; 56
    1a4a:	19 be       	out	0x39, r1	; 57
    1a4c:	1a be       	out	0x3a, r1	; 58
    1a4e:	1b be       	out	0x3b, r1	; 59

00001a50 <__do_copy_data>:
    1a50:	19 e2       	ldi	r17, 0x29	; 41
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b0 e2       	ldi	r27, 0x20	; 32
    1a56:	ea e9       	ldi	r30, 0x9A	; 154
    1a58:	f3 e5       	ldi	r31, 0x53	; 83
    1a5a:	00 e0       	ldi	r16, 0x00	; 0
    1a5c:	0b bf       	out	0x3b, r16	; 59
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <__do_copy_data+0x14>
    1a60:	07 90       	elpm	r0, Z+
    1a62:	0d 92       	st	X+, r0
    1a64:	aa 35       	cpi	r26, 0x5A	; 90
    1a66:	b1 07       	cpc	r27, r17
    1a68:	d9 f7       	brne	.-10     	; 0x1a60 <__do_copy_data+0x10>
    1a6a:	1b be       	out	0x3b, r1	; 59

00001a6c <__do_clear_bss>:
    1a6c:	24 e3       	ldi	r18, 0x34	; 52
    1a6e:	aa e5       	ldi	r26, 0x5A	; 90
    1a70:	b9 e2       	ldi	r27, 0x29	; 41
    1a72:	01 c0       	rjmp	.+2      	; 0x1a76 <.do_clear_bss_start>

00001a74 <.do_clear_bss_loop>:
    1a74:	1d 92       	st	X+, r1

00001a76 <.do_clear_bss_start>:
    1a76:	a1 38       	cpi	r26, 0x81	; 129
    1a78:	b2 07       	cpc	r27, r18
    1a7a:	e1 f7       	brne	.-8      	; 0x1a74 <.do_clear_bss_loop>

00001a7c <__do_global_ctors>:
    1a7c:	1d e0       	ldi	r17, 0x0D	; 13
    1a7e:	cc e1       	ldi	r28, 0x1C	; 28
    1a80:	dd e0       	ldi	r29, 0x0D	; 13
    1a82:	00 e0       	ldi	r16, 0x00	; 0
    1a84:	06 c0       	rjmp	.+12     	; 0x1a92 <__do_global_ctors+0x16>
    1a86:	21 97       	sbiw	r28, 0x01	; 1
    1a88:	01 09       	sbc	r16, r1
    1a8a:	80 2f       	mov	r24, r16
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__tablejump2__>
    1a92:	c8 31       	cpi	r28, 0x18	; 24
    1a94:	d1 07       	cpc	r29, r17
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	08 07       	cpc	r16, r24
    1a9a:	a9 f7       	brne	.-22     	; 0x1a86 <__do_global_ctors+0xa>
    1a9c:	0e 94 89 23 	call	0x4712	; 0x4712 <main>
    1aa0:	0c 94 cb 29 	jmp	0x5396	; 0x5396 <_exit>

00001aa4 <__bad_interrupt>:
    1aa4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001aa8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	08 95       	ret

00001aae <_ZN5Print5flushEv>:

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1aae:	08 95       	ret

00001ab0 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable &x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    1ab0:	cf 92       	push	r12
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	41 15       	cp	r20, r1
    1ac2:	51 05       	cpc	r21, r1
    1ac4:	c1 f0       	breq	.+48     	; 0x1af6 <_ZN5Print5writeEPKhj+0x46>
    1ac6:	6a 01       	movw	r12, r20
    1ac8:	8c 01       	movw	r16, r24
    1aca:	e6 2e       	mov	r14, r22
    1acc:	f7 2e       	mov	r15, r23
    1ace:	c0 e0       	ldi	r28, 0x00	; 0
    1ad0:	d0 e0       	ldi	r29, 0x00	; 0
    1ad2:	d7 01       	movw	r26, r14
    1ad4:	6d 91       	ld	r22, X+
    1ad6:	7d 01       	movw	r14, r26
    1ad8:	d8 01       	movw	r26, r16
    1ada:	ed 91       	ld	r30, X+
    1adc:	fc 91       	ld	r31, X
    1ade:	01 90       	ld	r0, Z+
    1ae0:	f0 81       	ld	r31, Z
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	19 95       	eicall
    1ae8:	89 2b       	or	r24, r25
    1aea:	39 f0       	breq	.+14     	; 0x1afa <_ZN5Print5writeEPKhj+0x4a>
    1aec:	21 96       	adiw	r28, 0x01	; 1
    1aee:	cc 16       	cp	r12, r28
    1af0:	dd 06       	cpc	r13, r29
    1af2:	79 f7       	brne	.-34     	; 0x1ad2 <_ZN5Print5writeEPKhj+0x22>
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <_ZN5Print5writeEPKhj+0x4a>
    1af6:	c0 e0       	ldi	r28, 0x00	; 0
    1af8:	d0 e0       	ldi	r29, 0x00	; 0
    1afa:	ce 01       	movw	r24, r28
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	ff 90       	pop	r15
    1b06:	ef 90       	pop	r14
    1b08:	df 90       	pop	r13
    1b0a:	cf 90       	pop	r12
    1b0c:	08 95       	ret

00001b0e <_ZL14printf_putcharcP6__file>:
    1b0e:	fb 01       	movw	r30, r22
    1b10:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b12:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b14:	ed 91       	ld	r30, X+
    1b16:	fc 91       	ld	r31, X
    1b18:	11 97       	sbiw	r26, 0x01	; 1
    1b1a:	01 90       	ld	r0, Z+
    1b1c:	f0 81       	ld	r31, Z
    1b1e:	e0 2d       	mov	r30, r0
    1b20:	68 2f       	mov	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	19 95       	eicall
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	08 95       	ret

00001b2c <_ZN5Print5printERK6String>:
    1b2c:	db 01       	movw	r26, r22
    1b2e:	14 96       	adiw	r26, 0x04	; 4
    1b30:	4d 91       	ld	r20, X+
    1b32:	5c 91       	ld	r21, X
    1b34:	15 97       	sbiw	r26, 0x05	; 5
    1b36:	6d 91       	ld	r22, X+
    1b38:	7c 91       	ld	r23, X
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	ed 91       	ld	r30, X+
    1b3e:	fc 91       	ld	r31, X
    1b40:	02 80       	ldd	r0, Z+2	; 0x02
    1b42:	f3 81       	ldd	r31, Z+3	; 0x03
    1b44:	e0 2d       	mov	r30, r0
    1b46:	19 95       	eicall
    1b48:	08 95       	ret

00001b4a <_ZN5Print5printEPKc>:
    1b4a:	61 15       	cp	r22, r1
    1b4c:	71 05       	cpc	r23, r1
    1b4e:	81 f0       	breq	.+32     	; 0x1b70 <_ZN5Print5printEPKc+0x26>
    1b50:	fb 01       	movw	r30, r22
    1b52:	01 90       	ld	r0, Z+
    1b54:	00 20       	and	r0, r0
    1b56:	e9 f7       	brne	.-6      	; 0x1b52 <_ZN5Print5printEPKc+0x8>
    1b58:	31 97       	sbiw	r30, 0x01	; 1
    1b5a:	af 01       	movw	r20, r30
    1b5c:	46 1b       	sub	r20, r22
    1b5e:	57 0b       	sbc	r21, r23
    1b60:	dc 01       	movw	r26, r24
    1b62:	ed 91       	ld	r30, X+
    1b64:	fc 91       	ld	r31, X
    1b66:	02 80       	ldd	r0, Z+2	; 0x02
    1b68:	f3 81       	ldd	r31, Z+3	; 0x03
    1b6a:	e0 2d       	mov	r30, r0
    1b6c:	19 95       	eicall
    1b6e:	08 95       	ret
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	08 95       	ret

00001b76 <_ZN5Print6printfEPKcz>:
  ((class Print *)(fdev_get_udata(fp)))->write((uint8_t)c);
  return 0;
}

int16_t Print::printf(const char *format, ...)
{
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	2e 97       	sbiw	r28, 0x0e	; 14
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	de bf       	out	0x3e, r29	; 62
  FILE f;
  va_list ap;

  fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
    1b84:	87 e8       	ldi	r24, 0x87	; 135
    1b86:	9d e0       	ldi	r25, 0x0D	; 13
    1b88:	89 87       	std	Y+9, r24	; 0x09
    1b8a:	9a 87       	std	Y+10, r25	; 0x0a
    1b8c:	1b 86       	std	Y+11, r1	; 0x0b
    1b8e:	1c 86       	std	Y+12, r1	; 0x0c
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	8c 83       	std	Y+4, r24	; 0x04
  fdev_set_udata(&f, this);
    1b94:	8c 89       	ldd	r24, Y+20	; 0x14
    1b96:	9d 89       	ldd	r25, Y+21	; 0x15
    1b98:	8d 87       	std	Y+13, r24	; 0x0d
    1b9a:	9e 87       	std	Y+14, r25	; 0x0e
  va_start(ap, format);
  return vfprintf(&f, format, ap);
    1b9c:	ae 01       	movw	r20, r28
    1b9e:	48 5e       	subi	r20, 0xE8	; 232
    1ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba2:	6e 89       	ldd	r22, Y+22	; 0x16
    1ba4:	7f 89       	ldd	r23, Y+23	; 0x17
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	01 96       	adiw	r24, 0x01	; 1
    1baa:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <vfprintf>
}
    1bae:	2e 96       	adiw	r28, 0x0e	; 14
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	08 95       	ret

00001bba <_ZN6StringD1Ev>:
/*********************************************/

unsigned char String::concat(const String &s)
{
  return concat(s.buffer, s.len);
}
    1bba:	fc 01       	movw	r30, r24
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	0e 94 92 25 	call	0x4b24	; 0x4b24 <free>
    1bc4:	08 95       	ret

00001bc6 <_ZN6String10invalidateEv>:
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	ec 01       	movw	r28, r24
    1bcc:	88 81       	ld	r24, Y
    1bce:	99 81       	ldd	r25, Y+1	; 0x01
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	11 f0       	breq	.+4      	; 0x1bd8 <_ZN6String10invalidateEv+0x12>
    1bd4:	0e 94 92 25 	call	0x4b24	; 0x4b24 <free>
    1bd8:	18 82       	st	Y, r1
    1bda:	19 82       	std	Y+1, r1	; 0x01
    1bdc:	1c 82       	std	Y+4, r1	; 0x04
    1bde:	1d 82       	std	Y+5, r1	; 0x05
    1be0:	1a 82       	std	Y+2, r1	; 0x02
    1be2:	1b 82       	std	Y+3, r1	; 0x03
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	08 95       	ret

00001bea <_ZN6String12changeBufferEj>:
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	ec 01       	movw	r28, r24
    1bf4:	8b 01       	movw	r16, r22
    1bf6:	6f 5f       	subi	r22, 0xFF	; 255
    1bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfa:	88 81       	ld	r24, Y
    1bfc:	99 81       	ldd	r25, Y+1	; 0x01
    1bfe:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <realloc>
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	31 f0       	breq	.+12     	; 0x1c12 <_ZN6String12changeBufferEj+0x28>
    1c06:	88 83       	st	Y, r24
    1c08:	99 83       	std	Y+1, r25	; 0x01
    1c0a:	0a 83       	std	Y+2, r16	; 0x02
    1c0c:	1b 83       	std	Y+3, r17	; 0x03
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <_ZN6String12changeBufferEj+0x2a>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	08 95       	ret

00001c1e <_ZN6String7reserveEj>:
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	fc 01       	movw	r30, r24
    1c24:	20 81       	ld	r18, Z
    1c26:	31 81       	ldd	r19, Z+1	; 0x01
    1c28:	23 2b       	or	r18, r19
    1c2a:	29 f0       	breq	.+10     	; 0x1c36 <_ZN6String7reserveEj+0x18>
    1c2c:	22 81       	ldd	r18, Z+2	; 0x02
    1c2e:	33 81       	ldd	r19, Z+3	; 0x03
    1c30:	26 17       	cp	r18, r22
    1c32:	37 07       	cpc	r19, r23
    1c34:	70 f4       	brcc	.+28     	; 0x1c52 <_ZN6String7reserveEj+0x34>
    1c36:	ec 01       	movw	r28, r24
    1c38:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN6String12changeBufferEj>
    1c3c:	88 23       	and	r24, r24
    1c3e:	61 f0       	breq	.+24     	; 0x1c58 <_ZN6String7reserveEj+0x3a>
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	89 2b       	or	r24, r25
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <_ZN6String7reserveEj+0x38>
    1c48:	e8 81       	ld	r30, Y
    1c4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c4c:	10 82       	st	Z, r1
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	03 c0       	rjmp	.+6      	; 0x1c58 <_ZN6String7reserveEj+0x3a>
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	01 c0       	rjmp	.+2      	; 0x1c58 <_ZN6String7reserveEj+0x3a>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	08 95       	ret

00001c5e <_ZN6String4copyEPKcj>:
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	ec 01       	movw	r28, r24
    1c6c:	7b 01       	movw	r14, r22
    1c6e:	8a 01       	movw	r16, r20
    1c70:	ba 01       	movw	r22, r20
    1c72:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN6String7reserveEj>
    1c76:	81 11       	cpse	r24, r1
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <_ZN6String4copyEPKcj+0x24>
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN6String10invalidateEv>
    1c80:	07 c0       	rjmp	.+14     	; 0x1c90 <_ZN6String4copyEPKcj+0x32>
    1c82:	0c 83       	std	Y+4, r16	; 0x04
    1c84:	1d 83       	std	Y+5, r17	; 0x05
    1c86:	b7 01       	movw	r22, r14
    1c88:	88 81       	ld	r24, Y
    1c8a:	99 81       	ldd	r25, Y+1	; 0x01
    1c8c:	0e 94 10 27 	call	0x4e20	; 0x4e20 <strcpy>
    1c90:	ce 01       	movw	r24, r28
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	08 95       	ret

00001ca0 <_ZN6StringC1EPKc>:
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	10 82       	st	Z, r1
    1ca4:	11 82       	std	Z+1, r1	; 0x01
    1ca6:	12 82       	std	Z+2, r1	; 0x02
    1ca8:	13 82       	std	Z+3, r1	; 0x03
    1caa:	14 82       	std	Z+4, r1	; 0x04
    1cac:	15 82       	std	Z+5, r1	; 0x05
    1cae:	61 15       	cp	r22, r1
    1cb0:	71 05       	cpc	r23, r1
    1cb2:	51 f0       	breq	.+20     	; 0x1cc8 <_ZN6StringC1EPKc+0x28>
    1cb4:	fb 01       	movw	r30, r22
    1cb6:	01 90       	ld	r0, Z+
    1cb8:	00 20       	and	r0, r0
    1cba:	e9 f7       	brne	.-6      	; 0x1cb6 <_ZN6StringC1EPKc+0x16>
    1cbc:	31 97       	sbiw	r30, 0x01	; 1
    1cbe:	af 01       	movw	r20, r30
    1cc0:	46 1b       	sub	r20, r22
    1cc2:	57 0b       	sbc	r21, r23
    1cc4:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <_ZN6String4copyEPKcj>
    1cc8:	08 95       	ret

00001cca <_ZN6String6concatEPKcj>:
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	61 15       	cp	r22, r1
    1cd8:	71 05       	cpc	r23, r1
    1cda:	d9 f0       	breq	.+54     	; 0x1d12 <_ZN6String6concatEPKcj+0x48>
    1cdc:	41 15       	cp	r20, r1
    1cde:	51 05       	cpc	r21, r1
    1ce0:	d1 f0       	breq	.+52     	; 0x1d16 <_ZN6String6concatEPKcj+0x4c>
    1ce2:	8b 01       	movw	r16, r22
    1ce4:	ec 01       	movw	r28, r24
    1ce6:	ec 80       	ldd	r14, Y+4	; 0x04
    1ce8:	fd 80       	ldd	r15, Y+5	; 0x05
    1cea:	e4 0e       	add	r14, r20
    1cec:	f5 1e       	adc	r15, r21
    1cee:	b7 01       	movw	r22, r14
    1cf0:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN6String7reserveEj>
    1cf4:	88 23       	and	r24, r24
    1cf6:	81 f0       	breq	.+32     	; 0x1d18 <_ZN6String6concatEPKcj+0x4e>
    1cf8:	28 81       	ld	r18, Y
    1cfa:	39 81       	ldd	r19, Y+1	; 0x01
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1d00:	b8 01       	movw	r22, r16
    1d02:	82 0f       	add	r24, r18
    1d04:	93 1f       	adc	r25, r19
    1d06:	0e 94 10 27 	call	0x4e20	; 0x4e20 <strcpy>
    1d0a:	ec 82       	std	Y+4, r14	; 0x04
    1d0c:	fd 82       	std	Y+5, r15	; 0x05
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <_ZN6String6concatEPKcj+0x4e>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	01 c0       	rjmp	.+2      	; 0x1d18 <_ZN6String6concatEPKcj+0x4e>
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	ff 90       	pop	r15
    1d22:	ef 90       	pop	r14
    1d24:	08 95       	ret

00001d26 <_ZN6String6concatEPKc>:
  return 1;
}

unsigned char String::concat(const char *cstr)
{
  if (!cstr) return 0;
    1d26:	61 15       	cp	r22, r1
    1d28:	71 05       	cpc	r23, r1
    1d2a:	59 f0       	breq	.+22     	; 0x1d42 <_ZN6String6concatEPKc+0x1c>
  return concat(cstr, strlen(cstr));
    1d2c:	fb 01       	movw	r30, r22
    1d2e:	01 90       	ld	r0, Z+
    1d30:	00 20       	and	r0, r0
    1d32:	e9 f7       	brne	.-6      	; 0x1d2e <_ZN6String6concatEPKc+0x8>
    1d34:	31 97       	sbiw	r30, 0x01	; 1
    1d36:	af 01       	movw	r20, r30
    1d38:	46 1b       	sub	r20, r22
    1d3a:	57 0b       	sbc	r21, r23
    1d3c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <_ZN6String6concatEPKcj>
    1d40:	08 95       	ret
  return 1;
}

unsigned char String::concat(const char *cstr)
{
  if (!cstr) return 0;
    1d42:	80 e0       	ldi	r24, 0x00	; 0
  return concat(cstr, strlen(cstr));
}
    1d44:	08 95       	ret

00001d46 <initTimer10Ms>:

	// Note: The correct PORTC direction for the Compare Channels
	// outputs is configured in the ports_init function.

	// Save interrupts enabled/disabled state
	s=SREG;
    1d46:	9f b7       	in	r25, 0x3f	; 63
	// Disable interrupts
	cli();
    1d48:	f8 94       	cli

	// Disable and reset the timer/counter just to be sure
	tc_disable(tc_regs[timerNumber]);
    1d4a:	e8 2f       	mov	r30, r24
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	ea 5f       	subi	r30, 0xFA	; 250
    1d54:	ff 4d       	sbci	r31, 0xDF	; 223
    1d56:	a0 81       	ld	r26, Z
    1d58:	b1 81       	ldd	r27, Z+1	; 0x01


void tc_disable(TC0_t *ptc)
{
	// Timer/Counter off
	ptc->CTRLA = TC_CLKSEL_OFF_gc;
    1d5a:	1c 92       	st	X, r1
	// Issue a reset command
	ptc->CTRLFSET = TC_CMD_RESET_gc;
    1d5c:	8c e0       	ldi	r24, 0x0C	; 12
    1d5e:	19 96       	adiw	r26, 0x09	; 9
    1d60:	8c 93       	st	X, r24
	cli();

	// Disable and reset the timer/counter just to be sure
	tc_disable(tc_regs[timerNumber]);
	// Clock source: ClkPer/1
	tc_regs[timerNumber]->CTRLA=TC_CLKSEL_DIV1_gc;
    1d62:	a0 81       	ld	r26, Z
    1d64:	b1 81       	ldd	r27, Z+1	; 0x01
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	8c 93       	st	X, r24
	// Mode: Normal Operation, Overflow Int./Event on TOP
	// Compare/Capture on channel A: Off
	// Compare/Capture on channel B: Off
	tc_regs[timerNumber]->CTRLB=(0<<TC1_CCBEN_bp) | (0<<TC1_CCAEN_bp) |
    1d6a:	a0 81       	ld	r26, Z
    1d6c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	1c 92       	st	X, r1
	TC_WGMODE_NORMAL_gc;
	// Capture event source: None
	// Capture event action: None
	tc_regs[timerNumber]->CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1d72:	a0 81       	ld	r26, Z
    1d74:	b1 81       	ldd	r27, Z+1	; 0x01
    1d76:	13 96       	adiw	r26, 0x03	; 3
    1d78:	1c 92       	st	X, r1

	// Set Timer/Counter in Normal mode
	tc_regs[timerNumber]->CTRLE=TC_BYTEM_NORMAL_gc;
    1d7a:	a0 81       	ld	r26, Z
    1d7c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d7e:	14 96       	adiw	r26, 0x04	; 4
    1d80:	1c 92       	st	X, r1

	// Overflow interrupt: High Level
	// Error interrupt: Disabled
	tc_regs[timerNumber]->INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_HI_gc;
    1d82:	a0 81       	ld	r26, Z
    1d84:	b1 81       	ldd	r27, Z+1	; 0x01
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	16 96       	adiw	r26, 0x06	; 6
    1d8a:	8c 93       	st	X, r24

	// Compare/Capture channel A interrupt: Disabled
	// Compare/Capture channel B interrupt: Disabled
	tc_regs[timerNumber]->INTCTRLB=TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1d8c:	a0 81       	ld	r26, Z
    1d8e:	b1 81       	ldd	r27, Z+1	; 0x01
    1d90:	17 96       	adiw	r26, 0x07	; 7
    1d92:	1c 92       	st	X, r1

	// High resolution extension: Off
	tc_regs[timerNumber]->CTRLA&= ~HIRES_HREN1_bm;
    1d94:	a0 81       	ld	r26, Z
    1d96:	b1 81       	ldd	r27, Z+1	; 0x01
    1d98:	8c 91       	ld	r24, X
    1d9a:	8d 7f       	andi	r24, 0xFD	; 253
    1d9c:	8c 93       	st	X, r24

	// Clear the interrupt flags
	tc_regs[timerNumber]->INTFLAGS=TCC1.INTFLAGS;
    1d9e:	01 90       	ld	r0, Z+
    1da0:	f0 81       	ld	r31, Z
    1da2:	e0 2d       	mov	r30, r0
    1da4:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <__TEXT_REGION_LENGTH__+0x70084c>
    1da8:	84 87       	std	Z+12, r24	; 0x0c
	// Set Counter register
	tc_regs[timerNumber]->CNT=0x0000;
    1daa:	10 a2       	std	Z+32, r1	; 0x20
    1dac:	11 a2       	std	Z+33, r1	; 0x21
	// Set Period register
	tc_regs[timerNumber]->PER=0x4E1F;
    1dae:	2f e1       	ldi	r18, 0x1F	; 31
    1db0:	3e e4       	ldi	r19, 0x4E	; 78
    1db2:	26 a3       	std	Z+38, r18	; 0x26
    1db4:	37 a3       	std	Z+39, r19	; 0x27
	// Set channel A Compare/Capture register
	tc_regs[timerNumber]->CCA=0x0000;
    1db6:	10 a6       	std	Z+40, r1	; 0x28
    1db8:	11 a6       	std	Z+41, r1	; 0x29
	// Set channel B Compare/Capture register
	tc_regs[timerNumber]->CCB=0x0000;
    1dba:	12 a6       	std	Z+42, r1	; 0x2a
    1dbc:	13 a6       	std	Z+43, r1	; 0x2b

	// Restore interrupts enabled/disabled state
	SREG=s;
    1dbe:	9f bf       	out	0x3f, r25	; 63
	sei();
    1dc0:	78 94       	sei
    1dc2:	08 95       	ret

00001dc4 <clockConfig>:


void clockConfig(void){
	unsigned char n,s;
	// Save interrupts enabled/disabled state
	s=SREG;
    1dc4:	9f b7       	in	r25, 0x3f	; 63
	// Disable interrupts
	cli();
    1dc6:	f8 94       	cli

	// Internal 32 kHz RC oscillator initialization
	// Enable the internal 32 kHz RC oscillator
	OSC.CTRL|=OSC_RC32KEN_bm;
    1dc8:	e0 e5       	ldi	r30, 0x50	; 80
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	84 60       	ori	r24, 0x04	; 4
    1dd0:	80 83       	st	Z, r24
	// Wait for the internal 32 kHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC32KRDY_bm)==0);
    1dd2:	81 81       	ldd	r24, Z+1	; 0x01
    1dd4:	82 ff       	sbrs	r24, 2
    1dd6:	fd cf       	rjmp	.-6      	; 0x1dd2 <clockConfig+0xe>

	// Internal 32 MHz RC oscillator initialization
	// Enable the internal 32 MHz RC oscillator
	OSC.CTRL|=OSC_RC32MEN_bm;
    1dd8:	e0 e5       	ldi	r30, 0x50	; 80
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	82 60       	ori	r24, 0x02	; 2
    1de0:	80 83       	st	Z, r24
	// System Clock prescalers B & C division factors: B:1, C:1
	// ClkPer4: 32000.000 kHz
	// ClkPer2: 32000.000 kHz
	// ClkPer:  32000.000 kHz
	// ClkCPU:  32000.000 kHz
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
    1de2:	a0 e4       	ldi	r26, 0x40	; 64
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	11 96       	adiw	r26, 0x01	; 1
    1de8:	8c 91       	ld	r24, X
    1dea:	11 97       	sbiw	r26, 0x01	; 1
    1dec:	80 78       	andi	r24, 0x80	; 128
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
	CCP=CCP_IOREG_gc;
    1dee:	28 ed       	ldi	r18, 0xD8	; 216
    1df0:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
    1df2:	11 96       	adiw	r26, 0x01	; 1
    1df4:	8c 93       	st	X, r24

	// Internal 32 MHz RC osc. calibration reference clock source: 32.768 kHz Internal Osc.
	OSC.DFLLCTRL=(OSC.DFLLCTRL & (~(OSC_RC32MCREF_gm | OSC_RC2MCREF_bm))) | OSC_RC32MCREF_RC32K_gc;
    1df6:	86 81       	ldd	r24, Z+6	; 0x06
    1df8:	88 7f       	andi	r24, 0xF8	; 248
    1dfa:	86 83       	std	Z+6, r24	; 0x06
	// Enable the auto-calibration of the internal 32 MHz RC oscillator
	DFLLRC32M.CTRL|=DFLL_ENABLE_bm;
    1dfc:	e0 e6       	ldi	r30, 0x60	; 96
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	81 60       	ori	r24, 0x01	; 1
    1e04:	80 83       	st	Z, r24

	// Wait for the internal 32 MHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC32MRDY_bm)==0);
    1e06:	e0 e5       	ldi	r30, 0x50	; 80
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	81 81       	ldd	r24, Z+1	; 0x01
    1e0c:	81 ff       	sbrs	r24, 1
    1e0e:	fd cf       	rjmp	.-6      	; 0x1e0a <clockConfig+0x46>

	// Select the system clock source: 32 MHz Internal RC Osc.
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC32M_gc;
    1e10:	e0 e4       	ldi	r30, 0x40	; 64
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	88 7f       	andi	r24, 0xF8	; 248
    1e18:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
    1e1a:	28 ed       	ldi	r18, 0xD8	; 216
    1e1c:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
    1e1e:	80 83       	st	Z, r24

	// Disable the unused oscillators: 2 MHz, external clock/crystal oscillator, PLL
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    1e20:	e0 e5       	ldi	r30, 0x50	; 80
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	86 7e       	andi	r24, 0xE6	; 230
    1e28:	80 83       	st	Z, r24

	// ClkPer output disabled
	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
    1e2a:	e0 eb       	ldi	r30, 0xB0	; 176
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	84 81       	ldd	r24, Z+4	; 0x04
    1e30:	80 7f       	andi	r24, 0xF0	; 240
    1e32:	84 83       	std	Z+4, r24	; 0x04
	// Restore interrupts enabled/disabled state
	SREG=s;
    1e34:	9f bf       	out	0x3f, r25	; 63
    1e36:	08 95       	ret

00001e38 <millisTimerConfig>:

	// Note: The correct PORTC direction for the Compare Channels
	// outputs is configured in the ports_init function.

	// Save interrupts enabled/disabled state
	s=SREG;
    1e38:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
    1e3a:	f8 94       	cli


void tc_disable(TC0_t *ptc)
{
	// Timer/Counter off
	ptc->CTRLA = TC_CLKSEL_OFF_gc;
    1e3c:	e0 e0       	ldi	r30, 0x00	; 0
    1e3e:	f8 e0       	ldi	r31, 0x08	; 8
    1e40:	10 82       	st	Z, r1
	// Issue a reset command
	ptc->CTRLFSET = TC_CMD_RESET_gc;
    1e42:	8c e0       	ldi	r24, 0x0C	; 12
    1e44:	81 87       	std	Z+9, r24	; 0x09
	cli();

	// Disable and reset the timer/counter just to be sure
	tc_disable(&TCC0);
	// Clock source: ClkPer/1
	TCC0.CTRLA=TC_CLKSEL_DIV1_gc;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	80 83       	st	Z, r24
	// Mode: Normal Operation, Overflow Int./Event on TOP
	// Compare/Capture on channel A: Off
	// Compare/Capture on channel B: Off
	// Compare/Capture on channel C: Off
	// Compare/Capture on channel D: Off
	TCC0.CTRLB=(0<<TC0_CCDEN_bp) | (0<<TC0_CCCEN_bp) | (0<<TC0_CCBEN_bp) | (0<<TC0_CCAEN_bp) |
    1e4a:	11 82       	std	Z+1, r1	; 0x01
	TC_WGMODE_NORMAL_gc;
	// Capture event source: None
	// Capture event action: None
	TCC0.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1e4c:	13 82       	std	Z+3, r1	; 0x03

	// Set Timer/Counter in Normal mode
	TCC0.CTRLE=TC_BYTEM_NORMAL_gc;
    1e4e:	14 82       	std	Z+4, r1	; 0x04

	// Overflow interrupt: High Level
	// Error interrupt: Disabled
	TCC0.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_HI_gc;
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	86 83       	std	Z+6, r24	; 0x06

	// Compare/Capture channel A interrupt: Disabled
	// Compare/Capture channel B interrupt: Disabled
	// Compare/Capture channel C interrupt: Disabled
	// Compare/Capture channel D interrupt: Disabled
	TCC0.INTCTRLB=TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
    1e54:	17 82       	std	Z+7, r1	; 0x07

	// High resolution extension: Off
	HIRESC.CTRLA&= ~HIRES_HREN0_bm;
    1e56:	a0 e9       	ldi	r26, 0x90	; 144
    1e58:	b8 e0       	ldi	r27, 0x08	; 8
    1e5a:	8c 91       	ld	r24, X
    1e5c:	8e 7f       	andi	r24, 0xFE	; 254
    1e5e:	8c 93       	st	X, r24

	// Advanced Waveform Extension initialization
	// Disable locking the AWEX configuration registers just to be sure
	n=MCU.AWEXLOCK & (~MCU_AWEXCLOCK_bm);
    1e60:	a0 e9       	ldi	r26, 0x90	; 144
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	19 96       	adiw	r26, 0x09	; 9
    1e66:	8c 91       	ld	r24, X
    1e68:	19 97       	sbiw	r26, 0x09	; 9
    1e6a:	8e 7f       	andi	r24, 0xFE	; 254
	CCP=CCP_IOREG_gc;
    1e6c:	98 ed       	ldi	r25, 0xD8	; 216
    1e6e:	94 bf       	out	0x34, r25	; 52
	MCU.AWEXLOCK=n;
    1e70:	19 96       	adiw	r26, 0x09	; 9
    1e72:	8c 93       	st	X, r24
	// Restore optimization for size if needed

	// Pattern generation: Off
	// Dead time insertion: Off
	AWEXC.CTRL=(0<<AWEX_PGM_bp) | (0<<AWEX_CWCM_bp) | (0<<AWEX_DTICCDEN_bp) | (0<<AWEX_DTICCCEN_bp) |
    1e74:	a0 e8       	ldi	r26, 0x80	; 128
    1e76:	b8 e0       	ldi	r27, 0x08	; 8
    1e78:	1c 92       	st	X, r1

	// Fault protection initialization
	// Fault detection on OCD Break detection: On
	// Fault detection restart mode: Latched Mode
	// Fault detection action: None (Fault protection disabled)
	AWEXC.FDCTRL=(AWEXC.FDCTRL & (~(AWEX_FDDBD_bm | AWEX_FDMODE_bm | AWEX_FDACT_gm))) |
    1e7a:	13 96       	adiw	r26, 0x03	; 3
    1e7c:	8c 91       	ld	r24, X
    1e7e:	13 97       	sbiw	r26, 0x03	; 3
    1e80:	88 7e       	andi	r24, 0xE8	; 232
    1e82:	13 96       	adiw	r26, 0x03	; 3
    1e84:	8c 93       	st	X, r24
    1e86:	13 97       	sbiw	r26, 0x03	; 3
	// Event channel 3: Off
	// Event channel 4: Off
	// Event channel 5: Off
	// Event channel 6: Off
	// Event channel 7: Off
	AWEXC.FDEMASK=0b00000000;
    1e88:	12 96       	adiw	r26, 0x02	; 2
    1e8a:	1c 92       	st	X, r1
    1e8c:	12 97       	sbiw	r26, 0x02	; 2
	// Make sure the fault detect flag is cleared
	AWEXC.STATUS|=AWEXC.STATUS & AWEX_FDF_bm;
    1e8e:	14 96       	adiw	r26, 0x04	; 4
    1e90:	8c 91       	ld	r24, X
    1e92:	14 97       	sbiw	r26, 0x04	; 4
    1e94:	14 96       	adiw	r26, 0x04	; 4
    1e96:	9c 91       	ld	r25, X
    1e98:	14 97       	sbiw	r26, 0x04	; 4
    1e9a:	84 70       	andi	r24, 0x04	; 4
    1e9c:	89 2b       	or	r24, r25
    1e9e:	14 96       	adiw	r26, 0x04	; 4
    1ea0:	8c 93       	st	X, r24

	// Clear the interrupt flags
	TCC0.INTFLAGS=TCC0.INTFLAGS;
    1ea2:	84 85       	ldd	r24, Z+12	; 0x0c
    1ea4:	84 87       	std	Z+12, r24	; 0x0c
	// Set Counter register
	TCC0.CNT=0x0000;
    1ea6:	10 a2       	std	Z+32, r1	; 0x20
    1ea8:	11 a2       	std	Z+33, r1	; 0x21
	// Set Period register
	TCC0.PER=0x7CFF;
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	9c e7       	ldi	r25, 0x7C	; 124
    1eae:	86 a3       	std	Z+38, r24	; 0x26
    1eb0:	97 a3       	std	Z+39, r25	; 0x27
	// Set channel A Compare/Capture register
	TCC0.CCA=0x0000;
    1eb2:	10 a6       	std	Z+40, r1	; 0x28
    1eb4:	11 a6       	std	Z+41, r1	; 0x29
	// Set channel B Compare/Capture register
	TCC0.CCB=0x0000;
    1eb6:	12 a6       	std	Z+42, r1	; 0x2a
    1eb8:	13 a6       	std	Z+43, r1	; 0x2b
	// Set channel C Compare/Capture register
	TCC0.CCC=0x0000;
    1eba:	14 a6       	std	Z+44, r1	; 0x2c
    1ebc:	15 a6       	std	Z+45, r1	; 0x2d
	// Set channel D Compare/Capture register
	TCC0.CCD=0x0000;
    1ebe:	16 a6       	std	Z+46, r1	; 0x2e
    1ec0:	17 a6       	std	Z+47, r1	; 0x2f

	// Restore interrupts enabled/disabled state
	SREG=s;
    1ec2:	2f bf       	out	0x3f, r18	; 63
    1ec4:	08 95       	ret

00001ec6 <millis>:
}

inline unsigned long millis(void){
	return millisTimer;
    1ec6:	60 91 5a 29 	lds	r22, 0x295A	; 0x80295a <__data_end>
    1eca:	70 91 5b 29 	lds	r23, 0x295B	; 0x80295b <__data_end+0x1>
    1ece:	80 91 5c 29 	lds	r24, 0x295C	; 0x80295c <__data_end+0x2>
    1ed2:	90 91 5d 29 	lds	r25, 0x295D	; 0x80295d <__data_end+0x3>
}
    1ed6:	08 95       	ret

00001ed8 <__vector_14>:


ISR(TCC0_OVF_vect)
{
    1ed8:	1f 92       	push	r1
    1eda:	0f 92       	push	r0
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	0f 92       	push	r0
    1ee0:	11 24       	eor	r1, r1
    1ee2:	08 b6       	in	r0, 0x38	; 56
    1ee4:	0f 92       	push	r0
    1ee6:	18 be       	out	0x38, r1	; 56
    1ee8:	09 b6       	in	r0, 0x39	; 57
    1eea:	0f 92       	push	r0
    1eec:	19 be       	out	0x39, r1	; 57
    1eee:	0b b6       	in	r0, 0x3b	; 59
    1ef0:	0f 92       	push	r0
    1ef2:	1b be       	out	0x3b, r1	; 59
    1ef4:	2f 93       	push	r18
    1ef6:	8f 93       	push	r24
    1ef8:	9f 93       	push	r25
    1efa:	af 93       	push	r26
    1efc:	bf 93       	push	r27
    1efe:	ef 93       	push	r30
    1f00:	ff 93       	push	r31
	// Save interrupts enabled/disabled state
	unsigned char s = SREG;
    1f02:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
    1f04:	f8 94       	cli
	millisTimer++;
    1f06:	80 91 5a 29 	lds	r24, 0x295A	; 0x80295a <__data_end>
    1f0a:	90 91 5b 29 	lds	r25, 0x295B	; 0x80295b <__data_end+0x1>
    1f0e:	a0 91 5c 29 	lds	r26, 0x295C	; 0x80295c <__data_end+0x2>
    1f12:	b0 91 5d 29 	lds	r27, 0x295D	; 0x80295d <__data_end+0x3>
    1f16:	01 96       	adiw	r24, 0x01	; 1
    1f18:	a1 1d       	adc	r26, r1
    1f1a:	b1 1d       	adc	r27, r1
    1f1c:	80 93 5a 29 	sts	0x295A, r24	; 0x80295a <__data_end>
    1f20:	90 93 5b 29 	sts	0x295B, r25	; 0x80295b <__data_end+0x1>
    1f24:	a0 93 5c 29 	sts	0x295C, r26	; 0x80295c <__data_end+0x2>
    1f28:	b0 93 5d 29 	sts	0x295D, r27	; 0x80295d <__data_end+0x3>
	// Restore interrupts enabled/disabled state
	TCC0.INTFLAGS=TCC0.INTFLAGS;
    1f2c:	e0 e0       	ldi	r30, 0x00	; 0
    1f2e:	f8 e0       	ldi	r31, 0x08	; 8
    1f30:	84 85       	ldd	r24, Z+12	; 0x0c
    1f32:	84 87       	std	Z+12, r24	; 0x0c
	SREG = s;
    1f34:	2f bf       	out	0x3f, r18	; 63
    1f36:	ff 91       	pop	r31
    1f38:	ef 91       	pop	r30
    1f3a:	bf 91       	pop	r27
    1f3c:	af 91       	pop	r26
    1f3e:	9f 91       	pop	r25
    1f40:	8f 91       	pop	r24
    1f42:	2f 91       	pop	r18
    1f44:	0f 90       	pop	r0
    1f46:	0b be       	out	0x3b, r0	; 59
    1f48:	0f 90       	pop	r0
    1f4a:	09 be       	out	0x39, r0	; 57
    1f4c:	0f 90       	pop	r0
    1f4e:	08 be       	out	0x38, r0	; 56
    1f50:	0f 90       	pop	r0
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	0f 90       	pop	r0
    1f56:	1f 90       	pop	r1
    1f58:	18 95       	reti

00001f5a <pinMode>:
#endif



void pinMode(uint8_t pin, uint8_t mode)
{
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
	if (mode == INPUT)
    1f5e:	61 11       	cpse	r22, r1
    1f60:	25 c0       	rjmp	.+74     	; 0x1fac <pinMode+0x52>
	{
		regs[pin]->DIRSET &= ~_BV(bitNum[pin]);
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	fc 01       	movw	r30, r24
    1f66:	ee 0f       	add	r30, r30
    1f68:	ff 1f       	adc	r31, r31
    1f6a:	e0 5f       	subi	r30, 0xF0	; 240
    1f6c:	ff 4d       	sbci	r31, 0xDF	; 223
    1f6e:	a0 81       	ld	r26, Z
    1f70:	b1 81       	ldd	r27, Z+1	; 0x01
    1f72:	11 96       	adiw	r26, 0x01	; 1
    1f74:	2c 91       	ld	r18, X
    1f76:	11 97       	sbiw	r26, 0x01	; 1
    1f78:	ec 01       	movw	r28, r24
    1f7a:	cc 52       	subi	r28, 0x2C	; 44
    1f7c:	df 4d       	sbci	r29, 0xDF	; 223
    1f7e:	38 81       	ld	r19, Y
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	03 2e       	mov	r0, r19
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <pinMode+0x32>
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	0a 94       	dec	r0
    1f8e:	e2 f7       	brpl	.-8      	; 0x1f88 <pinMode+0x2e>
    1f90:	80 95       	com	r24
    1f92:	82 23       	and	r24, r18
    1f94:	11 96       	adiw	r26, 0x01	; 1
    1f96:	8c 93       	st	X, r24
		*(((uint8_t *)&regs[pin]->PIN0CTRL) + bitNum[pin]) |= PORT_OPC_PULLDOWN_gc | PORT_ISC_LEVEL_gc;
    1f98:	01 90       	ld	r0, Z+
    1f9a:	f0 81       	ld	r31, Z
    1f9c:	e0 2d       	mov	r30, r0
    1f9e:	70 96       	adiw	r30, 0x10	; 16
    1fa0:	e3 0f       	add	r30, r19
    1fa2:	f1 1d       	adc	r31, r1
    1fa4:	80 81       	ld	r24, Z
    1fa6:	83 61       	ori	r24, 0x13	; 19
    1fa8:	80 83       	st	Z, r24
    1faa:	72 c0       	rjmp	.+228    	; 0x2090 <pinMode+0x136>
	}
	else if (mode == INPUT_PULLUP)
    1fac:	62 30       	cpi	r22, 0x02	; 2
    1fae:	29 f5       	brne	.+74     	; 0x1ffa <pinMode+0xa0>
	{
		regs[pin]->DIRSET &= ~_BV(bitNum[pin]);
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	ee 0f       	add	r30, r30
    1fb6:	ff 1f       	adc	r31, r31
    1fb8:	e0 5f       	subi	r30, 0xF0	; 240
    1fba:	ff 4d       	sbci	r31, 0xDF	; 223
    1fbc:	a0 81       	ld	r26, Z
    1fbe:	b1 81       	ldd	r27, Z+1	; 0x01
    1fc0:	11 96       	adiw	r26, 0x01	; 1
    1fc2:	2c 91       	ld	r18, X
    1fc4:	11 97       	sbiw	r26, 0x01	; 1
    1fc6:	ec 01       	movw	r28, r24
    1fc8:	cc 52       	subi	r28, 0x2C	; 44
    1fca:	df 4d       	sbci	r29, 0xDF	; 223
    1fcc:	38 81       	ld	r19, Y
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	03 2e       	mov	r0, r19
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <pinMode+0x80>
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	0a 94       	dec	r0
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <pinMode+0x7c>
    1fde:	80 95       	com	r24
    1fe0:	82 23       	and	r24, r18
    1fe2:	11 96       	adiw	r26, 0x01	; 1
    1fe4:	8c 93       	st	X, r24
		*(((uint8_t *)&regs[pin]->PIN0CTRL) + bitNum[pin]) |= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
    1fe6:	01 90       	ld	r0, Z+
    1fe8:	f0 81       	ld	r31, Z
    1fea:	e0 2d       	mov	r30, r0
    1fec:	70 96       	adiw	r30, 0x10	; 16
    1fee:	e3 0f       	add	r30, r19
    1ff0:	f1 1d       	adc	r31, r1
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8b 61       	ori	r24, 0x1B	; 27
    1ff6:	80 83       	st	Z, r24
    1ff8:	4b c0       	rjmp	.+150    	; 0x2090 <pinMode+0x136>
	}
	else if (mode == OUTPUT)
    1ffa:	61 30       	cpi	r22, 0x01	; 1
    1ffc:	21 f5       	brne	.+72     	; 0x2046 <pinMode+0xec>
	{
		regs[pin]->DIRSET |= _BV(bitNum[pin]);
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	fc 01       	movw	r30, r24
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	e0 5f       	subi	r30, 0xF0	; 240
    2008:	ff 4d       	sbci	r31, 0xDF	; 223
    200a:	a0 81       	ld	r26, Z
    200c:	b1 81       	ldd	r27, Z+1	; 0x01
    200e:	11 96       	adiw	r26, 0x01	; 1
    2010:	3c 91       	ld	r19, X
    2012:	11 97       	sbiw	r26, 0x01	; 1
    2014:	ec 01       	movw	r28, r24
    2016:	cc 52       	subi	r28, 0x2C	; 44
    2018:	df 4d       	sbci	r29, 0xDF	; 223
    201a:	28 81       	ld	r18, Y
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	02 2e       	mov	r0, r18
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <pinMode+0xce>
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	0a 94       	dec	r0
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <pinMode+0xca>
    202c:	83 2b       	or	r24, r19
    202e:	11 96       	adiw	r26, 0x01	; 1
    2030:	8c 93       	st	X, r24
		*(((uint8_t *)(&(regs[pin]->PIN0CTRL))) + bitNum[pin]) |= PORT_OPC_PULLDOWN_gc | PORT_ISC_LEVEL_gc;
    2032:	01 90       	ld	r0, Z+
    2034:	f0 81       	ld	r31, Z
    2036:	e0 2d       	mov	r30, r0
    2038:	70 96       	adiw	r30, 0x10	; 16
    203a:	e2 0f       	add	r30, r18
    203c:	f1 1d       	adc	r31, r1
    203e:	80 81       	ld	r24, Z
    2040:	83 61       	ori	r24, 0x13	; 19
    2042:	80 83       	st	Z, r24
    2044:	25 c0       	rjmp	.+74     	; 0x2090 <pinMode+0x136>
	}
	else if (mode == OUTPUT_PULLUP)
    2046:	63 30       	cpi	r22, 0x03	; 3
    2048:	19 f5       	brne	.+70     	; 0x2090 <pinMode+0x136>
	{
		regs[pin]->DIRSET |= _BV(bitNum[pin]);
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	fc 01       	movw	r30, r24
    204e:	ee 0f       	add	r30, r30
    2050:	ff 1f       	adc	r31, r31
    2052:	e0 5f       	subi	r30, 0xF0	; 240
    2054:	ff 4d       	sbci	r31, 0xDF	; 223
    2056:	a0 81       	ld	r26, Z
    2058:	b1 81       	ldd	r27, Z+1	; 0x01
    205a:	11 96       	adiw	r26, 0x01	; 1
    205c:	3c 91       	ld	r19, X
    205e:	11 97       	sbiw	r26, 0x01	; 1
    2060:	ec 01       	movw	r28, r24
    2062:	cc 52       	subi	r28, 0x2C	; 44
    2064:	df 4d       	sbci	r29, 0xDF	; 223
    2066:	28 81       	ld	r18, Y
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <pinMode+0x11a>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <pinMode+0x116>
    2078:	83 2b       	or	r24, r19
    207a:	11 96       	adiw	r26, 0x01	; 1
    207c:	8c 93       	st	X, r24
		*(((uint8_t *)&regs[pin]->PIN0CTRL) + bitNum[pin]) |= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
    207e:	01 90       	ld	r0, Z+
    2080:	f0 81       	ld	r31, Z
    2082:	e0 2d       	mov	r30, r0
    2084:	70 96       	adiw	r30, 0x10	; 16
    2086:	e2 0f       	add	r30, r18
    2088:	f1 1d       	adc	r31, r1
    208a:	80 81       	ld	r24, Z
    208c:	8b 61       	ori	r24, 0x1B	; 27
    208e:	80 83       	st	Z, r24
	}
}
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	08 95       	ret

00002096 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (!val)
    2096:	61 11       	cpse	r22, r1
    2098:	17 c0       	rjmp	.+46     	; 0x20c8 <digitalWrite+0x32>
	{
		regs[pin]->OUTCLR = _BV(bitNum[pin]);
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	fc 01       	movw	r30, r24
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	e0 5f       	subi	r30, 0xF0	; 240
    20a4:	ff 4d       	sbci	r31, 0xDF	; 223
    20a6:	01 90       	ld	r0, Z+
    20a8:	f0 81       	ld	r31, Z
    20aa:	e0 2d       	mov	r30, r0
    20ac:	dc 01       	movw	r26, r24
    20ae:	ac 52       	subi	r26, 0x2C	; 44
    20b0:	bf 4d       	sbci	r27, 0xDF	; 223
    20b2:	21 e0       	ldi	r18, 0x01	; 1
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	c9 01       	movw	r24, r18
    20b8:	0c 90       	ld	r0, X
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <digitalWrite+0x2a>
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	0a 94       	dec	r0
    20c2:	e2 f7       	brpl	.-8      	; 0x20bc <digitalWrite+0x26>
    20c4:	86 83       	std	Z+6, r24	; 0x06
    20c6:	08 95       	ret
	}
	else
	{
		regs[pin]->OUTSET = _BV(bitNum[pin]);
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	fc 01       	movw	r30, r24
    20cc:	ee 0f       	add	r30, r30
    20ce:	ff 1f       	adc	r31, r31
    20d0:	e0 5f       	subi	r30, 0xF0	; 240
    20d2:	ff 4d       	sbci	r31, 0xDF	; 223
    20d4:	01 90       	ld	r0, Z+
    20d6:	f0 81       	ld	r31, Z
    20d8:	e0 2d       	mov	r30, r0
    20da:	dc 01       	movw	r26, r24
    20dc:	ac 52       	subi	r26, 0x2C	; 44
    20de:	bf 4d       	sbci	r27, 0xDF	; 223
    20e0:	21 e0       	ldi	r18, 0x01	; 1
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	c9 01       	movw	r24, r18
    20e6:	0c 90       	ld	r0, X
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <digitalWrite+0x58>
    20ea:	88 0f       	add	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	0a 94       	dec	r0
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <digitalWrite+0x54>
    20f2:	85 83       	std	Z+5, r24	; 0x05
    20f4:	08 95       	ret

000020f6 <digitalRead>:
	}
}

int digitalRead(uint8_t pin)
{
	return bitRead(regs[pin]->IN,bitNum[pin]);
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	f9 01       	movw	r30, r18
    20fc:	ee 0f       	add	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	e0 5f       	subi	r30, 0xF0	; 240
    2102:	ff 4d       	sbci	r31, 0xDF	; 223
    2104:	01 90       	ld	r0, Z+
    2106:	f0 81       	ld	r31, Z
    2108:	e0 2d       	mov	r30, r0
    210a:	80 85       	ldd	r24, Z+8	; 0x08
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	f9 01       	movw	r30, r18
    2110:	ec 52       	subi	r30, 0x2C	; 44
    2112:	ff 4d       	sbci	r31, 0xDF	; 223
    2114:	00 80       	ld	r0, Z
    2116:	02 c0       	rjmp	.+4      	; 0x211c <digitalRead+0x26>
    2118:	95 95       	asr	r25
    211a:	87 95       	ror	r24
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <digitalRead+0x22>
}
    2120:	81 70       	andi	r24, 0x01	; 1
    2122:	99 27       	eor	r25, r25
    2124:	08 95       	ret

00002126 <_ZN14HardwareSerial5writeEh>:
	for (uint16_t i = 0; i < len; i++)
	{
		this->write(str[i]);
	}
	return 1;
}
    2126:	8f 5e       	subi	r24, 0xEF	; 239
    2128:	9b 4f       	sbci	r25, 0xFB	; 251
    212a:	dc 01       	movw	r26, r24
    212c:	ed 91       	ld	r30, X+
    212e:	fc 91       	ld	r31, X
    2130:	81 81       	ldd	r24, Z+1	; 0x01
    2132:	85 ff       	sbrs	r24, 5
    2134:	fd cf       	rjmp	.-6      	; 0x2130 <_ZN14HardwareSerial5writeEh+0xa>
    2136:	60 83       	st	Z, r22
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	08 95       	ret

0000213e <_ZN14HardwareSerial9availableEv>:
    213e:	fc 01       	movw	r30, r24
    2140:	25 85       	ldd	r18, Z+13	; 0x0d
    2142:	36 85       	ldd	r19, Z+14	; 0x0e
    2144:	87 85       	ldd	r24, Z+15	; 0x0f
    2146:	90 89       	ldd	r25, Z+16	; 0x10
    2148:	a9 01       	movw	r20, r18
    214a:	48 1b       	sub	r20, r24
    214c:	59 0b       	sbc	r21, r25
    214e:	ca 01       	movw	r24, r20
    2150:	93 70       	andi	r25, 0x03	; 3
    2152:	08 95       	ret

00002154 <_ZN14HardwareSerial4peekEv>:
    2154:	fc 01       	movw	r30, r24
    2156:	25 85       	ldd	r18, Z+13	; 0x0d
    2158:	36 85       	ldd	r19, Z+14	; 0x0e
    215a:	87 85       	ldd	r24, Z+15	; 0x0f
    215c:	90 89       	ldd	r25, Z+16	; 0x10
    215e:	28 17       	cp	r18, r24
    2160:	39 07       	cpc	r19, r25
    2162:	39 f0       	breq	.+14     	; 0x2172 <_ZN14HardwareSerial4peekEv+0x1e>
    2164:	87 85       	ldd	r24, Z+15	; 0x0f
    2166:	90 89       	ldd	r25, Z+16	; 0x10
    2168:	e8 0f       	add	r30, r24
    216a:	f9 1f       	adc	r31, r25
    216c:	81 89       	ldd	r24, Z+17	; 0x11
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	08 95       	ret
    2172:	8f ef       	ldi	r24, 0xFF	; 255
    2174:	9f ef       	ldi	r25, 0xFF	; 255
    2176:	08 95       	ret

00002178 <_ZN14HardwareSerial4readEv>:
    2178:	fc 01       	movw	r30, r24
    217a:	25 85       	ldd	r18, Z+13	; 0x0d
    217c:	36 85       	ldd	r19, Z+14	; 0x0e
    217e:	87 85       	ldd	r24, Z+15	; 0x0f
    2180:	90 89       	ldd	r25, Z+16	; 0x10
    2182:	28 17       	cp	r18, r24
    2184:	39 07       	cpc	r19, r25
    2186:	79 f0       	breq	.+30     	; 0x21a6 <_ZN14HardwareSerial4readEv+0x2e>
    2188:	a7 85       	ldd	r26, Z+15	; 0x0f
    218a:	b0 89       	ldd	r27, Z+16	; 0x10
    218c:	ae 0f       	add	r26, r30
    218e:	bf 1f       	adc	r27, r31
    2190:	51 96       	adiw	r26, 0x11	; 17
    2192:	8c 91       	ld	r24, X
    2194:	27 85       	ldd	r18, Z+15	; 0x0f
    2196:	30 89       	ldd	r19, Z+16	; 0x10
    2198:	2f 5f       	subi	r18, 0xFF	; 255
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	33 70       	andi	r19, 0x03	; 3
    219e:	27 87       	std	Z+15, r18	; 0x0f
    21a0:	30 8b       	std	Z+16, r19	; 0x10
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	08 95       	ret
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	9f ef       	ldi	r25, 0xFF	; 255
    21aa:	08 95       	ret

000021ac <_ZN14HardwareSerial5beginEmh>:
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	dc 01       	movw	r26, r24
    21b2:	e0 ea       	ldi	r30, 0xA0	; 160
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	92 81       	ldd	r25, Z+2	; 0x02
    21b8:	98 73       	andi	r25, 0x38	; 56
    21ba:	96 60       	ori	r25, 0x06	; 6
    21bc:	88 ed       	ldi	r24, 0xD8	; 216
    21be:	84 bf       	out	0x34, r24	; 52
    21c0:	92 83       	std	Z+2, r25	; 0x02
    21c2:	11 82       	std	Z+1, r1	; 0x01
    21c4:	fd 01       	movw	r30, r26
    21c6:	ef 5e       	subi	r30, 0xEF	; 239
    21c8:	fb 4f       	sbci	r31, 0xFB	; 251
    21ca:	80 81       	ld	r24, Z
    21cc:	91 81       	ldd	r25, Z+1	; 0x01
    21ce:	80 3a       	cpi	r24, 0xA0	; 160
    21d0:	99 40       	sbci	r25, 0x09	; 9
    21d2:	29 f4       	brne	.+10     	; 0x21de <_ZN14HardwareSerial5beginEmh+0x32>
    21d4:	e0 e6       	ldi	r30, 0x60	; 96
    21d6:	f6 e0       	ldi	r31, 0x06	; 6
    21d8:	88 e0       	ldi	r24, 0x08	; 8
    21da:	85 83       	std	Z+5, r24	; 0x05
    21dc:	81 83       	std	Z+1, r24	; 0x01
    21de:	fd 01       	movw	r30, r26
    21e0:	ef 5e       	subi	r30, 0xEF	; 239
    21e2:	fb 4f       	sbci	r31, 0xFB	; 251
    21e4:	80 81       	ld	r24, Z
    21e6:	91 81       	ldd	r25, Z+1	; 0x01
    21e8:	80 3a       	cpi	r24, 0xA0	; 160
    21ea:	9a 40       	sbci	r25, 0x0A	; 10
    21ec:	29 f4       	brne	.+10     	; 0x21f8 <_ZN14HardwareSerial5beginEmh+0x4c>
    21ee:	e0 e8       	ldi	r30, 0x80	; 128
    21f0:	f6 e0       	ldi	r31, 0x06	; 6
    21f2:	88 e0       	ldi	r24, 0x08	; 8
    21f4:	85 83       	std	Z+5, r24	; 0x05
    21f6:	81 83       	std	Z+1, r24	; 0x01
    21f8:	fd 01       	movw	r30, r26
    21fa:	ef 5e       	subi	r30, 0xEF	; 239
    21fc:	fb 4f       	sbci	r31, 0xFB	; 251
    21fe:	c0 81       	ld	r28, Z
    2200:	d1 81       	ldd	r29, Z+1	; 0x01
    2202:	83 e0       	ldi	r24, 0x03	; 3
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	c0 81       	ld	r28, Z
    2208:	d1 81       	ldd	r29, Z+1	; 0x01
    220a:	9b 81       	ldd	r25, Y+3	; 0x03
    220c:	90 7c       	andi	r25, 0xC0	; 192
    220e:	90 63       	ori	r25, 0x30	; 48
    2210:	9b 83       	std	Y+3, r25	; 0x03
    2212:	c0 81       	ld	r28, Z
    2214:	d1 81       	ldd	r29, Z+1	; 0x01
    2216:	8e e2       	ldi	r24, 0x2E	; 46
    2218:	8e 83       	std	Y+6, r24	; 0x06
    221a:	c0 81       	ld	r28, Z
    221c:	d1 81       	ldd	r29, Z+1	; 0x01
    221e:	88 e9       	ldi	r24, 0x98	; 152
    2220:	8f 83       	std	Y+7, r24	; 0x07
    2222:	01 90       	ld	r0, Z+
    2224:	f0 81       	ld	r31, Z
    2226:	e0 2d       	mov	r30, r0
    2228:	94 81       	ldd	r25, Z+4	; 0x04
    222a:	90 7e       	andi	r25, 0xE0	; 224
    222c:	98 61       	ori	r25, 0x18	; 24
    222e:	94 83       	std	Z+4, r25	; 0x04
    2230:	1c 96       	adiw	r26, 0x0c	; 12
    2232:	1c 92       	st	X, r1
    2234:	78 94       	sei
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	08 95       	ret

0000223c <_ZN14HardwareSerial16_rx_complete_irqEv>:
	}
}

void HardwareSerial::_rx_complete_irq(void)
{
	cli();
    223c:	f8 94       	cli
	if ((this->_regs->STATUS & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
    223e:	fc 01       	movw	r30, r24
    2240:	ef 5e       	subi	r30, 0xEF	; 239
    2242:	fb 4f       	sbci	r31, 0xFB	; 251
    2244:	01 90       	ld	r0, Z+
    2246:	f0 81       	ld	r31, Z
    2248:	e0 2d       	mov	r30, r0
    224a:	21 81       	ldd	r18, Z+1	; 0x01
    224c:	2c 71       	andi	r18, 0x1C	; 28
    224e:	e1 f4       	brne	.+56     	; 0x2288 <_ZN14HardwareSerial16_rx_complete_irqEv+0x4c>
	{
		// No Parity error, read byte and store it in the buffer if there is
		// room
		unsigned char c = this->_regs->DATA;
    2250:	60 81       	ld	r22, Z
		rx_buffer_index_t i = (unsigned int)(this->_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2252:	dc 01       	movw	r26, r24
    2254:	1d 96       	adiw	r26, 0x0d	; 13
    2256:	2d 91       	ld	r18, X+
    2258:	3c 91       	ld	r19, X
    225a:	1e 97       	sbiw	r26, 0x0e	; 14
    225c:	2f 5f       	subi	r18, 0xFF	; 255
    225e:	3f 4f       	sbci	r19, 0xFF	; 255
    2260:	33 70       	andi	r19, 0x03	; 3
		// if we should be storing the received character into the location
		// just before the tail (meaning that the head would advance to the
		// current location of the tail), we're about to overflow the buffer
		// and so we don't write the character or advance the head.
		if (i != this->_rx_buffer_tail)
    2262:	1f 96       	adiw	r26, 0x0f	; 15
    2264:	4d 91       	ld	r20, X+
    2266:	5c 91       	ld	r21, X
    2268:	50 97       	sbiw	r26, 0x10	; 16
    226a:	24 17       	cp	r18, r20
    226c:	35 07       	cpc	r19, r21
    226e:	69 f0       	breq	.+26     	; 0x228a <_ZN14HardwareSerial16_rx_complete_irqEv+0x4e>
		{
			this->_rx_buffer[this->_rx_buffer_head] = c;
    2270:	1d 96       	adiw	r26, 0x0d	; 13
    2272:	ed 91       	ld	r30, X+
    2274:	fc 91       	ld	r31, X
    2276:	1e 97       	sbiw	r26, 0x0e	; 14
    2278:	e8 0f       	add	r30, r24
    227a:	f9 1f       	adc	r31, r25
    227c:	61 8b       	std	Z+17, r22	; 0x11
			this->_rx_buffer_head = i;
    227e:	1d 96       	adiw	r26, 0x0d	; 13
    2280:	2d 93       	st	X+, r18
    2282:	3c 93       	st	X, r19
    2284:	1e 97       	sbiw	r26, 0x0e	; 14
    2286:	01 c0       	rjmp	.+2      	; 0x228a <_ZN14HardwareSerial16_rx_complete_irqEv+0x4e>
		}
	}
	else
	{
		// Parity error, read byte but discard it
		this->_regs->DATA;
    2288:	80 81       	ld	r24, Z
	};

	sei();
    228a:	78 94       	sei
    228c:	08 95       	ret

0000228e <__vector_88>:
}
#endif

#ifdef D0
ISR(USARTD0_RXC_vect)
{
    228e:	1f 92       	push	r1
    2290:	0f 92       	push	r0
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	0f 92       	push	r0
    2296:	11 24       	eor	r1, r1
    2298:	08 b6       	in	r0, 0x38	; 56
    229a:	0f 92       	push	r0
    229c:	18 be       	out	0x38, r1	; 56
    229e:	09 b6       	in	r0, 0x39	; 57
    22a0:	0f 92       	push	r0
    22a2:	19 be       	out	0x39, r1	; 57
    22a4:	0b b6       	in	r0, 0x3b	; 59
    22a6:	0f 92       	push	r0
    22a8:	1b be       	out	0x3b, r1	; 59
    22aa:	2f 93       	push	r18
    22ac:	3f 93       	push	r19
    22ae:	4f 93       	push	r20
    22b0:	5f 93       	push	r21
    22b2:	6f 93       	push	r22
    22b4:	7f 93       	push	r23
    22b6:	8f 93       	push	r24
    22b8:	9f 93       	push	r25
    22ba:	af 93       	push	r26
    22bc:	bf 93       	push	r27
    22be:	ef 93       	push	r30
    22c0:	ff 93       	push	r31
	Serial3._rx_complete_irq();
    22c2:	81 e7       	ldi	r24, 0x71	; 113
    22c4:	9d e2       	ldi	r25, 0x2D	; 45
    22c6:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN14HardwareSerial16_rx_complete_irqEv>
}
    22ca:	ff 91       	pop	r31
    22cc:	ef 91       	pop	r30
    22ce:	bf 91       	pop	r27
    22d0:	af 91       	pop	r26
    22d2:	9f 91       	pop	r25
    22d4:	8f 91       	pop	r24
    22d6:	7f 91       	pop	r23
    22d8:	6f 91       	pop	r22
    22da:	5f 91       	pop	r21
    22dc:	4f 91       	pop	r20
    22de:	3f 91       	pop	r19
    22e0:	2f 91       	pop	r18
    22e2:	0f 90       	pop	r0
    22e4:	0b be       	out	0x3b, r0	; 59
    22e6:	0f 90       	pop	r0
    22e8:	09 be       	out	0x39, r0	; 57
    22ea:	0f 90       	pop	r0
    22ec:	08 be       	out	0x38, r0	; 56
    22ee:	0f 90       	pop	r0
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	0f 90       	pop	r0
    22f4:	1f 90       	pop	r1
    22f6:	18 95       	reti

000022f8 <__vector_58>:
}
#endif

#ifdef E0
ISR(USARTE0_RXC_vect)
{
    22f8:	1f 92       	push	r1
    22fa:	0f 92       	push	r0
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	0f 92       	push	r0
    2300:	11 24       	eor	r1, r1
    2302:	08 b6       	in	r0, 0x38	; 56
    2304:	0f 92       	push	r0
    2306:	18 be       	out	0x38, r1	; 56
    2308:	09 b6       	in	r0, 0x39	; 57
    230a:	0f 92       	push	r0
    230c:	19 be       	out	0x39, r1	; 57
    230e:	0b b6       	in	r0, 0x3b	; 59
    2310:	0f 92       	push	r0
    2312:	1b be       	out	0x3b, r1	; 59
    2314:	2f 93       	push	r18
    2316:	3f 93       	push	r19
    2318:	4f 93       	push	r20
    231a:	5f 93       	push	r21
    231c:	6f 93       	push	r22
    231e:	7f 93       	push	r23
    2320:	8f 93       	push	r24
    2322:	9f 93       	push	r25
    2324:	af 93       	push	r26
    2326:	bf 93       	push	r27
    2328:	ef 93       	push	r30
    232a:	ff 93       	push	r31
	Serial5._rx_complete_irq();
    232c:	8e e5       	ldi	r24, 0x5E	; 94
    232e:	99 e2       	ldi	r25, 0x29	; 41
    2330:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN14HardwareSerial16_rx_complete_irqEv>
}
    2334:	ff 91       	pop	r31
    2336:	ef 91       	pop	r30
    2338:	bf 91       	pop	r27
    233a:	af 91       	pop	r26
    233c:	9f 91       	pop	r25
    233e:	8f 91       	pop	r24
    2340:	7f 91       	pop	r23
    2342:	6f 91       	pop	r22
    2344:	5f 91       	pop	r21
    2346:	4f 91       	pop	r20
    2348:	3f 91       	pop	r19
    234a:	2f 91       	pop	r18
    234c:	0f 90       	pop	r0
    234e:	0b be       	out	0x3b, r0	; 59
    2350:	0f 90       	pop	r0
    2352:	09 be       	out	0x39, r0	; 57
    2354:	0f 90       	pop	r0
    2356:	08 be       	out	0x38, r0	; 56
    2358:	0f 90       	pop	r0
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	0f 90       	pop	r0
    235e:	1f 90       	pop	r1
    2360:	18 95       	reti

00002362 <_GLOBAL__sub_I_Serial3>:
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    236e:	e1 e7       	ldi	r30, 0x71	; 113
    2370:	fd e2       	ldi	r31, 0x2D	; 45
    2372:	12 82       	std	Z+2, r1	; 0x02
    2374:	13 82       	std	Z+3, r1	; 0x03
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2376:	0f 2e       	mov	r0, r31
    2378:	f8 ee       	ldi	r31, 0xE8	; 232
    237a:	cf 2e       	mov	r12, r31
    237c:	f3 e0       	ldi	r31, 0x03	; 3
    237e:	df 2e       	mov	r13, r31
    2380:	e1 2c       	mov	r14, r1
    2382:	f1 2c       	mov	r15, r1
    2384:	f0 2d       	mov	r31, r0
    2386:	c4 82       	std	Z+4, r12	; 0x04
    2388:	d5 82       	std	Z+5, r13	; 0x05
    238a:	e6 82       	std	Z+6, r14	; 0x06
    238c:	f7 82       	std	Z+7, r15	; 0x07
	volatile rx_buffer_index_t _rx_buffer_tail;
	unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];

public:
	USART_t *_regs;
	HardwareSerial(USART_t *serial) : _regs(serial)
    238e:	ca ef       	ldi	r28, 0xFA	; 250
    2390:	d0 e2       	ldi	r29, 0x20	; 32
    2392:	c0 83       	st	Z, r28
    2394:	d1 83       	std	Z+1, r29	; 0x01
    2396:	80 ea       	ldi	r24, 0xA0	; 160
    2398:	99 e0       	ldi	r25, 0x09	; 9
    239a:	80 93 82 31 	sts	0x3182, r24	; 0x803182 <Serial3+0x411>
    239e:	90 93 83 31 	sts	0x3183, r25	; 0x803183 <Serial3+0x412>
		this->begin(115200);
	}
	~HardwareSerial()
	{
	}
	void begin(const uint32_t baud) { begin(baud, SERIAL_8N1); }
    23a2:	26 e0       	ldi	r18, 0x06	; 6
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	52 ec       	ldi	r21, 0xC2	; 194
    23a8:	61 e0       	ldi	r22, 0x01	; 1
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	cf 01       	movw	r24, r30
    23ae:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_ZN14HardwareSerial5beginEmh>
    23b2:	ee e5       	ldi	r30, 0x5E	; 94
    23b4:	f9 e2       	ldi	r31, 0x29	; 41
    23b6:	12 82       	std	Z+2, r1	; 0x02
    23b8:	13 82       	std	Z+3, r1	; 0x03
    23ba:	c4 82       	std	Z+4, r12	; 0x04
    23bc:	d5 82       	std	Z+5, r13	; 0x05
    23be:	e6 82       	std	Z+6, r14	; 0x06
    23c0:	f7 82       	std	Z+7, r15	; 0x07
	volatile rx_buffer_index_t _rx_buffer_tail;
	unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];

public:
	USART_t *_regs;
	HardwareSerial(USART_t *serial) : _regs(serial)
    23c2:	c0 83       	st	Z, r28
    23c4:	d1 83       	std	Z+1, r29	; 0x01
    23c6:	80 ea       	ldi	r24, 0xA0	; 160
    23c8:	9a e0       	ldi	r25, 0x0A	; 10
    23ca:	80 93 6f 2d 	sts	0x2D6F, r24	; 0x802d6f <Serial5+0x411>
    23ce:	90 93 70 2d 	sts	0x2D70, r25	; 0x802d70 <Serial5+0x412>
		this->begin(115200);
	}
	~HardwareSerial()
	{
	}
	void begin(const uint32_t baud) { begin(baud, SERIAL_8N1); }
    23d2:	26 e0       	ldi	r18, 0x06	; 6
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	52 ec       	ldi	r21, 0xC2	; 194
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	cf 01       	movw	r24, r30
    23de:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_ZN14HardwareSerial5beginEmh>
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	ff 90       	pop	r15
    23e8:	ef 90       	pop	r14
    23ea:	df 90       	pop	r13
    23ec:	cf 90       	pop	r12
    23ee:	08 95       	ret

000023f0 <_ZN17SingleInputKeypad6notifyEv>:
	}
	initTimer10Ms(this->timerNumber);
	this->debounceTime = 500;
	this->holdTime = 3000;
}
SingleInputKeypad::~SingleInputKeypad()
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	dc 01       	movw	r26, r24
    23f6:	51 96       	adiw	r26, 0x11	; 17
    23f8:	9c 91       	ld	r25, X
    23fa:	51 97       	sbiw	r26, 0x11	; 17
    23fc:	91 30       	cpi	r25, 0x01	; 1
    23fe:	71 f4       	brne	.+28     	; 0x241c <_ZN17SingleInputKeypad6notifyEv+0x2c>
    2400:	12 96       	adiw	r26, 0x02	; 2
    2402:	8d 91       	ld	r24, X+
    2404:	9c 91       	ld	r25, X
    2406:	13 97       	sbiw	r26, 0x03	; 3
    2408:	ec 01       	movw	r28, r24
    240a:	e8 81       	ld	r30, Y
    240c:	f9 81       	ldd	r31, Y+1	; 0x01
    240e:	01 90       	ld	r0, Z+
    2410:	f0 81       	ld	r31, Z
    2412:	e0 2d       	mov	r30, r0
    2414:	1e 96       	adiw	r26, 0x0e	; 14
    2416:	6c 91       	ld	r22, X
    2418:	19 95       	eicall
    241a:	1f c0       	rjmp	.+62     	; 0x245a <_ZN17SingleInputKeypad6notifyEv+0x6a>
    241c:	93 30       	cpi	r25, 0x03	; 3
    241e:	71 f4       	brne	.+28     	; 0x243c <_ZN17SingleInputKeypad6notifyEv+0x4c>
    2420:	12 96       	adiw	r26, 0x02	; 2
    2422:	8d 91       	ld	r24, X+
    2424:	9c 91       	ld	r25, X
    2426:	13 97       	sbiw	r26, 0x03	; 3
    2428:	ec 01       	movw	r28, r24
    242a:	e8 81       	ld	r30, Y
    242c:	f9 81       	ldd	r31, Y+1	; 0x01
    242e:	02 80       	ldd	r0, Z+2	; 0x02
    2430:	f3 81       	ldd	r31, Z+3	; 0x03
    2432:	e0 2d       	mov	r30, r0
    2434:	1e 96       	adiw	r26, 0x0e	; 14
    2436:	6c 91       	ld	r22, X
    2438:	19 95       	eicall
    243a:	0f c0       	rjmp	.+30     	; 0x245a <_ZN17SingleInputKeypad6notifyEv+0x6a>
    243c:	92 30       	cpi	r25, 0x02	; 2
    243e:	69 f4       	brne	.+26     	; 0x245a <_ZN17SingleInputKeypad6notifyEv+0x6a>
    2440:	12 96       	adiw	r26, 0x02	; 2
    2442:	8d 91       	ld	r24, X+
    2444:	9c 91       	ld	r25, X
    2446:	13 97       	sbiw	r26, 0x03	; 3
    2448:	ec 01       	movw	r28, r24
    244a:	e8 81       	ld	r30, Y
    244c:	f9 81       	ldd	r31, Y+1	; 0x01
    244e:	04 80       	ldd	r0, Z+4	; 0x04
    2450:	f5 81       	ldd	r31, Z+5	; 0x05
    2452:	e0 2d       	mov	r30, r0
    2454:	1e 96       	adiw	r26, 0x0e	; 14
    2456:	6c 91       	ld	r22, X
    2458:	19 95       	eicall
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	08 95       	ret

00002460 <_ZN17SingleInputKeypad10registerObEP11KeyObserver>:
    2460:	fc 01       	movw	r30, r24
    2462:	62 83       	std	Z+2, r22	; 0x02
    2464:	73 83       	std	Z+3, r23	; 0x03
    2466:	08 95       	ret

00002468 <_ZN17SingleInputKeypad4scanEv>:
    2468:	8f 92       	push	r8
    246a:	9f 92       	push	r9
    246c:	af 92       	push	r10
    246e:	bf 92       	push	r11
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	ec 01       	movw	r28, r24
    247c:	80 91 84 31 	lds	r24, 0x3184	; 0x803184 <pinNumber>
    2480:	ee 81       	ldd	r30, Y+6	; 0x06
    2482:	ff 81       	ldd	r31, Y+7	; 0x07
    2484:	e8 0f       	add	r30, r24
    2486:	f1 1d       	adc	r31, r1
    2488:	80 81       	ld	r24, Z
    248a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <digitalRead>
    248e:	89 2b       	or	r24, r25
    2490:	09 f0       	breq	.+2      	; 0x2494 <_ZN17SingleInputKeypad4scanEv+0x2c>
    2492:	72 c0       	rjmp	.+228    	; 0x2578 <_ZN17SingleInputKeypad4scanEv+0x110>
    2494:	f0 90 84 31 	lds	r15, 0x3184	; 0x803184 <pinNumber>
    2498:	0f 2d       	mov	r16, r15
    249a:	10 e0       	ldi	r17, 0x00	; 0
    249c:	8f 85       	ldd	r24, Y+15	; 0x0f
    249e:	98 89       	ldd	r25, Y+16	; 0x10
    24a0:	08 17       	cp	r16, r24
    24a2:	19 07       	cpc	r17, r25
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <_ZN17SingleInputKeypad4scanEv+0x40>
    24a6:	62 c0       	rjmp	.+196    	; 0x256c <_ZN17SingleInputKeypad4scanEv+0x104>
    24a8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <millis>
    24ac:	8a 88       	ldd	r8, Y+18	; 0x12
    24ae:	9b 88       	ldd	r9, Y+19	; 0x13
    24b0:	ac 88       	ldd	r10, Y+20	; 0x14
    24b2:	bd 88       	ldd	r11, Y+21	; 0x15
    24b4:	ab 01       	movw	r20, r22
    24b6:	bc 01       	movw	r22, r24
    24b8:	48 19       	sub	r20, r8
    24ba:	59 09       	sbc	r21, r9
    24bc:	6a 09       	sbc	r22, r10
    24be:	7b 09       	sbc	r23, r11
    24c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    24c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    24c4:	a0 e0       	ldi	r26, 0x00	; 0
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	84 17       	cp	r24, r20
    24ca:	95 07       	cpc	r25, r21
    24cc:	a6 07       	cpc	r26, r22
    24ce:	b7 07       	cpc	r27, r23
    24d0:	e0 f4       	brcc	.+56     	; 0x250a <_ZN17SingleInputKeypad4scanEv+0xa2>
    24d2:	89 89       	ldd	r24, Y+17	; 0x11
    24d4:	81 11       	cpse	r24, r1
    24d6:	19 c0       	rjmp	.+50     	; 0x250a <_ZN17SingleInputKeypad4scanEv+0xa2>
    24d8:	0f 87       	std	Y+15, r16	; 0x0f
    24da:	18 8b       	std	Y+16, r17	; 0x10
    24dc:	ec 81       	ldd	r30, Y+4	; 0x04
    24de:	fd 81       	ldd	r31, Y+5	; 0x05
    24e0:	ef 0d       	add	r30, r15
    24e2:	f1 1d       	adc	r31, r1
    24e4:	80 81       	ld	r24, Z
    24e6:	8e 87       	std	Y+14, r24	; 0x0e
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	89 8b       	std	Y+17, r24	; 0x11
    24ec:	f8 94       	cli
    24ee:	e8 81       	ld	r30, Y
    24f0:	f9 81       	ldd	r31, Y+1	; 0x01
    24f2:	02 80       	ldd	r0, Z+2	; 0x02
    24f4:	f3 81       	ldd	r31, Z+3	; 0x03
    24f6:	e0 2d       	mov	r30, r0
    24f8:	ce 01       	movw	r24, r28
    24fa:	19 95       	eicall
    24fc:	78 94       	sei
    24fe:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <millis>
    2502:	6a 8b       	std	Y+18, r22	; 0x12
    2504:	7b 8b       	std	Y+19, r23	; 0x13
    2506:	8c 8b       	std	Y+20, r24	; 0x14
    2508:	9d 8b       	std	Y+21, r25	; 0x15
    250a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <millis>
    250e:	8a 88       	ldd	r8, Y+18	; 0x12
    2510:	9b 88       	ldd	r9, Y+19	; 0x13
    2512:	ac 88       	ldd	r10, Y+20	; 0x14
    2514:	bd 88       	ldd	r11, Y+21	; 0x15
    2516:	ab 01       	movw	r20, r22
    2518:	bc 01       	movw	r22, r24
    251a:	48 19       	sub	r20, r8
    251c:	59 09       	sbc	r21, r9
    251e:	6a 09       	sbc	r22, r10
    2520:	7b 09       	sbc	r23, r11
    2522:	8a 85       	ldd	r24, Y+10	; 0x0a
    2524:	9b 85       	ldd	r25, Y+11	; 0x0b
    2526:	a0 e0       	ldi	r26, 0x00	; 0
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	84 17       	cp	r24, r20
    252c:	95 07       	cpc	r25, r21
    252e:	a6 07       	cpc	r26, r22
    2530:	b7 07       	cpc	r27, r23
    2532:	e0 f4       	brcc	.+56     	; 0x256c <_ZN17SingleInputKeypad4scanEv+0x104>
    2534:	89 89       	ldd	r24, Y+17	; 0x11
    2536:	81 30       	cpi	r24, 0x01	; 1
    2538:	c9 f4       	brne	.+50     	; 0x256c <_ZN17SingleInputKeypad4scanEv+0x104>
    253a:	0f 87       	std	Y+15, r16	; 0x0f
    253c:	18 8b       	std	Y+16, r17	; 0x10
    253e:	ec 81       	ldd	r30, Y+4	; 0x04
    2540:	fd 81       	ldd	r31, Y+5	; 0x05
    2542:	ef 0d       	add	r30, r15
    2544:	f1 1d       	adc	r31, r1
    2546:	80 81       	ld	r24, Z
    2548:	8e 87       	std	Y+14, r24	; 0x0e
    254a:	82 e0       	ldi	r24, 0x02	; 2
    254c:	89 8b       	std	Y+17, r24	; 0x11
    254e:	f8 94       	cli
    2550:	e8 81       	ld	r30, Y
    2552:	f9 81       	ldd	r31, Y+1	; 0x01
    2554:	02 80       	ldd	r0, Z+2	; 0x02
    2556:	f3 81       	ldd	r31, Z+3	; 0x03
    2558:	e0 2d       	mov	r30, r0
    255a:	ce 01       	movw	r24, r28
    255c:	19 95       	eicall
    255e:	78 94       	sei
    2560:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <millis>
    2564:	6a 8b       	std	Y+18, r22	; 0x12
    2566:	7b 8b       	std	Y+19, r23	; 0x13
    2568:	8c 8b       	std	Y+20, r24	; 0x14
    256a:	9d 8b       	std	Y+21, r25	; 0x15
    256c:	0f 87       	std	Y+15, r16	; 0x0f
    256e:	18 8b       	std	Y+16, r17	; 0x10
    2570:	89 89       	ldd	r24, Y+17	; 0x11
    2572:	81 11       	cpse	r24, r1
    2574:	16 c0       	rjmp	.+44     	; 0x25a2 <_ZN17SingleInputKeypad4scanEv+0x13a>
    2576:	10 c0       	rjmp	.+32     	; 0x2598 <_ZN17SingleInputKeypad4scanEv+0x130>
    2578:	89 89       	ldd	r24, Y+17	; 0x11
    257a:	81 50       	subi	r24, 0x01	; 1
    257c:	82 30       	cpi	r24, 0x02	; 2
    257e:	58 f4       	brcc	.+22     	; 0x2596 <_ZN17SingleInputKeypad4scanEv+0x12e>
    2580:	83 e0       	ldi	r24, 0x03	; 3
    2582:	89 8b       	std	Y+17, r24	; 0x11
    2584:	f8 94       	cli
    2586:	e8 81       	ld	r30, Y
    2588:	f9 81       	ldd	r31, Y+1	; 0x01
    258a:	02 80       	ldd	r0, Z+2	; 0x02
    258c:	f3 81       	ldd	r31, Z+3	; 0x03
    258e:	e0 2d       	mov	r30, r0
    2590:	ce 01       	movw	r24, r28
    2592:	19 95       	eicall
    2594:	78 94       	sei
    2596:	19 8a       	std	Y+17, r1	; 0x11
    2598:	80 91 84 31 	lds	r24, 0x3184	; 0x803184 <pinNumber>
    259c:	8f 5f       	subi	r24, 0xFF	; 255
    259e:	80 93 84 31 	sts	0x3184, r24	; 0x803184 <pinNumber>
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	ff 90       	pop	r15
    25ac:	bf 90       	pop	r11
    25ae:	af 90       	pop	r10
    25b0:	9f 90       	pop	r9
    25b2:	8f 90       	pop	r8
    25b4:	08 95       	ret

000025b6 <_ZN17SingleInputKeypadC1EhPcPhh>:
    25b6:	cf 92       	push	r12
    25b8:	df 92       	push	r13
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	7c 01       	movw	r14, r24
    25c8:	ea 01       	movw	r28, r20
    25ca:	69 01       	movw	r12, r18
    25cc:	8c e0       	ldi	r24, 0x0C	; 12
    25ce:	91 e2       	ldi	r25, 0x21	; 33
    25d0:	f7 01       	movw	r30, r14
    25d2:	80 83       	st	Z, r24
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	c7 01       	movw	r24, r14
    25d8:	0e 96       	adiw	r24, 0x0e	; 14
    25da:	0e 94 28 13 	call	0x2650	; 0x2650 <_ZN3KeyC1Ev>
    25de:	f7 01       	movw	r30, r14
    25e0:	c4 83       	std	Z+4, r28	; 0x04
    25e2:	d5 83       	std	Z+5, r29	; 0x05
    25e4:	c6 82       	std	Z+6, r12	; 0x06
    25e6:	d7 82       	std	Z+7, r13	; 0x07
    25e8:	00 87       	std	Z+8, r16	; 0x08
    25ea:	00 23       	and	r16, r16
    25ec:	71 f0       	breq	.+28     	; 0x260a <_ZN17SingleInputKeypadC1EhPcPhh+0x54>
    25ee:	e6 01       	movw	r28, r12
    25f0:	01 50       	subi	r16, 0x01	; 1
    25f2:	10 e0       	ldi	r17, 0x00	; 0
    25f4:	0f 5f       	subi	r16, 0xFF	; 255
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	0c 0d       	add	r16, r12
    25fa:	1d 1d       	adc	r17, r13
    25fc:	62 e0       	ldi	r22, 0x02	; 2
    25fe:	89 91       	ld	r24, Y+
    2600:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <pinMode>
    2604:	c0 17       	cp	r28, r16
    2606:	d1 07       	cpc	r29, r17
    2608:	c9 f7       	brne	.-14     	; 0x25fc <_ZN17SingleInputKeypadC1EhPcPhh+0x46>
    260a:	f7 01       	movw	r30, r14
    260c:	81 85       	ldd	r24, Z+9	; 0x09
    260e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <initTimer10Ms>
    2612:	84 ef       	ldi	r24, 0xF4	; 244
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	f7 01       	movw	r30, r14
    2618:	84 87       	std	Z+12, r24	; 0x0c
    261a:	95 87       	std	Z+13, r25	; 0x0d
    261c:	88 eb       	ldi	r24, 0xB8	; 184
    261e:	9b e0       	ldi	r25, 0x0B	; 11
    2620:	82 87       	std	Z+10, r24	; 0x0a
    2622:	93 87       	std	Z+11, r25	; 0x0b
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ff 90       	pop	r15
    262e:	ef 90       	pop	r14
    2630:	df 90       	pop	r13
    2632:	cf 90       	pop	r12
    2634:	08 95       	ret

00002636 <_GLOBAL__sub_I_pinsList>:
	}
	if(this->key.kstate == IDLE)
	{
	pinNumber++;
	}
    2636:	0f 93       	push	r16
	'4', '5', '6',
	'7', '8', '9',
	'r', '0', 'g',
'A', 'B', 'C','D'};

SingleInputKeypad iKeys(TIM1,iKeyChar,pinsList,KEPAD_SIZE);
    2638:	03 e1       	ldi	r16, 0x13	; 19
    263a:	2b e9       	ldi	r18, 0x9B	; 155
    263c:	31 e3       	ldi	r19, 0x31	; 49
    263e:	44 e5       	ldi	r20, 0x54	; 84
    2640:	50 e2       	ldi	r21, 0x20	; 32
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	85 e8       	ldi	r24, 0x85	; 133
    2646:	91 e3       	ldi	r25, 0x31	; 49
    2648:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN17SingleInputKeypadC1EhPcPhh>
	}
	if(this->key.kstate == IDLE)
	{
	pinNumber++;
	}
    264c:	0f 91       	pop	r16
    264e:	08 95       	ret

00002650 <_ZN3KeyC1Ev>:
#include "Key.h"


// default constructor
Key::Key() {
	kchar = NO_KEY;
    2650:	fc 01       	movw	r30, r24
    2652:	10 82       	st	Z, r1
	kstate = IDLE;
    2654:	13 82       	std	Z+3, r1	; 0x03
    2656:	08 95       	ret

00002658 <_ZN12MatrixKeypad6notifyEv>:
	initTimer10Ms(this->timerNumber);
	this->debounceTime = 500;
	this->holdTime = 3000;
}

MatrixKeypad::~MatrixKeypad(){
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	dc 01       	movw	r26, r24
    265e:	1c 96       	adiw	r26, 0x0c	; 12
    2660:	9c 91       	ld	r25, X
    2662:	1c 97       	sbiw	r26, 0x0c	; 12
    2664:	91 30       	cpi	r25, 0x01	; 1
    2666:	71 f4       	brne	.+28     	; 0x2684 <_ZN12MatrixKeypad6notifyEv+0x2c>
    2668:	12 96       	adiw	r26, 0x02	; 2
    266a:	8d 91       	ld	r24, X+
    266c:	9c 91       	ld	r25, X
    266e:	13 97       	sbiw	r26, 0x03	; 3
    2670:	ec 01       	movw	r28, r24
    2672:	e8 81       	ld	r30, Y
    2674:	f9 81       	ldd	r31, Y+1	; 0x01
    2676:	01 90       	ld	r0, Z+
    2678:	f0 81       	ld	r31, Z
    267a:	e0 2d       	mov	r30, r0
    267c:	19 96       	adiw	r26, 0x09	; 9
    267e:	6c 91       	ld	r22, X
    2680:	19 95       	eicall
    2682:	1f c0       	rjmp	.+62     	; 0x26c2 <_ZN12MatrixKeypad6notifyEv+0x6a>
    2684:	93 30       	cpi	r25, 0x03	; 3
    2686:	71 f4       	brne	.+28     	; 0x26a4 <_ZN12MatrixKeypad6notifyEv+0x4c>
    2688:	12 96       	adiw	r26, 0x02	; 2
    268a:	8d 91       	ld	r24, X+
    268c:	9c 91       	ld	r25, X
    268e:	13 97       	sbiw	r26, 0x03	; 3
    2690:	ec 01       	movw	r28, r24
    2692:	e8 81       	ld	r30, Y
    2694:	f9 81       	ldd	r31, Y+1	; 0x01
    2696:	02 80       	ldd	r0, Z+2	; 0x02
    2698:	f3 81       	ldd	r31, Z+3	; 0x03
    269a:	e0 2d       	mov	r30, r0
    269c:	19 96       	adiw	r26, 0x09	; 9
    269e:	6c 91       	ld	r22, X
    26a0:	19 95       	eicall
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <_ZN12MatrixKeypad6notifyEv+0x6a>
    26a4:	92 30       	cpi	r25, 0x02	; 2
    26a6:	69 f4       	brne	.+26     	; 0x26c2 <_ZN12MatrixKeypad6notifyEv+0x6a>
    26a8:	12 96       	adiw	r26, 0x02	; 2
    26aa:	8d 91       	ld	r24, X+
    26ac:	9c 91       	ld	r25, X
    26ae:	13 97       	sbiw	r26, 0x03	; 3
    26b0:	ec 01       	movw	r28, r24
    26b2:	e8 81       	ld	r30, Y
    26b4:	f9 81       	ldd	r31, Y+1	; 0x01
    26b6:	04 80       	ldd	r0, Z+4	; 0x04
    26b8:	f5 81       	ldd	r31, Z+5	; 0x05
    26ba:	e0 2d       	mov	r30, r0
    26bc:	19 96       	adiw	r26, 0x09	; 9
    26be:	6c 91       	ld	r22, X
    26c0:	19 95       	eicall
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	08 95       	ret

000026c8 <_ZN12MatrixKeypad10registerObEP11KeyObserver>:
    26c8:	fc 01       	movw	r30, r24
    26ca:	62 83       	std	Z+2, r22	; 0x02
    26cc:	73 83       	std	Z+3, r23	; 0x03
    26ce:	08 95       	ret

000026d0 <_ZN12MatrixKeypad4scanEv>:
    26d0:	cf 92       	push	r12
    26d2:	df 92       	push	r13
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	ec 01       	movw	r28, r24
    26e2:	80 91 ae 31 	lds	r24, 0x31AE	; 0x8031ae <_ZL1c>
    26e6:	ef 89       	ldd	r30, Y+23	; 0x17
    26e8:	f8 8d       	ldd	r31, Y+24	; 0x18
    26ea:	e8 0f       	add	r30, r24
    26ec:	f1 1d       	adc	r31, r1
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	0e 94 4b 10 	call	0x2096	; 0x2096 <digitalWrite>
    26f6:	e0 91 af 31 	lds	r30, 0x31AF	; 0x8031af <_ZL1r>
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	e0 55       	subi	r30, 0x50	; 80
    26fe:	fe 4c       	sbci	r31, 0xCE	; 206
    2700:	10 82       	st	Z, r1
    2702:	80 91 af 31 	lds	r24, 0x31AF	; 0x8031af <_ZL1r>
    2706:	ed 89       	ldd	r30, Y+21	; 0x15
    2708:	fe 89       	ldd	r31, Y+22	; 0x16
    270a:	e8 0f       	add	r30, r24
    270c:	f1 1d       	adc	r31, r1
    270e:	80 81       	ld	r24, Z
    2710:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <digitalRead>
    2714:	89 2b       	or	r24, r25
    2716:	b1 f4       	brne	.+44     	; 0x2744 <_ZN12MatrixKeypad4scanEv+0x74>
    2718:	30 91 ae 31 	lds	r19, 0x31AE	; 0x8031ae <_ZL1c>
    271c:	e0 91 af 31 	lds	r30, 0x31AF	; 0x8031af <_ZL1r>
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	e0 55       	subi	r30, 0x50	; 80
    2724:	fe 4c       	sbci	r31, 0xCE	; 206
    2726:	20 81       	ld	r18, Z
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	a0 e0       	ldi	r26, 0x00	; 0
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	04 c0       	rjmp	.+8      	; 0x273a <_ZN12MatrixKeypad4scanEv+0x6a>
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	aa 1f       	adc	r26, r26
    2738:	bb 1f       	adc	r27, r27
    273a:	3a 95       	dec	r19
    273c:	d2 f7       	brpl	.-12     	; 0x2732 <_ZN12MatrixKeypad4scanEv+0x62>
    273e:	82 2b       	or	r24, r18
    2740:	80 83       	st	Z, r24
    2742:	19 c0       	rjmp	.+50     	; 0x2776 <_ZN12MatrixKeypad4scanEv+0xa6>
    2744:	30 91 ae 31 	lds	r19, 0x31AE	; 0x8031ae <_ZL1c>
    2748:	e0 91 af 31 	lds	r30, 0x31AF	; 0x8031af <_ZL1r>
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	e0 55       	subi	r30, 0x50	; 80
    2750:	fe 4c       	sbci	r31, 0xCE	; 206
    2752:	20 81       	ld	r18, Z
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	a0 e0       	ldi	r26, 0x00	; 0
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	04 c0       	rjmp	.+8      	; 0x2766 <_ZN12MatrixKeypad4scanEv+0x96>
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	aa 1f       	adc	r26, r26
    2764:	bb 1f       	adc	r27, r27
    2766:	3a 95       	dec	r19
    2768:	d2 f7       	brpl	.-12     	; 0x275e <_ZN12MatrixKeypad4scanEv+0x8e>
    276a:	80 95       	com	r24
    276c:	90 95       	com	r25
    276e:	a0 95       	com	r26
    2770:	b0 95       	com	r27
    2772:	82 23       	and	r24, r18
    2774:	80 83       	st	Z, r24
    2776:	e0 91 af 31 	lds	r30, 0x31AF	; 0x8031af <_ZL1r>
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	e0 55       	subi	r30, 0x50	; 80
    277e:	fe 4c       	sbci	r31, 0xCE	; 206
    2780:	80 81       	ld	r24, Z
    2782:	88 23       	and	r24, r24
    2784:	09 f4       	brne	.+2      	; 0x2788 <_ZN12MatrixKeypad4scanEv+0xb8>
    2786:	78 c0       	rjmp	.+240    	; 0x2878 <_ZN12MatrixKeypad4scanEv+0x1a8>
    2788:	80 91 af 31 	lds	r24, 0x31AF	; 0x8031af <_ZL1r>
    278c:	00 91 ae 31 	lds	r16, 0x31AE	; 0x8031ae <_ZL1c>
    2790:	9c 89       	ldd	r25, Y+20	; 0x14
    2792:	10 e0       	ldi	r17, 0x00	; 0
    2794:	98 9f       	mul	r25, r24
    2796:	00 0d       	add	r16, r0
    2798:	11 1d       	adc	r17, r1
    279a:	11 24       	eor	r1, r1
    279c:	8a 85       	ldd	r24, Y+10	; 0x0a
    279e:	9b 85       	ldd	r25, Y+11	; 0x0b
    27a0:	08 17       	cp	r16, r24
    27a2:	19 07       	cpc	r17, r25
    27a4:	09 f0       	breq	.+2      	; 0x27a8 <_ZN12MatrixKeypad4scanEv+0xd8>
    27a6:	62 c0       	rjmp	.+196    	; 0x286c <_ZN12MatrixKeypad4scanEv+0x19c>
    27a8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <millis>
    27ac:	cd 84       	ldd	r12, Y+13	; 0x0d
    27ae:	de 84       	ldd	r13, Y+14	; 0x0e
    27b0:	ef 84       	ldd	r14, Y+15	; 0x0f
    27b2:	f8 88       	ldd	r15, Y+16	; 0x10
    27b4:	ab 01       	movw	r20, r22
    27b6:	bc 01       	movw	r22, r24
    27b8:	4c 19       	sub	r20, r12
    27ba:	5d 09       	sbc	r21, r13
    27bc:	6e 09       	sbc	r22, r14
    27be:	7f 09       	sbc	r23, r15
    27c0:	8f 81       	ldd	r24, Y+7	; 0x07
    27c2:	98 85       	ldd	r25, Y+8	; 0x08
    27c4:	a0 e0       	ldi	r26, 0x00	; 0
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	84 17       	cp	r24, r20
    27ca:	95 07       	cpc	r25, r21
    27cc:	a6 07       	cpc	r26, r22
    27ce:	b7 07       	cpc	r27, r23
    27d0:	e0 f4       	brcc	.+56     	; 0x280a <_ZN12MatrixKeypad4scanEv+0x13a>
    27d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    27d4:	81 11       	cpse	r24, r1
    27d6:	19 c0       	rjmp	.+50     	; 0x280a <_ZN12MatrixKeypad4scanEv+0x13a>
    27d8:	0a 87       	std	Y+10, r16	; 0x0a
    27da:	1b 87       	std	Y+11, r17	; 0x0b
    27dc:	e9 89       	ldd	r30, Y+17	; 0x11
    27de:	fa 89       	ldd	r31, Y+18	; 0x12
    27e0:	e0 0f       	add	r30, r16
    27e2:	f1 1f       	adc	r31, r17
    27e4:	80 81       	ld	r24, Z
    27e6:	89 87       	std	Y+9, r24	; 0x09
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	8c 87       	std	Y+12, r24	; 0x0c
    27ec:	f8 94       	cli
    27ee:	e8 81       	ld	r30, Y
    27f0:	f9 81       	ldd	r31, Y+1	; 0x01
    27f2:	02 80       	ldd	r0, Z+2	; 0x02
    27f4:	f3 81       	ldd	r31, Z+3	; 0x03
    27f6:	e0 2d       	mov	r30, r0
    27f8:	ce 01       	movw	r24, r28
    27fa:	19 95       	eicall
    27fc:	78 94       	sei
    27fe:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <millis>
    2802:	6d 87       	std	Y+13, r22	; 0x0d
    2804:	7e 87       	std	Y+14, r23	; 0x0e
    2806:	8f 87       	std	Y+15, r24	; 0x0f
    2808:	98 8b       	std	Y+16, r25	; 0x10
    280a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <millis>
    280e:	cd 84       	ldd	r12, Y+13	; 0x0d
    2810:	de 84       	ldd	r13, Y+14	; 0x0e
    2812:	ef 84       	ldd	r14, Y+15	; 0x0f
    2814:	f8 88       	ldd	r15, Y+16	; 0x10
    2816:	ab 01       	movw	r20, r22
    2818:	bc 01       	movw	r22, r24
    281a:	4c 19       	sub	r20, r12
    281c:	5d 09       	sbc	r21, r13
    281e:	6e 09       	sbc	r22, r14
    2820:	7f 09       	sbc	r23, r15
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	a0 e0       	ldi	r26, 0x00	; 0
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	84 17       	cp	r24, r20
    282c:	95 07       	cpc	r25, r21
    282e:	a6 07       	cpc	r26, r22
    2830:	b7 07       	cpc	r27, r23
    2832:	e0 f4       	brcc	.+56     	; 0x286c <_ZN12MatrixKeypad4scanEv+0x19c>
    2834:	8c 85       	ldd	r24, Y+12	; 0x0c
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	c9 f4       	brne	.+50     	; 0x286c <_ZN12MatrixKeypad4scanEv+0x19c>
    283a:	0a 87       	std	Y+10, r16	; 0x0a
    283c:	1b 87       	std	Y+11, r17	; 0x0b
    283e:	e9 89       	ldd	r30, Y+17	; 0x11
    2840:	fa 89       	ldd	r31, Y+18	; 0x12
    2842:	e0 0f       	add	r30, r16
    2844:	f1 1f       	adc	r31, r17
    2846:	80 81       	ld	r24, Z
    2848:	89 87       	std	Y+9, r24	; 0x09
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	8c 87       	std	Y+12, r24	; 0x0c
    284e:	f8 94       	cli
    2850:	e8 81       	ld	r30, Y
    2852:	f9 81       	ldd	r31, Y+1	; 0x01
    2854:	02 80       	ldd	r0, Z+2	; 0x02
    2856:	f3 81       	ldd	r31, Z+3	; 0x03
    2858:	e0 2d       	mov	r30, r0
    285a:	ce 01       	movw	r24, r28
    285c:	19 95       	eicall
    285e:	78 94       	sei
    2860:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <millis>
    2864:	6d 87       	std	Y+13, r22	; 0x0d
    2866:	7e 87       	std	Y+14, r23	; 0x0e
    2868:	8f 87       	std	Y+15, r24	; 0x0f
    286a:	98 8b       	std	Y+16, r25	; 0x10
    286c:	0a 87       	std	Y+10, r16	; 0x0a
    286e:	1b 87       	std	Y+11, r17	; 0x0b
    2870:	8c 85       	ldd	r24, Y+12	; 0x0c
    2872:	81 11       	cpse	r24, r1
    2874:	33 c0       	rjmp	.+102    	; 0x28dc <_ZN12MatrixKeypad4scanEv+0x20c>
    2876:	10 c0       	rjmp	.+32     	; 0x2898 <_ZN12MatrixKeypad4scanEv+0x1c8>
    2878:	8c 85       	ldd	r24, Y+12	; 0x0c
    287a:	81 50       	subi	r24, 0x01	; 1
    287c:	82 30       	cpi	r24, 0x02	; 2
    287e:	58 f4       	brcc	.+22     	; 0x2896 <_ZN12MatrixKeypad4scanEv+0x1c6>
    2880:	83 e0       	ldi	r24, 0x03	; 3
    2882:	8c 87       	std	Y+12, r24	; 0x0c
    2884:	f8 94       	cli
    2886:	e8 81       	ld	r30, Y
    2888:	f9 81       	ldd	r31, Y+1	; 0x01
    288a:	02 80       	ldd	r0, Z+2	; 0x02
    288c:	f3 81       	ldd	r31, Z+3	; 0x03
    288e:	e0 2d       	mov	r30, r0
    2890:	ce 01       	movw	r24, r28
    2892:	19 95       	eicall
    2894:	78 94       	sei
    2896:	1c 86       	std	Y+12, r1	; 0x0c
    2898:	80 91 af 31 	lds	r24, 0x31AF	; 0x8031af <_ZL1r>
    289c:	8f 5f       	subi	r24, 0xFF	; 255
    289e:	80 93 af 31 	sts	0x31AF, r24	; 0x8031af <_ZL1r>
    28a2:	80 91 af 31 	lds	r24, 0x31AF	; 0x8031af <_ZL1r>
    28a6:	9b 89       	ldd	r25, Y+19	; 0x13
    28a8:	89 17       	cp	r24, r25
    28aa:	c0 f0       	brcs	.+48     	; 0x28dc <_ZN12MatrixKeypad4scanEv+0x20c>
    28ac:	10 92 af 31 	sts	0x31AF, r1	; 0x8031af <_ZL1r>
    28b0:	80 91 ae 31 	lds	r24, 0x31AE	; 0x8031ae <_ZL1c>
    28b4:	ef 89       	ldd	r30, Y+23	; 0x17
    28b6:	f8 8d       	ldd	r31, Y+24	; 0x18
    28b8:	e8 0f       	add	r30, r24
    28ba:	f1 1d       	adc	r31, r1
    28bc:	61 e0       	ldi	r22, 0x01	; 1
    28be:	80 81       	ld	r24, Z
    28c0:	0e 94 4b 10 	call	0x2096	; 0x2096 <digitalWrite>
    28c4:	80 91 ae 31 	lds	r24, 0x31AE	; 0x8031ae <_ZL1c>
    28c8:	8f 5f       	subi	r24, 0xFF	; 255
    28ca:	80 93 ae 31 	sts	0x31AE, r24	; 0x8031ae <_ZL1c>
    28ce:	80 91 ae 31 	lds	r24, 0x31AE	; 0x8031ae <_ZL1c>
    28d2:	9c 89       	ldd	r25, Y+20	; 0x14
    28d4:	89 17       	cp	r24, r25
    28d6:	10 f0       	brcs	.+4      	; 0x28dc <_ZN12MatrixKeypad4scanEv+0x20c>
    28d8:	10 92 ae 31 	sts	0x31AE, r1	; 0x8031ae <_ZL1c>
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	df 90       	pop	r13
    28ea:	cf 90       	pop	r12
    28ec:	08 95       	ret

000028ee <_ZN12MatrixKeypadC1EhPcPhS1_hh>:
    28ee:	8f 92       	push	r8
    28f0:	9f 92       	push	r9
    28f2:	af 92       	push	r10
    28f4:	bf 92       	push	r11
    28f6:	cf 92       	push	r12
    28f8:	ef 92       	push	r14
    28fa:	ff 92       	push	r15
    28fc:	0f 93       	push	r16
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	ec 01       	movw	r28, r24
    2906:	f6 2e       	mov	r15, r22
    2908:	4a 01       	movw	r8, r20
    290a:	59 01       	movw	r10, r18
    290c:	86 e1       	ldi	r24, 0x16	; 22
    290e:	91 e2       	ldi	r25, 0x21	; 33
    2910:	88 83       	st	Y, r24
    2912:	99 83       	std	Y+1, r25	; 0x01
    2914:	ce 01       	movw	r24, r28
    2916:	09 96       	adiw	r24, 0x09	; 9
    2918:	0e 94 28 13 	call	0x2650	; 0x2650 <_ZN3KeyC1Ev>
    291c:	fc 82       	std	Y+4, r15	; 0x04
    291e:	89 8a       	std	Y+17, r8	; 0x11
    2920:	9a 8a       	std	Y+18, r9	; 0x12
    2922:	ad 8a       	std	Y+21, r10	; 0x15
    2924:	be 8a       	std	Y+22, r11	; 0x16
    2926:	0f 8b       	std	Y+23, r16	; 0x17
    2928:	18 8f       	std	Y+24, r17	; 0x18
    292a:	eb 8a       	std	Y+19, r14	; 0x13
    292c:	cc 8a       	std	Y+20, r12	; 0x14
    292e:	e1 10       	cpse	r14, r1
    2930:	05 c0       	rjmp	.+10     	; 0x293c <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x4e>
    2932:	8c 89       	ldd	r24, Y+20	; 0x14
    2934:	88 23       	and	r24, r24
    2936:	39 f1       	breq	.+78     	; 0x2986 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x98>
    2938:	f1 2c       	mov	r15, r1
    293a:	0e c0       	rjmp	.+28     	; 0x2958 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x6a>
    293c:	10 e0       	ldi	r17, 0x00	; 0
    293e:	ed 89       	ldd	r30, Y+21	; 0x15
    2940:	fe 89       	ldd	r31, Y+22	; 0x16
    2942:	e1 0f       	add	r30, r17
    2944:	f1 1d       	adc	r31, r1
    2946:	62 e0       	ldi	r22, 0x02	; 2
    2948:	80 81       	ld	r24, Z
    294a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <pinMode>
    294e:	1f 5f       	subi	r17, 0xFF	; 255
    2950:	8b 89       	ldd	r24, Y+19	; 0x13
    2952:	18 17       	cp	r17, r24
    2954:	a0 f3       	brcs	.-24     	; 0x293e <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x50>
    2956:	ed cf       	rjmp	.-38     	; 0x2932 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x44>
    2958:	0f 2d       	mov	r16, r15
    295a:	10 e0       	ldi	r17, 0x00	; 0
    295c:	ef 89       	ldd	r30, Y+23	; 0x17
    295e:	f8 8d       	ldd	r31, Y+24	; 0x18
    2960:	e0 0f       	add	r30, r16
    2962:	f1 1f       	adc	r31, r17
    2964:	61 e0       	ldi	r22, 0x01	; 1
    2966:	80 81       	ld	r24, Z
    2968:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <pinMode>
    296c:	8f 89       	ldd	r24, Y+23	; 0x17
    296e:	98 8d       	ldd	r25, Y+24	; 0x18
    2970:	fc 01       	movw	r30, r24
    2972:	e0 0f       	add	r30, r16
    2974:	f1 1f       	adc	r31, r17
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	80 81       	ld	r24, Z
    297a:	0e 94 4b 10 	call	0x2096	; 0x2096 <digitalWrite>
    297e:	f3 94       	inc	r15
    2980:	8c 89       	ldd	r24, Y+20	; 0x14
    2982:	f8 16       	cp	r15, r24
    2984:	48 f3       	brcs	.-46     	; 0x2958 <_ZN12MatrixKeypadC1EhPcPhS1_hh+0x6a>
    2986:	8c 81       	ldd	r24, Y+4	; 0x04
    2988:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <initTimer10Ms>
    298c:	84 ef       	ldi	r24, 0xF4	; 244
    298e:	91 e0       	ldi	r25, 0x01	; 1
    2990:	8f 83       	std	Y+7, r24	; 0x07
    2992:	98 87       	std	Y+8, r25	; 0x08
    2994:	88 eb       	ldi	r24, 0xB8	; 184
    2996:	9b e0       	ldi	r25, 0x0B	; 11
    2998:	8d 83       	std	Y+5, r24	; 0x05
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	ff 90       	pop	r15
    29a6:	ef 90       	pop	r14
    29a8:	cf 90       	pop	r12
    29aa:	bf 90       	pop	r11
    29ac:	af 90       	pop	r10
    29ae:	9f 90       	pop	r9
    29b0:	8f 90       	pop	r8
    29b2:	08 95       	ret

000029b4 <_GLOBAL__sub_I_rows>:
			{
				c=0;
			}
		}
	}
}
    29b4:	cf 92       	push	r12
    29b6:	ef 92       	push	r14
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
{'1', '2', '3'},
{'4', '5', '6'},
{'7', '8', '9'},
{'r', '0', 'g'}};

MatrixKeypad matrixKeypad(TIM1,(char*)hexaKeys,rows,cols,5,3);
    29bc:	0f 2e       	mov	r0, r31
    29be:	f3 e0       	ldi	r31, 0x03	; 3
    29c0:	cf 2e       	mov	r12, r31
    29c2:	f0 2d       	mov	r31, r0
    29c4:	0f 2e       	mov	r0, r31
    29c6:	f5 e0       	ldi	r31, 0x05	; 5
    29c8:	ef 2e       	mov	r14, r31
    29ca:	f0 2d       	mov	r31, r0
    29cc:	06 e7       	ldi	r16, 0x76	; 118
    29ce:	10 e2       	ldi	r17, 0x20	; 32
    29d0:	29 e7       	ldi	r18, 0x79	; 121
    29d2:	30 e2       	ldi	r19, 0x20	; 32
    29d4:	47 e6       	ldi	r20, 0x67	; 103
    29d6:	50 e2       	ldi	r21, 0x20	; 32
    29d8:	61 e0       	ldi	r22, 0x01	; 1
    29da:	85 eb       	ldi	r24, 0xB5	; 181
    29dc:	91 e3       	ldi	r25, 0x31	; 49
    29de:	0e 94 77 14 	call	0x28ee	; 0x28ee <_ZN12MatrixKeypadC1EhPcPhS1_hh>
			{
				c=0;
			}
		}
	}
}
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	ef 90       	pop	r14
    29e8:	cf 90       	pop	r12
    29ea:	08 95       	ret

000029ec <u8g2_send_buffer>:
    u8x8_DrawTile( u8g2_GetU8x8(u8g2), tx, ty, tw, ptr );
    ptr += page_size;
    ty++;
    th--;
  }  
}
    29ec:	af 92       	push	r10
    29ee:	bf 92       	push	r11
    29f0:	cf 92       	push	r12
    29f2:	df 92       	push	r13
    29f4:	ef 92       	push	r14
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
    2a00:	7c 01       	movw	r14, r24
    2a02:	dc 01       	movw	r26, r24
    2a04:	94 96       	adiw	r26, 0x24	; 36
    2a06:	bc 90       	ld	r11, X
    2a08:	94 97       	sbiw	r26, 0x24	; 36
    2a0a:	95 96       	adiw	r26, 0x25	; 37
    2a0c:	dc 91       	ld	r29, X
    2a0e:	95 97       	sbiw	r26, 0x25	; 37
    2a10:	ed 91       	ld	r30, X+
    2a12:	fc 91       	ld	r31, X
    2a14:	a1 88       	ldd	r10, Z+17	; 0x11
    2a16:	cd 2f       	mov	r28, r29
    2a18:	c1 2c       	mov	r12, r1
    2a1a:	d1 2c       	mov	r13, r1
    2a1c:	d7 01       	movw	r26, r14
    2a1e:	ed 91       	ld	r30, X+
    2a20:	fc 91       	ld	r31, X
    2a22:	11 97       	sbiw	r26, 0x01	; 1
    2a24:	20 89       	ldd	r18, Z+16	; 0x10
    2a26:	92 96       	adiw	r26, 0x22	; 34
    2a28:	0d 91       	ld	r16, X+
    2a2a:	1c 91       	ld	r17, X
    2a2c:	93 97       	sbiw	r26, 0x23	; 35
    2a2e:	42 2f       	mov	r20, r18
    2a30:	50 e0       	ldi	r21, 0x00	; 0
    2a32:	44 0f       	add	r20, r20
    2a34:	55 1f       	adc	r21, r21
    2a36:	44 0f       	add	r20, r20
    2a38:	55 1f       	adc	r21, r21
    2a3a:	44 0f       	add	r20, r20
    2a3c:	55 1f       	adc	r21, r21
    2a3e:	4c 9d       	mul	r20, r12
    2a40:	c0 01       	movw	r24, r0
    2a42:	4d 9d       	mul	r20, r13
    2a44:	90 0d       	add	r25, r0
    2a46:	5c 9d       	mul	r21, r12
    2a48:	90 0d       	add	r25, r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	08 0f       	add	r16, r24
    2a4e:	19 1f       	adc	r17, r25
    2a50:	4c 2f       	mov	r20, r28
    2a52:	60 e0       	ldi	r22, 0x00	; 0
    2a54:	c7 01       	movw	r24, r14
    2a56:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <u8x8_DrawTile>
    2a5a:	cf 5f       	subi	r28, 0xFF	; 255
    2a5c:	8c 2f       	mov	r24, r28
    2a5e:	8d 1b       	sub	r24, r29
    2a60:	8b 15       	cp	r24, r11
    2a62:	28 f4       	brcc	.+10     	; 0x2a6e <u8g2_send_buffer+0x82>
    2a64:	bf ef       	ldi	r27, 0xFF	; 255
    2a66:	cb 1a       	sub	r12, r27
    2a68:	db 0a       	sbc	r13, r27
    2a6a:	ca 15       	cp	r28, r10
    2a6c:	b8 f2       	brcs	.-82     	; 0x2a1c <u8g2_send_buffer+0x30>
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	ff 90       	pop	r15
    2a78:	ef 90       	pop	r14
    2a7a:	df 90       	pop	r13
    2a7c:	cf 90       	pop	r12
    2a7e:	bf 90       	pop	r11
    2a80:	af 90       	pop	r10
    2a82:	08 95       	ret

00002a84 <u8g2_ClearBuffer>:
    2a84:	fc 01       	movw	r30, r24
    2a86:	a0 81       	ld	r26, Z
    2a88:	b1 81       	ldd	r27, Z+1	; 0x01
    2a8a:	50 96       	adiw	r26, 0x10	; 16
    2a8c:	9c 91       	ld	r25, X
    2a8e:	44 a1       	ldd	r20, Z+36	; 0x24
    2a90:	94 9f       	mul	r25, r20
    2a92:	a0 01       	movw	r20, r0
    2a94:	11 24       	eor	r1, r1
    2a96:	44 0f       	add	r20, r20
    2a98:	55 1f       	adc	r21, r21
    2a9a:	44 0f       	add	r20, r20
    2a9c:	55 1f       	adc	r21, r21
    2a9e:	44 0f       	add	r20, r20
    2aa0:	55 1f       	adc	r21, r21
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	82 a1       	ldd	r24, Z+34	; 0x22
    2aa8:	93 a1       	ldd	r25, Z+35	; 0x23
    2aaa:	0e 94 09 27 	call	0x4e12	; 0x4e12 <memset>
    2aae:	08 95       	ret

00002ab0 <u8g2_SetBufferCurrTileRow>:
    2ab0:	cf 93       	push	r28
    2ab2:	df 93       	push	r29
    2ab4:	ec 01       	movw	r28, r24
    2ab6:	6d a3       	std	Y+37, r22	; 0x25
    2ab8:	e8 a1       	ldd	r30, Y+32	; 0x20
    2aba:	f9 a1       	ldd	r31, Y+33	; 0x21
    2abc:	01 90       	ld	r0, Z+
    2abe:	f0 81       	ld	r31, Z
    2ac0:	e0 2d       	mov	r30, r0
    2ac2:	19 95       	eicall
    2ac4:	e8 a1       	ldd	r30, Y+32	; 0x20
    2ac6:	f9 a1       	ldd	r31, Y+33	; 0x21
    2ac8:	02 80       	ldd	r0, Z+2	; 0x02
    2aca:	f3 81       	ldd	r31, Z+3	; 0x03
    2acc:	e0 2d       	mov	r30, r0
    2ace:	ce 01       	movw	r24, r28
    2ad0:	19 95       	eicall
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	08 95       	ret

00002ad8 <u8g2_FirstPage>:
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	ec 01       	movw	r28, r24
    2ade:	fc 01       	movw	r30, r24
    2ae0:	eb 58       	subi	r30, 0x8B	; 139
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	80 81       	ld	r24, Z
    2ae6:	88 23       	and	r24, r24
    2ae8:	19 f0       	breq	.+6      	; 0x2af0 <u8g2_FirstPage+0x18>
    2aea:	ce 01       	movw	r24, r28
    2aec:	0e 94 42 15 	call	0x2a84	; 0x2a84 <u8g2_ClearBuffer>
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	ce 01       	movw	r24, r28
    2af4:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <u8g2_SetBufferCurrTileRow>
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	08 95       	ret

00002afe <u8g2_NextPage>:
    2afe:	1f 93       	push	r17
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	ec 01       	movw	r28, r24
    2b06:	0e 94 f6 14 	call	0x29ec	; 0x29ec <u8g2_send_buffer>
    2b0a:	1d a1       	ldd	r17, Y+37	; 0x25
    2b0c:	8c a1       	ldd	r24, Y+36	; 0x24
    2b0e:	18 0f       	add	r17, r24
    2b10:	e8 81       	ld	r30, Y
    2b12:	f9 81       	ldd	r31, Y+1	; 0x01
    2b14:	81 89       	ldd	r24, Z+17	; 0x11
    2b16:	18 17       	cp	r17, r24
    2b18:	28 f0       	brcs	.+10     	; 0x2b24 <u8g2_NextPage+0x26>
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <u8x8_RefreshDisplay>
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	0e c0       	rjmp	.+28     	; 0x2b40 <u8g2_NextPage+0x42>
    2b24:	fe 01       	movw	r30, r28
    2b26:	eb 58       	subi	r30, 0x8B	; 139
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	88 23       	and	r24, r24
    2b2e:	19 f0       	breq	.+6      	; 0x2b36 <u8g2_NextPage+0x38>
    2b30:	ce 01       	movw	r24, r28
    2b32:	0e 94 42 15 	call	0x2a84	; 0x2a84 <u8g2_ClearBuffer>
    2b36:	61 2f       	mov	r22, r17
    2b38:	ce 01       	movw	r24, r28
    2b3a:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <u8g2_SetBufferCurrTileRow>
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	1f 91       	pop	r17
    2b46:	08 95       	ret

00002b48 <u8g2_UpdateDisplay>:

/* same as sendBuffer, but does not send the ePaper refresh message */
void u8g2_UpdateDisplay(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
    2b48:	0e 94 f6 14 	call	0x29ec	; 0x29ec <u8g2_send_buffer>
    2b4c:	08 95       	ret

00002b4e <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	ec 01       	movw	r28, r24
  u8g2_FirstPage(u8g2);
    2b54:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
    2b58:	ce 01       	movw	r24, r28
    2b5a:	0e 94 7f 15 	call	0x2afe	; 0x2afe <u8g2_NextPage>
    2b5e:	81 11       	cpse	r24, r1
    2b60:	fb cf       	rjmp	.-10     	; 0x2b58 <u8g2_ClearDisplay+0xa>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	ce 01       	movw	r24, r28
    2b66:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <u8g2_SetBufferCurrTileRow>
}
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	08 95       	ret

00002b70 <u8g2_m_17_4_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[544];
  *page_cnt = 4;
    2b70:	24 e0       	ldi	r18, 0x04	; 4
    2b72:	fc 01       	movw	r30, r24
    2b74:	20 83       	st	Z, r18
  return buf;
  #endif
}
    2b76:	8e ec       	ldi	r24, 0xCE	; 206
    2b78:	91 e3       	ldi	r25, 0x31	; 49
    2b7a:	08 95       	ret

00002b7c <u8g2_Setup_st7565_ea_dogm132_f>:
  buf = u8g2_m_17_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* st7565 f */
void u8g2_Setup_st7565_ea_dogm132_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    2b7c:	cf 92       	push	r12
    2b7e:	df 92       	push	r13
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	1f 92       	push	r1
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	7c 01       	movw	r14, r24
    2b94:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_ea_dogm132, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
    2b96:	89 01       	movw	r16, r18
    2b98:	9a 01       	movw	r18, r20
    2b9a:	4c ed       	ldi	r20, 0xDC	; 220
    2b9c:	5d e1       	ldi	r21, 0x1D	; 29
    2b9e:	62 e3       	ldi	r22, 0x32	; 50
    2ba0:	7f e1       	ldi	r23, 0x1F	; 31
    2ba2:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <u8x8_Setup>
  buf = u8g2_m_17_4_f(&tile_buf_height);
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	01 96       	adiw	r24, 0x01	; 1
    2baa:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <u8g2_m_17_4_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    2bae:	86 01       	movw	r16, r12
    2bb0:	2f ea       	ldi	r18, 0xAF	; 175
    2bb2:	3a e1       	ldi	r19, 0x1A	; 26
    2bb4:	49 81       	ldd	r20, Y+1	; 0x01
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	c7 01       	movw	r24, r14
    2bba:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <u8g2_SetupBuffer>
}
    2bbe:	0f 90       	pop	r0
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	ff 90       	pop	r15
    2bca:	ef 90       	pop	r14
    2bcc:	df 90       	pop	r13
    2bce:	cf 90       	pop	r12
    2bd0:	08 95       	ret

00002bd2 <u8g2_font_get_word>:
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  return u8g2_string_width(u8g2, str);
}
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e6 0f       	add	r30, r22
    2bd6:	f1 1d       	adc	r31, r1
    2bd8:	84 91       	lpm	r24, Z
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	98 2f       	mov	r25, r24
    2bde:	88 27       	eor	r24, r24
    2be0:	31 96       	adiw	r30, 0x01	; 1
    2be2:	e4 91       	lpm	r30, Z
    2be4:	8e 0f       	add	r24, r30
    2be6:	91 1d       	adc	r25, r1
    2be8:	08 95       	ret

00002bea <u8g2_font_calc_vref_font>:
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	08 95       	ret

00002bf0 <u8g2_read_font_info>:
    2bf0:	0f 93       	push	r16
    2bf2:	1f 93       	push	r17
    2bf4:	cf 93       	push	r28
    2bf6:	df 93       	push	r29
    2bf8:	ec 01       	movw	r28, r24
    2bfa:	8b 01       	movw	r16, r22
    2bfc:	fb 01       	movw	r30, r22
    2bfe:	84 91       	lpm	r24, Z
    2c00:	88 83       	st	Y, r24
    2c02:	31 96       	adiw	r30, 0x01	; 1
    2c04:	e4 91       	lpm	r30, Z
    2c06:	e9 83       	std	Y+1, r30	; 0x01
    2c08:	fb 01       	movw	r30, r22
    2c0a:	32 96       	adiw	r30, 0x02	; 2
    2c0c:	e4 91       	lpm	r30, Z
    2c0e:	ea 83       	std	Y+2, r30	; 0x02
    2c10:	fb 01       	movw	r30, r22
    2c12:	33 96       	adiw	r30, 0x03	; 3
    2c14:	e4 91       	lpm	r30, Z
    2c16:	eb 83       	std	Y+3, r30	; 0x03
    2c18:	fb 01       	movw	r30, r22
    2c1a:	34 96       	adiw	r30, 0x04	; 4
    2c1c:	e4 91       	lpm	r30, Z
    2c1e:	ec 83       	std	Y+4, r30	; 0x04
    2c20:	fb 01       	movw	r30, r22
    2c22:	35 96       	adiw	r30, 0x05	; 5
    2c24:	e4 91       	lpm	r30, Z
    2c26:	ed 83       	std	Y+5, r30	; 0x05
    2c28:	fb 01       	movw	r30, r22
    2c2a:	36 96       	adiw	r30, 0x06	; 6
    2c2c:	e4 91       	lpm	r30, Z
    2c2e:	ee 83       	std	Y+6, r30	; 0x06
    2c30:	fb 01       	movw	r30, r22
    2c32:	37 96       	adiw	r30, 0x07	; 7
    2c34:	e4 91       	lpm	r30, Z
    2c36:	ef 83       	std	Y+7, r30	; 0x07
    2c38:	fb 01       	movw	r30, r22
    2c3a:	38 96       	adiw	r30, 0x08	; 8
    2c3c:	e4 91       	lpm	r30, Z
    2c3e:	e8 87       	std	Y+8, r30	; 0x08
    2c40:	fb 01       	movw	r30, r22
    2c42:	39 96       	adiw	r30, 0x09	; 9
    2c44:	e4 91       	lpm	r30, Z
    2c46:	e9 87       	std	Y+9, r30	; 0x09
    2c48:	fb 01       	movw	r30, r22
    2c4a:	3a 96       	adiw	r30, 0x0a	; 10
    2c4c:	e4 91       	lpm	r30, Z
    2c4e:	ea 87       	std	Y+10, r30	; 0x0a
    2c50:	fb 01       	movw	r30, r22
    2c52:	3b 96       	adiw	r30, 0x0b	; 11
    2c54:	e4 91       	lpm	r30, Z
    2c56:	eb 87       	std	Y+11, r30	; 0x0b
    2c58:	fb 01       	movw	r30, r22
    2c5a:	3c 96       	adiw	r30, 0x0c	; 12
    2c5c:	e4 91       	lpm	r30, Z
    2c5e:	ec 87       	std	Y+12, r30	; 0x0c
    2c60:	fb 01       	movw	r30, r22
    2c62:	3d 96       	adiw	r30, 0x0d	; 13
    2c64:	e4 91       	lpm	r30, Z
    2c66:	ed 87       	std	Y+13, r30	; 0x0d
    2c68:	fb 01       	movw	r30, r22
    2c6a:	3e 96       	adiw	r30, 0x0e	; 14
    2c6c:	e4 91       	lpm	r30, Z
    2c6e:	ee 87       	std	Y+14, r30	; 0x0e
    2c70:	fb 01       	movw	r30, r22
    2c72:	3f 96       	adiw	r30, 0x0f	; 15
    2c74:	e4 91       	lpm	r30, Z
    2c76:	ef 87       	std	Y+15, r30	; 0x0f
    2c78:	fb 01       	movw	r30, r22
    2c7a:	70 96       	adiw	r30, 0x10	; 16
    2c7c:	e4 91       	lpm	r30, Z
    2c7e:	e8 8b       	std	Y+16, r30	; 0x10
    2c80:	61 e1       	ldi	r22, 0x11	; 17
    2c82:	c8 01       	movw	r24, r16
    2c84:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <u8g2_font_get_word>
    2c88:	89 8b       	std	Y+17, r24	; 0x11
    2c8a:	9a 8b       	std	Y+18, r25	; 0x12
    2c8c:	63 e1       	ldi	r22, 0x13	; 19
    2c8e:	c8 01       	movw	r24, r16
    2c90:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <u8g2_font_get_word>
    2c94:	8b 8b       	std	Y+19, r24	; 0x13
    2c96:	9c 8b       	std	Y+20, r25	; 0x14
    2c98:	65 e1       	ldi	r22, 0x15	; 21
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <u8g2_font_get_word>
    2ca0:	8d 8b       	std	Y+21, r24	; 0x15
    2ca2:	9e 8b       	std	Y+22, r25	; 0x16
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	1f 91       	pop	r17
    2caa:	0f 91       	pop	r16
    2cac:	08 95       	ret

00002cae <u8g2_font_decode_get_unsigned_bits>:
    2cae:	dc 01       	movw	r26, r24
    2cb0:	1a 96       	adiw	r26, 0x0a	; 10
    2cb2:	9c 91       	ld	r25, X
    2cb4:	1a 97       	sbiw	r26, 0x0a	; 10
    2cb6:	ed 91       	ld	r30, X+
    2cb8:	fc 91       	ld	r31, X
    2cba:	11 97       	sbiw	r26, 0x01	; 1
    2cbc:	24 91       	lpm	r18, Z
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	09 2e       	mov	r0, r25
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <u8g2_font_decode_get_unsigned_bits+0x1a>
    2cc4:	35 95       	asr	r19
    2cc6:	27 95       	ror	r18
    2cc8:	0a 94       	dec	r0
    2cca:	e2 f7       	brpl	.-8      	; 0x2cc4 <u8g2_font_decode_get_unsigned_bits+0x16>
    2ccc:	89 2f       	mov	r24, r25
    2cce:	86 0f       	add	r24, r22
    2cd0:	88 30       	cpi	r24, 0x08	; 8
    2cd2:	10 f4       	brcc	.+4      	; 0x2cd8 <u8g2_font_decode_get_unsigned_bits+0x2a>
    2cd4:	e2 2f       	mov	r30, r18
    2cd6:	0f c0       	rjmp	.+30     	; 0x2cf6 <u8g2_font_decode_get_unsigned_bits+0x48>
    2cd8:	31 96       	adiw	r30, 0x01	; 1
    2cda:	ed 93       	st	X+, r30
    2cdc:	fc 93       	st	X, r31
    2cde:	11 97       	sbiw	r26, 0x01	; 1
    2ce0:	e4 91       	lpm	r30, Z
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	38 e0       	ldi	r19, 0x08	; 8
    2ce6:	39 1b       	sub	r19, r25
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <u8g2_font_decode_get_unsigned_bits+0x40>
    2cea:	ee 0f       	add	r30, r30
    2cec:	ff 1f       	adc	r31, r31
    2cee:	3a 95       	dec	r19
    2cf0:	e2 f7       	brpl	.-8      	; 0x2cea <u8g2_font_decode_get_unsigned_bits+0x3c>
    2cf2:	e2 2b       	or	r30, r18
    2cf4:	88 50       	subi	r24, 0x08	; 8
    2cf6:	1a 96       	adiw	r26, 0x0a	; 10
    2cf8:	8c 93       	st	X, r24
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <u8g2_font_decode_get_unsigned_bits+0x56>
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	6a 95       	dec	r22
    2d06:	e2 f7       	brpl	.-8      	; 0x2d00 <u8g2_font_decode_get_unsigned_bits+0x52>
    2d08:	81 50       	subi	r24, 0x01	; 1
    2d0a:	8e 23       	and	r24, r30
    2d0c:	08 95       	ret

00002d0e <u8g2_font_setup_decode>:
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	8c 01       	movw	r16, r24
    2d18:	ec 01       	movw	r28, r24
    2d1a:	c8 5b       	subi	r28, 0xB8	; 184
    2d1c:	df 4f       	sbci	r29, 0xFF	; 255
    2d1e:	68 83       	st	Y, r22
    2d20:	79 83       	std	Y+1, r23	; 0x01
    2d22:	1a 86       	std	Y+10, r1	; 0x0a
    2d24:	fc 01       	movw	r30, r24
    2d26:	e5 5a       	subi	r30, 0xA5	; 165
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	60 81       	ld	r22, Z
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	0e 94 57 16 	call	0x2cae	; 0x2cae <u8g2_font_decode_get_unsigned_bits>
    2d32:	88 87       	std	Y+8, r24	; 0x08
    2d34:	f8 01       	movw	r30, r16
    2d36:	e4 5a       	subi	r30, 0xA4	; 164
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	60 81       	ld	r22, Z
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	0e 94 57 16 	call	0x2cae	; 0x2cae <u8g2_font_decode_get_unsigned_bits>
    2d42:	89 87       	std	Y+9, r24	; 0x09
    2d44:	f8 01       	movw	r30, r16
    2d46:	ec 58       	subi	r30, 0x8C	; 140
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8c 87       	std	Y+12, r24	; 0x0c
    2d4e:	91 e0       	ldi	r25, 0x01	; 1
    2d50:	81 11       	cpse	r24, r1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9d 87       	std	Y+13, r25	; 0x0d
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	08 95       	ret

00002d60 <u8g2_font_decode_get_signed_bits>:
    2d60:	cf 93       	push	r28
    2d62:	c6 2f       	mov	r28, r22
    2d64:	0e 94 57 16 	call	0x2cae	; 0x2cae <u8g2_font_decode_get_unsigned_bits>
    2d68:	c1 50       	subi	r28, 0x01	; 1
    2d6a:	21 e0       	ldi	r18, 0x01	; 1
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <u8g2_font_decode_get_signed_bits+0x14>
    2d70:	22 0f       	add	r18, r18
    2d72:	33 1f       	adc	r19, r19
    2d74:	ca 95       	dec	r28
    2d76:	e2 f7       	brpl	.-8      	; 0x2d70 <u8g2_font_decode_get_signed_bits+0x10>
    2d78:	82 1b       	sub	r24, r18
    2d7a:	cf 91       	pop	r28
    2d7c:	08 95       	ret

00002d7e <u8g2_add_vector_y>:
    2d7e:	21 30       	cpi	r18, 0x01	; 1
    2d80:	49 f0       	breq	.+18     	; 0x2d94 <u8g2_add_vector_y+0x16>
    2d82:	18 f0       	brcs	.+6      	; 0x2d8a <u8g2_add_vector_y+0xc>
    2d84:	22 30       	cpi	r18, 0x02	; 2
    2d86:	59 f0       	breq	.+22     	; 0x2d9e <u8g2_add_vector_y+0x20>
    2d88:	0f c0       	rjmp	.+30     	; 0x2da8 <u8g2_add_vector_y+0x2a>
    2d8a:	84 0f       	add	r24, r20
    2d8c:	91 1d       	adc	r25, r1
    2d8e:	47 fd       	sbrc	r20, 7
    2d90:	9a 95       	dec	r25
    2d92:	08 95       	ret
    2d94:	86 0f       	add	r24, r22
    2d96:	91 1d       	adc	r25, r1
    2d98:	67 fd       	sbrc	r22, 7
    2d9a:	9a 95       	dec	r25
    2d9c:	08 95       	ret
    2d9e:	84 1b       	sub	r24, r20
    2da0:	91 09       	sbc	r25, r1
    2da2:	47 fd       	sbrc	r20, 7
    2da4:	93 95       	inc	r25
    2da6:	08 95       	ret
    2da8:	86 1b       	sub	r24, r22
    2daa:	91 09       	sbc	r25, r1
    2dac:	67 fd       	sbrc	r22, 7
    2dae:	93 95       	inc	r25
    2db0:	08 95       	ret

00002db2 <u8g2_add_vector_x>:
    2db2:	21 30       	cpi	r18, 0x01	; 1
    2db4:	49 f0       	breq	.+18     	; 0x2dc8 <u8g2_add_vector_x+0x16>
    2db6:	18 f0       	brcs	.+6      	; 0x2dbe <u8g2_add_vector_x+0xc>
    2db8:	22 30       	cpi	r18, 0x02	; 2
    2dba:	59 f0       	breq	.+22     	; 0x2dd2 <u8g2_add_vector_x+0x20>
    2dbc:	0f c0       	rjmp	.+30     	; 0x2ddc <u8g2_add_vector_x+0x2a>
    2dbe:	86 0f       	add	r24, r22
    2dc0:	91 1d       	adc	r25, r1
    2dc2:	67 fd       	sbrc	r22, 7
    2dc4:	9a 95       	dec	r25
    2dc6:	08 95       	ret
    2dc8:	84 1b       	sub	r24, r20
    2dca:	91 09       	sbc	r25, r1
    2dcc:	47 fd       	sbrc	r20, 7
    2dce:	93 95       	inc	r25
    2dd0:	08 95       	ret
    2dd2:	86 1b       	sub	r24, r22
    2dd4:	91 09       	sbc	r25, r1
    2dd6:	67 fd       	sbrc	r22, 7
    2dd8:	93 95       	inc	r25
    2dda:	08 95       	ret
    2ddc:	84 0f       	add	r24, r20
    2dde:	91 1d       	adc	r25, r1
    2de0:	47 fd       	sbrc	r20, 7
    2de2:	9a 95       	dec	r25
    2de4:	08 95       	ret

00002de6 <u8g2_font_decode_len>:
    2de6:	2f 92       	push	r2
    2de8:	3f 92       	push	r3
    2dea:	4f 92       	push	r4
    2dec:	5f 92       	push	r5
    2dee:	6f 92       	push	r6
    2df0:	7f 92       	push	r7
    2df2:	8f 92       	push	r8
    2df4:	9f 92       	push	r9
    2df6:	af 92       	push	r10
    2df8:	bf 92       	push	r11
    2dfa:	cf 92       	push	r12
    2dfc:	df 92       	push	r13
    2dfe:	ef 92       	push	r14
    2e00:	ff 92       	push	r15
    2e02:	0f 93       	push	r16
    2e04:	1f 93       	push	r17
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	4c 01       	movw	r8, r24
    2e0c:	d6 2f       	mov	r29, r22
    2e0e:	34 2e       	mov	r3, r20
    2e10:	fc 01       	movw	r30, r24
    2e12:	e8 5b       	subi	r30, 0xB8	; 184
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	56 80       	ldd	r5, Z+6	; 0x06
    2e18:	17 81       	ldd	r17, Z+7	; 0x07
    2e1a:	7f 01       	movw	r14, r30
    2e1c:	3c 01       	movw	r6, r24
    2e1e:	e4 e7       	ldi	r30, 0x74	; 116
    2e20:	6e 0e       	add	r6, r30
    2e22:	71 1c       	adc	r7, r1
    2e24:	f7 01       	movw	r30, r14
    2e26:	c0 85       	ldd	r28, Z+8	; 0x08
    2e28:	c5 19       	sub	r28, r5
    2e2a:	2d 2e       	mov	r2, r29
    2e2c:	cd 17       	cp	r28, r29
    2e2e:	08 f4       	brcc	.+2      	; 0x2e32 <u8g2_font_decode_len+0x4c>
    2e30:	2c 2e       	mov	r2, r28
    2e32:	f7 01       	movw	r30, r14
    2e34:	c4 80       	ldd	r12, Z+4	; 0x04
    2e36:	d5 80       	ldd	r13, Z+5	; 0x05
    2e38:	06 85       	ldd	r16, Z+14	; 0x0e
    2e3a:	41 2e       	mov	r4, r17
    2e3c:	20 2f       	mov	r18, r16
    2e3e:	41 2f       	mov	r20, r17
    2e40:	65 2d       	mov	r22, r5
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <u8g2_add_vector_x>
    2e4a:	5c 01       	movw	r10, r24
    2e4c:	20 2f       	mov	r18, r16
    2e4e:	41 2f       	mov	r20, r17
    2e50:	65 2d       	mov	r22, r5
    2e52:	c6 01       	movw	r24, r12
    2e54:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <u8g2_add_vector_y>
    2e58:	33 20       	and	r3, r3
    2e5a:	61 f0       	breq	.+24     	; 0x2e74 <u8g2_font_decode_len+0x8e>
    2e5c:	f7 01       	movw	r30, r14
    2e5e:	24 85       	ldd	r18, Z+12	; 0x0c
    2e60:	f3 01       	movw	r30, r6
    2e62:	20 83       	st	Z, r18
    2e64:	22 2d       	mov	r18, r2
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	ac 01       	movw	r20, r24
    2e6a:	b5 01       	movw	r22, r10
    2e6c:	c4 01       	movw	r24, r8
    2e6e:	0e 94 cc 19 	call	0x3398	; 0x3398 <u8g2_DrawHVLine>
    2e72:	0e c0       	rjmp	.+28     	; 0x2e90 <u8g2_font_decode_len+0xaa>
    2e74:	f7 01       	movw	r30, r14
    2e76:	23 85       	ldd	r18, Z+11	; 0x0b
    2e78:	21 11       	cpse	r18, r1
    2e7a:	0a c0       	rjmp	.+20     	; 0x2e90 <u8g2_font_decode_len+0xaa>
    2e7c:	25 85       	ldd	r18, Z+13	; 0x0d
    2e7e:	f3 01       	movw	r30, r6
    2e80:	20 83       	st	Z, r18
    2e82:	22 2d       	mov	r18, r2
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	ac 01       	movw	r20, r24
    2e88:	b5 01       	movw	r22, r10
    2e8a:	c4 01       	movw	r24, r8
    2e8c:	0e 94 cc 19 	call	0x3398	; 0x3398 <u8g2_DrawHVLine>
    2e90:	dc 17       	cp	r29, r28
    2e92:	20 f0       	brcs	.+8      	; 0x2e9c <u8g2_font_decode_len+0xb6>
    2e94:	dc 1b       	sub	r29, r28
    2e96:	1f 5f       	subi	r17, 0xFF	; 255
    2e98:	51 2c       	mov	r5, r1
    2e9a:	c4 cf       	rjmp	.-120    	; 0x2e24 <u8g2_font_decode_len+0x3e>
    2e9c:	f4 01       	movw	r30, r8
    2e9e:	e8 5b       	subi	r30, 0xB8	; 184
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	d5 0d       	add	r29, r5
    2ea4:	d6 83       	std	Z+6, r29	; 0x06
    2ea6:	47 82       	std	Z+7, r4	; 0x07
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	1f 91       	pop	r17
    2eae:	0f 91       	pop	r16
    2eb0:	ff 90       	pop	r15
    2eb2:	ef 90       	pop	r14
    2eb4:	df 90       	pop	r13
    2eb6:	cf 90       	pop	r12
    2eb8:	bf 90       	pop	r11
    2eba:	af 90       	pop	r10
    2ebc:	9f 90       	pop	r9
    2ebe:	8f 90       	pop	r8
    2ec0:	7f 90       	pop	r7
    2ec2:	6f 90       	pop	r6
    2ec4:	5f 90       	pop	r5
    2ec6:	4f 90       	pop	r4
    2ec8:	3f 90       	pop	r3
    2eca:	2f 90       	pop	r2
    2ecc:	08 95       	ret

00002ece <u8g2_font_decode_glyph>:
    2ece:	6f 92       	push	r6
    2ed0:	7f 92       	push	r7
    2ed2:	8f 92       	push	r8
    2ed4:	9f 92       	push	r9
    2ed6:	af 92       	push	r10
    2ed8:	bf 92       	push	r11
    2eda:	cf 92       	push	r12
    2edc:	df 92       	push	r13
    2ede:	ef 92       	push	r14
    2ee0:	ff 92       	push	r15
    2ee2:	0f 93       	push	r16
    2ee4:	1f 93       	push	r17
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	ec 01       	movw	r28, r24
    2eec:	7c 01       	movw	r14, r24
    2eee:	88 e4       	ldi	r24, 0x48	; 72
    2ef0:	e8 0e       	add	r14, r24
    2ef2:	f1 1c       	adc	r15, r1
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <u8g2_font_setup_decode>
    2efa:	fe 01       	movw	r30, r28
    2efc:	ef 5a       	subi	r30, 0xAF	; 175
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	60 80       	ld	r6, Z
    2f02:	3c 96       	adiw	r30, 0x0c	; 12
    2f04:	60 81       	ld	r22, Z
    2f06:	c7 01       	movw	r24, r14
    2f08:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <u8g2_font_decode_get_signed_bits>
    2f0c:	98 2e       	mov	r9, r24
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e2 5a       	subi	r30, 0xA2	; 162
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	60 81       	ld	r22, Z
    2f16:	c7 01       	movw	r24, r14
    2f18:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <u8g2_font_decode_get_signed_bits>
    2f1c:	18 2f       	mov	r17, r24
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e1 5a       	subi	r30, 0xA1	; 161
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	60 81       	ld	r22, Z
    2f26:	c7 01       	movw	r24, r14
    2f28:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <u8g2_font_decode_get_signed_bits>
    2f2c:	78 2e       	mov	r7, r24
    2f2e:	f7 01       	movw	r30, r14
    2f30:	80 84       	ldd	r8, Z+8	; 0x08
    2f32:	18 14       	cp	r1, r8
    2f34:	0c f0       	brlt	.+2      	; 0x2f38 <u8g2_font_decode_glyph+0x6a>
    2f36:	a4 c0       	rjmp	.+328    	; 0x3080 <u8g2_font_decode_glyph+0x1b2>
    2f38:	06 85       	ldd	r16, Z+14	; 0x0e
    2f3a:	16 0d       	add	r17, r6
    2f3c:	11 95       	neg	r17
    2f3e:	20 2f       	mov	r18, r16
    2f40:	41 2f       	mov	r20, r17
    2f42:	69 2d       	mov	r22, r9
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <u8g2_add_vector_x>
    2f4c:	6c 01       	movw	r12, r24
    2f4e:	f7 01       	movw	r30, r14
    2f50:	82 83       	std	Z+2, r24	; 0x02
    2f52:	93 83       	std	Z+3, r25	; 0x03
    2f54:	20 2f       	mov	r18, r16
    2f56:	41 2f       	mov	r20, r17
    2f58:	69 2d       	mov	r22, r9
    2f5a:	84 81       	ldd	r24, Z+4	; 0x04
    2f5c:	95 81       	ldd	r25, Z+5	; 0x05
    2f5e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <u8g2_add_vector_y>
    2f62:	f7 01       	movw	r30, r14
    2f64:	84 83       	std	Z+4, r24	; 0x04
    2f66:	95 83       	std	Z+5, r25	; 0x05
    2f68:	01 30       	cpi	r16, 0x01	; 1
    2f6a:	89 f0       	breq	.+34     	; 0x2f8e <u8g2_font_decode_glyph+0xc0>
    2f6c:	28 f0       	brcs	.+10     	; 0x2f78 <u8g2_font_decode_glyph+0xaa>
    2f6e:	02 30       	cpi	r16, 0x02	; 2
    2f70:	f9 f0       	breq	.+62     	; 0x2fb0 <u8g2_font_decode_glyph+0xe2>
    2f72:	03 30       	cpi	r16, 0x03	; 3
    2f74:	99 f1       	breq	.+102    	; 0x2fdc <u8g2_font_decode_glyph+0x10e>
    2f76:	43 c0       	rjmp	.+134    	; 0x2ffe <u8g2_font_decode_glyph+0x130>
    2f78:	96 01       	movw	r18, r12
    2f7a:	28 0d       	add	r18, r8
    2f7c:	31 1d       	adc	r19, r1
    2f7e:	87 fc       	sbrc	r8, 7
    2f80:	3a 95       	dec	r19
    2f82:	8c 01       	movw	r16, r24
    2f84:	06 0d       	add	r16, r6
    2f86:	11 1d       	adc	r17, r1
    2f88:	67 fc       	sbrc	r6, 7
    2f8a:	1a 95       	dec	r17
    2f8c:	3a c0       	rjmp	.+116    	; 0x3002 <u8g2_font_decode_glyph+0x134>
    2f8e:	41 e0       	ldi	r20, 0x01	; 1
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	46 19       	sub	r20, r6
    2f94:	51 09       	sbc	r21, r1
    2f96:	67 fc       	sbrc	r6, 7
    2f98:	53 95       	inc	r21
    2f9a:	96 01       	movw	r18, r12
    2f9c:	2f 5f       	subi	r18, 0xFF	; 255
    2f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa0:	8c 01       	movw	r16, r24
    2fa2:	08 0d       	add	r16, r8
    2fa4:	11 1d       	adc	r17, r1
    2fa6:	87 fc       	sbrc	r8, 7
    2fa8:	1a 95       	dec	r17
    2faa:	c4 0e       	add	r12, r20
    2fac:	d5 1e       	adc	r13, r21
    2fae:	29 c0       	rjmp	.+82     	; 0x3002 <u8g2_font_decode_glyph+0x134>
    2fb0:	41 e0       	ldi	r20, 0x01	; 1
    2fb2:	50 e0       	ldi	r21, 0x00	; 0
    2fb4:	ba 01       	movw	r22, r20
    2fb6:	68 19       	sub	r22, r8
    2fb8:	71 09       	sbc	r23, r1
    2fba:	87 fc       	sbrc	r8, 7
    2fbc:	73 95       	inc	r23
    2fbe:	96 01       	movw	r18, r12
    2fc0:	2f 5f       	subi	r18, 0xFF	; 255
    2fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc4:	46 19       	sub	r20, r6
    2fc6:	51 09       	sbc	r21, r1
    2fc8:	67 fc       	sbrc	r6, 7
    2fca:	53 95       	inc	r21
    2fcc:	8c 01       	movw	r16, r24
    2fce:	0f 5f       	subi	r16, 0xFF	; 255
    2fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd2:	84 0f       	add	r24, r20
    2fd4:	95 1f       	adc	r25, r21
    2fd6:	c6 0e       	add	r12, r22
    2fd8:	d7 1e       	adc	r13, r23
    2fda:	13 c0       	rjmp	.+38     	; 0x3002 <u8g2_font_decode_glyph+0x134>
    2fdc:	96 01       	movw	r18, r12
    2fde:	26 0d       	add	r18, r6
    2fe0:	31 1d       	adc	r19, r1
    2fe2:	67 fc       	sbrc	r6, 7
    2fe4:	3a 95       	dec	r19
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	48 19       	sub	r20, r8
    2fec:	51 09       	sbc	r21, r1
    2fee:	87 fc       	sbrc	r8, 7
    2ff0:	53 95       	inc	r21
    2ff2:	8c 01       	movw	r16, r24
    2ff4:	0f 5f       	subi	r16, 0xFF	; 255
    2ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff8:	84 0f       	add	r24, r20
    2ffa:	95 1f       	adc	r25, r21
    2ffc:	02 c0       	rjmp	.+4      	; 0x3002 <u8g2_font_decode_glyph+0x134>
    2ffe:	8c 01       	movw	r16, r24
    3000:	96 01       	movw	r18, r12
    3002:	ac 01       	movw	r20, r24
    3004:	b6 01       	movw	r22, r12
    3006:	ce 01       	movw	r24, r28
    3008:	0e 94 8a 1a 	call	0x3514	; 0x3514 <u8g2_IsIntersection>
    300c:	88 23       	and	r24, r24
    300e:	c1 f1       	breq	.+112    	; 0x3080 <u8g2_font_decode_glyph+0x1b2>
    3010:	fe 01       	movw	r30, r28
    3012:	e8 5b       	subi	r30, 0xB8	; 184
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	16 82       	std	Z+6, r1	; 0x06
    3018:	17 82       	std	Z+7, r1	; 0x07
    301a:	4e 01       	movw	r8, r28
    301c:	f9 e5       	ldi	r31, 0x59	; 89
    301e:	8f 0e       	add	r8, r31
    3020:	91 1c       	adc	r9, r1
    3022:	5e 01       	movw	r10, r28
    3024:	8a e5       	ldi	r24, 0x5A	; 90
    3026:	a8 0e       	add	r10, r24
    3028:	b1 1c       	adc	r11, r1
    302a:	6e 01       	movw	r12, r28
    302c:	e8 e4       	ldi	r30, 0x48	; 72
    302e:	ce 0e       	add	r12, r30
    3030:	d1 1c       	adc	r13, r1
    3032:	f4 01       	movw	r30, r8
    3034:	60 81       	ld	r22, Z
    3036:	c7 01       	movw	r24, r14
    3038:	0e 94 57 16 	call	0x2cae	; 0x2cae <u8g2_font_decode_get_unsigned_bits>
    303c:	08 2f       	mov	r16, r24
    303e:	f5 01       	movw	r30, r10
    3040:	60 81       	ld	r22, Z
    3042:	c7 01       	movw	r24, r14
    3044:	0e 94 57 16 	call	0x2cae	; 0x2cae <u8g2_font_decode_get_unsigned_bits>
    3048:	18 2f       	mov	r17, r24
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	60 2f       	mov	r22, r16
    304e:	ce 01       	movw	r24, r28
    3050:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <u8g2_font_decode_len>
    3054:	41 e0       	ldi	r20, 0x01	; 1
    3056:	61 2f       	mov	r22, r17
    3058:	ce 01       	movw	r24, r28
    305a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <u8g2_font_decode_len>
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	c7 01       	movw	r24, r14
    3062:	0e 94 57 16 	call	0x2cae	; 0x2cae <u8g2_font_decode_get_unsigned_bits>
    3066:	81 11       	cpse	r24, r1
    3068:	f0 cf       	rjmp	.-32     	; 0x304a <u8g2_font_decode_glyph+0x17c>
    306a:	f6 01       	movw	r30, r12
    306c:	87 81       	ldd	r24, Z+7	; 0x07
    306e:	86 15       	cp	r24, r6
    3070:	04 f3       	brlt	.-64     	; 0x3032 <u8g2_font_decode_glyph+0x164>
    3072:	fe 01       	movw	r30, r28
    3074:	ec 58       	subi	r30, 0x8C	; 140
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	c8 5b       	subi	r28, 0xB8	; 184
    307a:	df 4f       	sbci	r29, 0xFF	; 255
    307c:	8c 85       	ldd	r24, Y+12	; 0x0c
    307e:	80 83       	st	Z, r24
    3080:	87 2d       	mov	r24, r7
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	ff 90       	pop	r15
    308c:	ef 90       	pop	r14
    308e:	df 90       	pop	r13
    3090:	cf 90       	pop	r12
    3092:	bf 90       	pop	r11
    3094:	af 90       	pop	r10
    3096:	9f 90       	pop	r9
    3098:	8f 90       	pop	r8
    309a:	7f 90       	pop	r7
    309c:	6f 90       	pop	r6
    309e:	08 95       	ret

000030a0 <u8g2_font_get_glyph_data>:
    30a0:	ef 92       	push	r14
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	fc 01       	movw	r30, r24
    30ae:	ec 5b       	subi	r30, 0xBC	; 188
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	c0 81       	ld	r28, Z
    30b4:	d1 81       	ldd	r29, Z+1	; 0x01
    30b6:	67 96       	adiw	r28, 0x17	; 23
    30b8:	6f 3f       	cpi	r22, 0xFF	; 255
    30ba:	71 05       	cpc	r23, r1
    30bc:	11 f0       	breq	.+4      	; 0x30c2 <u8g2_font_get_glyph_data+0x22>
    30be:	08 f0       	brcs	.+2      	; 0x30c2 <u8g2_font_get_glyph_data+0x22>
    30c0:	35 c0       	rjmp	.+106    	; 0x312c <u8g2_font_get_glyph_data+0x8c>
    30c2:	61 36       	cpi	r22, 0x61	; 97
    30c4:	71 05       	cpc	r23, r1
    30c6:	30 f0       	brcs	.+12     	; 0x30d4 <u8g2_font_get_glyph_data+0x34>
    30c8:	b6 96       	adiw	r30, 0x26	; 38
    30ca:	80 81       	ld	r24, Z
    30cc:	91 81       	ldd	r25, Z+1	; 0x01
    30ce:	c8 0f       	add	r28, r24
    30d0:	d9 1f       	adc	r29, r25
    30d2:	0a c0       	rjmp	.+20     	; 0x30e8 <u8g2_font_get_glyph_data+0x48>
    30d4:	61 34       	cpi	r22, 0x41	; 65
    30d6:	71 05       	cpc	r23, r1
    30d8:	38 f0       	brcs	.+14     	; 0x30e8 <u8g2_font_get_glyph_data+0x48>
    30da:	fc 01       	movw	r30, r24
    30dc:	e8 59       	subi	r30, 0x98	; 152
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	91 81       	ldd	r25, Z+1	; 0x01
    30e4:	c8 0f       	add	r28, r24
    30e6:	d9 1f       	adc	r29, r25
    30e8:	ce 01       	movw	r24, r28
    30ea:	01 96       	adiw	r24, 0x01	; 1
    30ec:	fc 01       	movw	r30, r24
    30ee:	24 91       	lpm	r18, Z
    30f0:	22 23       	and	r18, r18
    30f2:	09 f4       	brne	.+2      	; 0x30f6 <u8g2_font_get_glyph_data+0x56>
    30f4:	5a c0       	rjmp	.+180    	; 0x31aa <u8g2_font_get_glyph_data+0x10a>
    30f6:	fe 01       	movw	r30, r28
    30f8:	24 91       	lpm	r18, Z
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	62 17       	cp	r22, r18
    30fe:	73 07       	cpc	r23, r19
    3100:	51 f4       	brne	.+20     	; 0x3116 <u8g2_font_get_glyph_data+0x76>
    3102:	06 c0       	rjmp	.+12     	; 0x3110 <u8g2_font_get_glyph_data+0x70>
    3104:	fe 01       	movw	r30, r28
    3106:	24 91       	lpm	r18, Z
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	62 17       	cp	r22, r18
    310c:	73 07       	cpc	r23, r19
    310e:	19 f4       	brne	.+6      	; 0x3116 <u8g2_font_get_glyph_data+0x76>
    3110:	ce 01       	movw	r24, r28
    3112:	02 96       	adiw	r24, 0x02	; 2
    3114:	52 c0       	rjmp	.+164    	; 0x31ba <u8g2_font_get_glyph_data+0x11a>
    3116:	fc 01       	movw	r30, r24
    3118:	84 91       	lpm	r24, Z
    311a:	c8 0f       	add	r28, r24
    311c:	d1 1d       	adc	r29, r1
    311e:	ce 01       	movw	r24, r28
    3120:	01 96       	adiw	r24, 0x01	; 1
    3122:	fc 01       	movw	r30, r24
    3124:	24 91       	lpm	r18, Z
    3126:	21 11       	cpse	r18, r1
    3128:	ed cf       	rjmp	.-38     	; 0x3104 <u8g2_font_get_glyph_data+0x64>
    312a:	42 c0       	rjmp	.+132    	; 0x31b0 <u8g2_font_get_glyph_data+0x110>
    312c:	8b 01       	movw	r16, r22
    312e:	fc 01       	movw	r30, r24
    3130:	e4 59       	subi	r30, 0x94	; 148
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	c8 0f       	add	r28, r24
    313a:	d9 1f       	adc	r29, r25
    313c:	7e 01       	movw	r14, r28
    313e:	60 e0       	ldi	r22, 0x00	; 0
    3140:	c7 01       	movw	r24, r14
    3142:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <u8g2_font_get_word>
    3146:	c8 0f       	add	r28, r24
    3148:	d9 1f       	adc	r29, r25
    314a:	62 e0       	ldi	r22, 0x02	; 2
    314c:	c7 01       	movw	r24, r14
    314e:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <u8g2_font_get_word>
    3152:	f4 e0       	ldi	r31, 0x04	; 4
    3154:	ef 0e       	add	r14, r31
    3156:	f1 1c       	adc	r15, r1
    3158:	80 17       	cp	r24, r16
    315a:	91 07       	cpc	r25, r17
    315c:	80 f3       	brcs	.-32     	; 0x313e <u8g2_font_get_glyph_data+0x9e>
    315e:	fe 01       	movw	r30, r28
    3160:	84 91       	lpm	r24, Z
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	98 2f       	mov	r25, r24
    3166:	88 27       	eor	r24, r24
    3168:	31 96       	adiw	r30, 0x01	; 1
    316a:	e4 91       	lpm	r30, Z
    316c:	8e 2b       	or	r24, r30
    316e:	00 97       	sbiw	r24, 0x00	; 0
    3170:	11 f1       	breq	.+68     	; 0x31b6 <u8g2_font_get_glyph_data+0x116>
    3172:	08 17       	cp	r16, r24
    3174:	19 07       	cpc	r17, r25
    3176:	39 f4       	brne	.+14     	; 0x3186 <u8g2_font_get_glyph_data+0xe6>
    3178:	03 c0       	rjmp	.+6      	; 0x3180 <u8g2_font_get_glyph_data+0xe0>
    317a:	08 17       	cp	r16, r24
    317c:	19 07       	cpc	r17, r25
    317e:	19 f4       	brne	.+6      	; 0x3186 <u8g2_font_get_glyph_data+0xe6>
    3180:	ce 01       	movw	r24, r28
    3182:	03 96       	adiw	r24, 0x03	; 3
    3184:	1a c0       	rjmp	.+52     	; 0x31ba <u8g2_font_get_glyph_data+0x11a>
    3186:	fe 01       	movw	r30, r28
    3188:	32 96       	adiw	r30, 0x02	; 2
    318a:	e4 91       	lpm	r30, Z
    318c:	ce 0f       	add	r28, r30
    318e:	d1 1d       	adc	r29, r1
    3190:	fe 01       	movw	r30, r28
    3192:	84 91       	lpm	r24, Z
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	98 2f       	mov	r25, r24
    3198:	88 27       	eor	r24, r24
    319a:	31 96       	adiw	r30, 0x01	; 1
    319c:	e4 91       	lpm	r30, Z
    319e:	8e 2b       	or	r24, r30
    31a0:	00 97       	sbiw	r24, 0x00	; 0
    31a2:	59 f7       	brne	.-42     	; 0x317a <u8g2_font_get_glyph_data+0xda>
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	08 c0       	rjmp	.+16     	; 0x31ba <u8g2_font_get_glyph_data+0x11a>
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	05 c0       	rjmp	.+10     	; 0x31ba <u8g2_font_get_glyph_data+0x11a>
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <u8g2_font_get_glyph_data+0x11a>
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	1f 91       	pop	r17
    31c0:	0f 91       	pop	r16
    31c2:	ff 90       	pop	r15
    31c4:	ef 90       	pop	r14
    31c6:	08 95       	ret

000031c8 <u8g2_SetFontMode>:
    31c8:	8d 5a       	subi	r24, 0xAD	; 173
    31ca:	9f 4f       	sbci	r25, 0xFF	; 255
    31cc:	fc 01       	movw	r30, r24
    31ce:	60 83       	st	Z, r22
    31d0:	08 95       	ret

000031d2 <u8g2_DrawGlyph>:
    31d2:	cf 92       	push	r12
    31d4:	df 92       	push	r13
    31d6:	ef 92       	push	r14
    31d8:	ff 92       	push	r15
    31da:	0f 93       	push	r16
    31dc:	1f 93       	push	r17
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	ec 01       	movw	r28, r24
    31e4:	7b 01       	movw	r14, r22
    31e6:	8a 01       	movw	r16, r20
    31e8:	69 01       	movw	r12, r18
    31ea:	fc 01       	movw	r30, r24
    31ec:	ea 5a       	subi	r30, 0xAA	; 170
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 81       	ld	r24, Z
    31f2:	81 30       	cpi	r24, 0x01	; 1
    31f4:	89 f0       	breq	.+34     	; 0x3218 <u8g2_DrawGlyph+0x46>
    31f6:	28 f0       	brcs	.+10     	; 0x3202 <u8g2_DrawGlyph+0x30>
    31f8:	82 30       	cpi	r24, 0x02	; 2
    31fa:	c9 f0       	breq	.+50     	; 0x322e <u8g2_DrawGlyph+0x5c>
    31fc:	83 30       	cpi	r24, 0x03	; 3
    31fe:	11 f1       	breq	.+68     	; 0x3244 <u8g2_DrawGlyph+0x72>
    3200:	2b c0       	rjmp	.+86     	; 0x3258 <u8g2_DrawGlyph+0x86>
    3202:	fe 01       	movw	r30, r28
    3204:	ea 5b       	subi	r30, 0xBA	; 186
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	01 90       	ld	r0, Z+
    320a:	f0 81       	ld	r31, Z
    320c:	e0 2d       	mov	r30, r0
    320e:	ce 01       	movw	r24, r28
    3210:	19 95       	eicall
    3212:	08 0f       	add	r16, r24
    3214:	19 1f       	adc	r17, r25
    3216:	20 c0       	rjmp	.+64     	; 0x3258 <u8g2_DrawGlyph+0x86>
    3218:	fe 01       	movw	r30, r28
    321a:	ea 5b       	subi	r30, 0xBA	; 186
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	01 90       	ld	r0, Z+
    3220:	f0 81       	ld	r31, Z
    3222:	e0 2d       	mov	r30, r0
    3224:	ce 01       	movw	r24, r28
    3226:	19 95       	eicall
    3228:	e8 1a       	sub	r14, r24
    322a:	f9 0a       	sbc	r15, r25
    322c:	15 c0       	rjmp	.+42     	; 0x3258 <u8g2_DrawGlyph+0x86>
    322e:	fe 01       	movw	r30, r28
    3230:	ea 5b       	subi	r30, 0xBA	; 186
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	01 90       	ld	r0, Z+
    3236:	f0 81       	ld	r31, Z
    3238:	e0 2d       	mov	r30, r0
    323a:	ce 01       	movw	r24, r28
    323c:	19 95       	eicall
    323e:	08 1b       	sub	r16, r24
    3240:	19 0b       	sbc	r17, r25
    3242:	0a c0       	rjmp	.+20     	; 0x3258 <u8g2_DrawGlyph+0x86>
    3244:	fe 01       	movw	r30, r28
    3246:	ea 5b       	subi	r30, 0xBA	; 186
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	01 90       	ld	r0, Z+
    324c:	f0 81       	ld	r31, Z
    324e:	e0 2d       	mov	r30, r0
    3250:	ce 01       	movw	r24, r28
    3252:	19 95       	eicall
    3254:	e8 0e       	add	r14, r24
    3256:	f9 1e       	adc	r15, r25
    3258:	fe 01       	movw	r30, r28
    325a:	e6 5b       	subi	r30, 0xB6	; 182
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	e0 82       	st	Z, r14
    3260:	f1 82       	std	Z+1, r15	; 0x01
    3262:	32 96       	adiw	r30, 0x02	; 2
    3264:	00 83       	st	Z, r16
    3266:	11 83       	std	Z+1, r17	; 0x01
    3268:	b6 01       	movw	r22, r12
    326a:	ce 01       	movw	r24, r28
    326c:	0e 94 50 18 	call	0x30a0	; 0x30a0 <u8g2_font_get_glyph_data>
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	41 f0       	breq	.+16     	; 0x3284 <u8g2_DrawGlyph+0xb2>
    3274:	bc 01       	movw	r22, r24
    3276:	ce 01       	movw	r24, r28
    3278:	0e 94 67 17 	call	0x2ece	; 0x2ece <u8g2_font_decode_glyph>
    327c:	08 2e       	mov	r0, r24
    327e:	00 0c       	add	r0, r0
    3280:	99 0b       	sbc	r25, r25
    3282:	02 c0       	rjmp	.+4      	; 0x3288 <u8g2_DrawGlyph+0xb6>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	0f 91       	pop	r16
    3290:	ff 90       	pop	r15
    3292:	ef 90       	pop	r14
    3294:	df 90       	pop	r13
    3296:	cf 90       	pop	r12
    3298:	08 95       	ret

0000329a <u8g2_UpdateRefHeight>:
    329a:	fc 01       	movw	r30, r24
    329c:	ec 5b       	subi	r30, 0xBC	; 188
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	20 81       	ld	r18, Z
    32a2:	31 81       	ldd	r19, Z+1	; 0x01
    32a4:	23 2b       	or	r18, r19
    32a6:	e1 f1       	breq	.+120    	; 0x3320 <u8g2_UpdateRefHeight+0x86>
    32a8:	b0 96       	adiw	r30, 0x20	; 32
    32aa:	20 81       	ld	r18, Z
    32ac:	3c 96       	adiw	r30, 0x0c	; 12
    32ae:	20 83       	st	Z, r18
    32b0:	3b 97       	sbiw	r30, 0x0b	; 11
    32b2:	40 81       	ld	r20, Z
    32b4:	3c 96       	adiw	r30, 0x0c	; 12
    32b6:	40 83       	st	Z, r20
    32b8:	32 97       	sbiw	r30, 0x02	; 2
    32ba:	30 81       	ld	r19, Z
    32bc:	33 23       	and	r19, r19
    32be:	81 f1       	breq	.+96     	; 0x3320 <u8g2_UpdateRefHeight+0x86>
    32c0:	31 30       	cpi	r19, 0x01	; 1
    32c2:	79 f4       	brne	.+30     	; 0x32e2 <u8g2_UpdateRefHeight+0x48>
    32c4:	39 97       	sbiw	r30, 0x09	; 9
    32c6:	30 81       	ld	r19, Z
    32c8:	23 17       	cp	r18, r19
    32ca:	14 f4       	brge	.+4      	; 0x32d0 <u8g2_UpdateRefHeight+0x36>
    32cc:	3a 96       	adiw	r30, 0x0a	; 10
    32ce:	30 83       	st	Z, r19
    32d0:	fc 01       	movw	r30, r24
    32d2:	e9 59       	subi	r30, 0x99	; 153
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	20 81       	ld	r18, Z
    32d8:	24 17       	cp	r18, r20
    32da:	14 f5       	brge	.+68     	; 0x3320 <u8g2_UpdateRefHeight+0x86>
    32dc:	3a 96       	adiw	r30, 0x0a	; 10
    32de:	20 83       	st	Z, r18
    32e0:	08 95       	ret
    32e2:	fc 01       	movw	r30, r24
    32e4:	ef 59       	subi	r30, 0x9F	; 159
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	e0 81       	ld	r30, Z
    32ea:	dc 01       	movw	r26, r24
    32ec:	ad 59       	subi	r26, 0x9D	; 157
    32ee:	bf 4f       	sbci	r27, 0xFF	; 255
    32f0:	5c 91       	ld	r21, X
    32f2:	02 2e       	mov	r0, r18
    32f4:	00 0c       	add	r0, r0
    32f6:	33 0b       	sbc	r19, r19
    32f8:	65 2f       	mov	r22, r21
    32fa:	05 2e       	mov	r0, r21
    32fc:	00 0c       	add	r0, r0
    32fe:	77 0b       	sbc	r23, r23
    3300:	6e 0f       	add	r22, r30
    3302:	71 1d       	adc	r23, r1
    3304:	e7 fd       	sbrc	r30, 7
    3306:	7a 95       	dec	r23
    3308:	26 17       	cp	r18, r22
    330a:	37 07       	cpc	r19, r23
    330c:	1c f4       	brge	.+6      	; 0x3314 <u8g2_UpdateRefHeight+0x7a>
    330e:	1d 96       	adiw	r26, 0x0d	; 13
    3310:	e5 0f       	add	r30, r21
    3312:	ec 93       	st	X, r30
    3314:	54 17       	cp	r21, r20
    3316:	24 f4       	brge	.+8      	; 0x3320 <u8g2_UpdateRefHeight+0x86>
    3318:	fc 01       	movw	r30, r24
    331a:	ef 58       	subi	r30, 0x8F	; 143
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	50 83       	st	Z, r21
    3320:	08 95       	ret

00003322 <u8g2_SetFontRefHeightExtendedText>:
    3322:	fc 01       	movw	r30, r24
    3324:	e1 59       	subi	r30, 0x91	; 145
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	21 e0       	ldi	r18, 0x01	; 1
    332a:	20 83       	st	Z, r18
    332c:	0e 94 4d 19 	call	0x329a	; 0x329a <u8g2_UpdateRefHeight>
    3330:	08 95       	ret

00003332 <u8g2_SetFontPosBaseline>:
    3332:	8a 5b       	subi	r24, 0xBA	; 186
    3334:	9f 4f       	sbci	r25, 0xFF	; 255
    3336:	25 ef       	ldi	r18, 0xF5	; 245
    3338:	35 e1       	ldi	r19, 0x15	; 21
    333a:	fc 01       	movw	r30, r24
    333c:	20 83       	st	Z, r18
    333e:	31 83       	std	Z+1, r19	; 0x01
    3340:	08 95       	ret

00003342 <u8g2_SetFont>:
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	fc 01       	movw	r30, r24
    3348:	ec 5b       	subi	r30, 0xBC	; 188
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	20 81       	ld	r18, Z
    334e:	31 81       	ldd	r19, Z+1	; 0x01
    3350:	26 17       	cp	r18, r22
    3352:	37 07       	cpc	r19, r23
    3354:	51 f0       	breq	.+20     	; 0x336a <u8g2_SetFont+0x28>
    3356:	ec 01       	movw	r28, r24
    3358:	60 83       	st	Z, r22
    335a:	71 83       	std	Z+1, r23	; 0x01
    335c:	89 5a       	subi	r24, 0xA9	; 169
    335e:	9f 4f       	sbci	r25, 0xFF	; 255
    3360:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <u8g2_read_font_info>
    3364:	ce 01       	movw	r24, r28
    3366:	0e 94 4d 19 	call	0x329a	; 0x329a <u8g2_UpdateRefHeight>
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	08 95       	ret

00003370 <u8g2_SetFontDirection>:


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
    3370:	8a 5a       	subi	r24, 0xAA	; 170
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	fc 01       	movw	r30, r24
    3376:	60 83       	st	Z, r22
    3378:	08 95       	ret

0000337a <u8g2_draw_hv_line_2dir>:
    return;
  if ( x >= u8g2->user_x1 )
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
}
    337a:	0f 93       	push	r16
    337c:	dc 01       	movw	r26, r24
    337e:	9a 96       	adiw	r26, 0x2a	; 42
    3380:	ed 91       	ld	r30, X+
    3382:	fc 91       	ld	r31, X
    3384:	9b 97       	sbiw	r26, 0x2b	; 43
    3386:	4e 1b       	sub	r20, r30
    3388:	5f 0b       	sbc	r21, r31
    338a:	5e 96       	adiw	r26, 0x1e	; 30
    338c:	ed 91       	ld	r30, X+
    338e:	fc 91       	ld	r31, X
    3390:	5f 97       	sbiw	r26, 0x1f	; 31
    3392:	19 95       	eicall
    3394:	0f 91       	pop	r16
    3396:	08 95       	ret

00003398 <u8g2_DrawHVLine>:
    3398:	ef 92       	push	r14
    339a:	ff 92       	push	r15
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	da 01       	movw	r26, r20
    33a6:	fc 01       	movw	r30, r24
    33a8:	e2 59       	subi	r30, 0x92	; 146
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	50 81       	ld	r21, Z
    33ae:	55 23       	and	r21, r21
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <u8g2_DrawHVLine+0x1c>
    33b2:	83 c0       	rjmp	.+262    	; 0x34ba <u8g2_DrawHVLine+0x122>
    33b4:	21 15       	cp	r18, r1
    33b6:	31 05       	cpc	r19, r1
    33b8:	09 f4       	brne	.+2      	; 0x33bc <u8g2_DrawHVLine+0x24>
    33ba:	7f c0       	rjmp	.+254    	; 0x34ba <u8g2_DrawHVLine+0x122>
    33bc:	22 30       	cpi	r18, 0x02	; 2
    33be:	31 05       	cpc	r19, r1
    33c0:	70 f0       	brcs	.+28     	; 0x33de <u8g2_DrawHVLine+0x46>
    33c2:	02 30       	cpi	r16, 0x02	; 2
    33c4:	29 f4       	brne	.+10     	; 0x33d0 <u8g2_DrawHVLine+0x38>
    33c6:	6f 5f       	subi	r22, 0xFF	; 255
    33c8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ca:	62 1b       	sub	r22, r18
    33cc:	73 0b       	sbc	r23, r19
    33ce:	0b c0       	rjmp	.+22     	; 0x33e6 <u8g2_DrawHVLine+0x4e>
    33d0:	03 30       	cpi	r16, 0x03	; 3
    33d2:	29 f4       	brne	.+10     	; 0x33de <u8g2_DrawHVLine+0x46>
    33d4:	11 96       	adiw	r26, 0x01	; 1
    33d6:	a2 1b       	sub	r26, r18
    33d8:	b3 0b       	sbc	r27, r19
    33da:	f1 e0       	ldi	r31, 0x01	; 1
    33dc:	37 c0       	rjmp	.+110    	; 0x344c <u8g2_DrawHVLine+0xb4>
    33de:	f0 2f       	mov	r31, r16
    33e0:	f1 70       	andi	r31, 0x01	; 1
    33e2:	00 fd       	sbrc	r16, 0
    33e4:	33 c0       	rjmp	.+102    	; 0x344c <u8g2_DrawHVLine+0xb4>
    33e6:	ec 01       	movw	r28, r24
    33e8:	48 ad       	ldd	r20, Y+56	; 0x38
    33ea:	59 ad       	ldd	r21, Y+57	; 0x39
    33ec:	a4 17       	cp	r26, r20
    33ee:	b5 07       	cpc	r27, r21
    33f0:	08 f4       	brcc	.+2      	; 0x33f4 <u8g2_DrawHVLine+0x5c>
    33f2:	63 c0       	rjmp	.+198    	; 0x34ba <u8g2_DrawHVLine+0x122>
    33f4:	4a ad       	ldd	r20, Y+58	; 0x3a
    33f6:	5b ad       	ldd	r21, Y+59	; 0x3b
    33f8:	a4 17       	cp	r26, r20
    33fa:	b5 07       	cpc	r27, r21
    33fc:	08 f0       	brcs	.+2      	; 0x3400 <u8g2_DrawHVLine+0x68>
    33fe:	5d c0       	rjmp	.+186    	; 0x34ba <u8g2_DrawHVLine+0x122>
    3400:	4e a9       	ldd	r20, Y+54	; 0x36
    3402:	5f a9       	ldd	r21, Y+55	; 0x37
    3404:	ec a9       	ldd	r30, Y+52	; 0x34
    3406:	fd a9       	ldd	r31, Y+53	; 0x35
    3408:	26 0f       	add	r18, r22
    340a:	37 1f       	adc	r19, r23
    340c:	26 17       	cp	r18, r22
    340e:	37 07       	cpc	r19, r23
    3410:	40 f4       	brcc	.+16     	; 0x3422 <u8g2_DrawHVLine+0x8a>
    3412:	64 17       	cp	r22, r20
    3414:	75 07       	cpc	r23, r21
    3416:	20 f4       	brcc	.+8      	; 0x3420 <u8g2_DrawHVLine+0x88>
    3418:	9a 01       	movw	r18, r20
    341a:	21 50       	subi	r18, 0x01	; 1
    341c:	31 09       	sbc	r19, r1
    341e:	05 c0       	rjmp	.+10     	; 0x342a <u8g2_DrawHVLine+0x92>
    3420:	bf 01       	movw	r22, r30
    3422:	64 17       	cp	r22, r20
    3424:	75 07       	cpc	r23, r21
    3426:	08 f0       	brcs	.+2      	; 0x342a <u8g2_DrawHVLine+0x92>
    3428:	48 c0       	rjmp	.+144    	; 0x34ba <u8g2_DrawHVLine+0x122>
    342a:	e2 17       	cp	r30, r18
    342c:	f3 07       	cpc	r31, r19
    342e:	08 f0       	brcs	.+2      	; 0x3432 <u8g2_DrawHVLine+0x9a>
    3430:	44 c0       	rjmp	.+136    	; 0x34ba <u8g2_DrawHVLine+0x122>
    3432:	6e 17       	cp	r22, r30
    3434:	7f 07       	cpc	r23, r31
    3436:	08 f4       	brcc	.+2      	; 0x343a <u8g2_DrawHVLine+0xa2>
    3438:	bf 01       	movw	r22, r30
    343a:	24 17       	cp	r18, r20
    343c:	35 07       	cpc	r19, r21
    343e:	08 f4       	brcc	.+2      	; 0x3442 <u8g2_DrawHVLine+0xaa>
    3440:	a9 01       	movw	r20, r18
    3442:	9a 01       	movw	r18, r20
    3444:	26 1b       	sub	r18, r22
    3446:	37 0b       	sbc	r19, r23
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	2d c0       	rjmp	.+90     	; 0x34a6 <u8g2_DrawHVLine+0x10e>
    344c:	ec 01       	movw	r28, r24
    344e:	4c a9       	ldd	r20, Y+52	; 0x34
    3450:	5d a9       	ldd	r21, Y+53	; 0x35
    3452:	64 17       	cp	r22, r20
    3454:	75 07       	cpc	r23, r21
    3456:	88 f1       	brcs	.+98     	; 0x34ba <u8g2_DrawHVLine+0x122>
    3458:	4e a9       	ldd	r20, Y+54	; 0x36
    345a:	5f a9       	ldd	r21, Y+55	; 0x37
    345c:	64 17       	cp	r22, r20
    345e:	75 07       	cpc	r23, r21
    3460:	60 f5       	brcc	.+88     	; 0x34ba <u8g2_DrawHVLine+0x122>
    3462:	4a ad       	ldd	r20, Y+58	; 0x3a
    3464:	5b ad       	ldd	r21, Y+59	; 0x3b
    3466:	08 ad       	ldd	r16, Y+56	; 0x38
    3468:	19 ad       	ldd	r17, Y+57	; 0x39
    346a:	2a 0f       	add	r18, r26
    346c:	3b 1f       	adc	r19, r27
    346e:	2a 17       	cp	r18, r26
    3470:	3b 07       	cpc	r19, r27
    3472:	40 f4       	brcc	.+16     	; 0x3484 <u8g2_DrawHVLine+0xec>
    3474:	a4 17       	cp	r26, r20
    3476:	b5 07       	cpc	r27, r21
    3478:	20 f4       	brcc	.+8      	; 0x3482 <u8g2_DrawHVLine+0xea>
    347a:	9a 01       	movw	r18, r20
    347c:	21 50       	subi	r18, 0x01	; 1
    347e:	31 09       	sbc	r19, r1
    3480:	04 c0       	rjmp	.+8      	; 0x348a <u8g2_DrawHVLine+0xf2>
    3482:	d8 01       	movw	r26, r16
    3484:	a4 17       	cp	r26, r20
    3486:	b5 07       	cpc	r27, r21
    3488:	c0 f4       	brcc	.+48     	; 0x34ba <u8g2_DrawHVLine+0x122>
    348a:	02 17       	cp	r16, r18
    348c:	13 07       	cpc	r17, r19
    348e:	a8 f4       	brcc	.+42     	; 0x34ba <u8g2_DrawHVLine+0x122>
    3490:	a0 17       	cp	r26, r16
    3492:	b1 07       	cpc	r27, r17
    3494:	08 f4       	brcc	.+2      	; 0x3498 <u8g2_DrawHVLine+0x100>
    3496:	d8 01       	movw	r26, r16
    3498:	24 17       	cp	r18, r20
    349a:	35 07       	cpc	r19, r21
    349c:	08 f4       	brcc	.+2      	; 0x34a0 <u8g2_DrawHVLine+0x108>
    349e:	a9 01       	movw	r20, r18
    34a0:	9a 01       	movw	r18, r20
    34a2:	2a 1b       	sub	r18, r26
    34a4:	3b 0b       	sbc	r19, r27
    34a6:	ec 01       	movw	r28, r24
    34a8:	48 a1       	ldd	r20, Y+32	; 0x20
    34aa:	59 a1       	ldd	r21, Y+33	; 0x21
    34ac:	ea 01       	movw	r28, r20
    34ae:	ec 80       	ldd	r14, Y+4	; 0x04
    34b0:	fd 80       	ldd	r15, Y+5	; 0x05
    34b2:	0f 2f       	mov	r16, r31
    34b4:	ad 01       	movw	r20, r26
    34b6:	f7 01       	movw	r30, r14
    34b8:	19 95       	eicall
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	0f 91       	pop	r16
    34c2:	ff 90       	pop	r15
    34c4:	ef 90       	pop	r14
    34c6:	08 95       	ret

000034c8 <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    34c8:	63 30       	cpi	r22, 0x03	; 3
    34ca:	28 f4       	brcc	.+10     	; 0x34d6 <u8g2_SetDrawColor+0xe>
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    34cc:	fc 01       	movw	r30, r24
    34ce:	ec 58       	subi	r30, 0x8C	; 140
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	60 83       	st	Z, r22
    34d4:	08 95       	ret
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    34d6:	fc 01       	movw	r30, r24
    34d8:	ec 58       	subi	r30, 0x8C	; 140
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	21 e0       	ldi	r18, 0x01	; 1
    34de:	20 83       	st	Z, r18
    34e0:	08 95       	ret

000034e2 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    34e2:	46 17       	cp	r20, r22
    34e4:	57 07       	cpc	r21, r23
    34e6:	48 f4       	brcc	.+18     	; 0x34fa <u8g2_is_intersection_decision_tree+0x18>
  {
    if ( v1 > a0 )	// v1 >= a0
    34e8:	82 17       	cp	r24, r18
    34ea:	93 07       	cpc	r25, r19
    34ec:	78 f0       	brcs	.+30     	; 0x350c <u8g2_is_intersection_decision_tree+0x2a>
    {
      return 1;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	24 17       	cp	r18, r20
    34f2:	35 07       	cpc	r19, r21
    34f4:	70 f0       	brcs	.+28     	; 0x3512 <u8g2_is_intersection_decision_tree+0x30>
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    34fa:	82 17       	cp	r24, r18
    34fc:	93 07       	cpc	r25, r19
    34fe:	40 f4       	brcc	.+16     	; 0x3510 <u8g2_is_intersection_decision_tree+0x2e>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	24 17       	cp	r18, r20
    3504:	35 07       	cpc	r19, r21
    3506:	28 f0       	brcs	.+10     	; 0x3512 <u8g2_is_intersection_decision_tree+0x30>
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	08 95       	ret
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    3510:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    3512:	08 95       	ret

00003514 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    3514:	cf 92       	push	r12
    3516:	df 92       	push	r13
    3518:	ef 92       	push	r14
    351a:	ff 92       	push	r15
    351c:	0f 93       	push	r16
    351e:	1f 93       	push	r17
    3520:	cf 93       	push	r28
    3522:	df 93       	push	r29
    3524:	ec 01       	movw	r28, r24
    3526:	7b 01       	movw	r14, r22
    3528:	69 01       	movw	r12, r18
    352a:	98 01       	movw	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    352c:	6a ad       	ldd	r22, Y+58	; 0x3a
    352e:	7b ad       	ldd	r23, Y+59	; 0x3b
    3530:	88 ad       	ldd	r24, Y+56	; 0x38
    3532:	99 ad       	ldd	r25, Y+57	; 0x39
    3534:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <u8g2_is_intersection_decision_tree>
    3538:	88 23       	and	r24, r24
    353a:	41 f0       	breq	.+16     	; 0x354c <u8g2_IsIntersection+0x38>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    353c:	6e a9       	ldd	r22, Y+54	; 0x36
    353e:	7f a9       	ldd	r23, Y+55	; 0x37
    3540:	96 01       	movw	r18, r12
    3542:	a7 01       	movw	r20, r14
    3544:	8c a9       	ldd	r24, Y+52	; 0x34
    3546:	9d a9       	ldd	r25, Y+53	; 0x35
    3548:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <u8g2_is_intersection_decision_tree>
}
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	ff 90       	pop	r15
    3556:	ef 90       	pop	r14
    3558:	df 90       	pop	r13
    355a:	cf 90       	pop	r12
    355c:	08 95       	ret

0000355e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    355e:	cf 92       	push	r12
    3560:	df 92       	push	r13
    3562:	ff 92       	push	r15
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
    3568:	cf 93       	push	r28
    356a:	df 93       	push	r29
    356c:	6c 01       	movw	r12, r24
    356e:	d9 01       	movw	r26, r18
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    3570:	34 2f       	mov	r19, r20
    3572:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	03 2e       	mov	r0, r19
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <u8g2_ll_hvline_vertical_top_lsb+0x22>
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	0a 94       	dec	r0
    3582:	e2 f7       	brpl	.-8      	; 0x357c <u8g2_ll_hvline_vertical_top_lsb+0x1e>
    3584:	18 2f       	mov	r17, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    3586:	f6 01       	movw	r30, r12
    3588:	ec 58       	subi	r30, 0x8C	; 140
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	20 81       	ld	r18, Z
    358e:	22 30       	cpi	r18, 0x02	; 2
    3590:	20 f4       	brcc	.+8      	; 0x359a <u8g2_ll_hvline_vertical_top_lsb+0x3c>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    3592:	21 30       	cpi	r18, 0x01	; 1
    3594:	21 f0       	breq	.+8      	; 0x359e <u8g2_ll_hvline_vertical_top_lsb+0x40>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    3596:	28 2f       	mov	r18, r24
    3598:	04 c0       	rjmp	.+8      	; 0x35a2 <u8g2_ll_hvline_vertical_top_lsb+0x44>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <u8g2_ll_hvline_vertical_top_lsb+0x44>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    359e:	28 2f       	mov	r18, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    35a0:	10 e0       	ldi	r17, 0x00	; 0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    35a2:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    35a4:	e6 01       	movw	r28, r12
    35a6:	8a a1       	ldd	r24, Y+34	; 0x22
    35a8:	9b a1       	ldd	r25, Y+35	; 0x23
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    35aa:	e8 81       	ld	r30, Y
    35ac:	f9 81       	ldd	r31, Y+1	; 0x01
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    35ae:	f0 88       	ldd	r15, Z+16	; 0x10
    35b0:	f4 9e       	mul	r15, r20
    35b2:	f0 01       	movw	r30, r0
    35b4:	f5 9e       	mul	r15, r21
    35b6:	f0 0d       	add	r31, r0
    35b8:	11 24       	eor	r1, r1
    35ba:	6e 0f       	add	r22, r30
    35bc:	7f 1f       	adc	r23, r31
    35be:	fc 01       	movw	r30, r24
    35c0:	e6 0f       	add	r30, r22
    35c2:	f7 1f       	adc	r31, r23
  
  if ( dir == 0 )
    35c4:	01 11       	cpse	r16, r1
    35c6:	0a c0       	rjmp	.+20     	; 0x35dc <u8g2_ll_hvline_vertical_top_lsb+0x7e>
    35c8:	ae 0f       	add	r26, r30
    35ca:	bf 1f       	adc	r27, r31
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    35cc:	80 81       	ld	r24, Z
    35ce:	82 2b       	or	r24, r18
    35d0:	81 27       	eor	r24, r17
    35d2:	81 93       	st	Z+, r24
	ptr++;
	len--;
      } while( len != 0 );
    35d4:	ea 17       	cp	r30, r26
    35d6:	fb 07       	cpc	r31, r27
    35d8:	c9 f7       	brne	.-14     	; 0x35cc <u8g2_ll_hvline_vertical_top_lsb+0x6e>
    35da:	22 c0       	rjmp	.+68     	; 0x3620 <u8g2_ll_hvline_vertical_top_lsb+0xc2>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    35dc:	a6 01       	movw	r20, r12
    35de:	4c 58       	subi	r20, 0x8C	; 140
    35e0:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    35e2:	90 81       	ld	r25, Z
    35e4:	92 2b       	or	r25, r18
    35e6:	91 27       	eor	r25, r17
    35e8:	90 83       	st	Z, r25
      
      bit_pos++;
    35ea:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    35ec:	37 70       	andi	r19, 0x07	; 7

      len--;
    35ee:	11 97       	sbiw	r26, 0x01	; 1

      if ( bit_pos == 0 )
    35f0:	31 11       	cpse	r19, r1
    35f2:	0e c0       	rjmp	.+28     	; 0x3610 <u8g2_ll_hvline_vertical_top_lsb+0xb2>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    35f4:	e6 01       	movw	r28, r12
    35f6:	8e a1       	ldd	r24, Y+38	; 0x26
    35f8:	9f a1       	ldd	r25, Y+39	; 0x27
    35fa:	e8 0f       	add	r30, r24
    35fc:	f9 1f       	adc	r31, r25
		
	if ( u8g2->draw_color <= 1 )
    35fe:	ea 01       	movw	r28, r20
    3600:	98 81       	ld	r25, Y
    3602:	92 30       	cpi	r25, 0x02	; 2
    3604:	40 f4       	brcc	.+16     	; 0x3616 <u8g2_ll_hvline_vertical_top_lsb+0xb8>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    3606:	91 30       	cpi	r25, 0x01	; 1
    3608:	41 f0       	breq	.+16     	; 0x361a <u8g2_ll_hvline_vertical_top_lsb+0xbc>
	  xor_mask = 1;
    360a:	11 e0       	ldi	r17, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    360c:	21 e0       	ldi	r18, 0x01	; 1
    360e:	06 c0       	rjmp	.+12     	; 0x361c <u8g2_ll_hvline_vertical_top_lsb+0xbe>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    3610:	22 0f       	add	r18, r18
	xor_mask <<= 1;
    3612:	11 0f       	add	r17, r17
    3614:	03 c0       	rjmp	.+6      	; 0x361c <u8g2_ll_hvline_vertical_top_lsb+0xbe>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    3616:	11 e0       	ldi	r17, 0x01	; 1
    3618:	01 c0       	rjmp	.+2      	; 0x361c <u8g2_ll_hvline_vertical_top_lsb+0xbe>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    361a:	21 e0       	ldi	r18, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    361c:	10 97       	sbiw	r26, 0x00	; 0
    361e:	09 f7       	brne	.-62     	; 0x35e2 <u8g2_ll_hvline_vertical_top_lsb+0x84>
  }
}
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	ff 90       	pop	r15
    362a:	df 90       	pop	r13
    362c:	cf 90       	pop	r12
    362e:	08 95       	ret

00003630 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	fc 01       	movw	r30, r24
    3636:	a0 81       	ld	r26, Z
    3638:	b1 81       	ldd	r27, Z+1	; 0x01
    363a:	84 a1       	ldd	r24, Z+36	; 0x24
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	9c 01       	movw	r18, r24
    3640:	22 0f       	add	r18, r18
    3642:	33 1f       	adc	r19, r19
    3644:	22 0f       	add	r18, r18
    3646:	33 1f       	adc	r19, r19
    3648:	22 0f       	add	r18, r18
    364a:	33 1f       	adc	r19, r19
    364c:	20 a7       	std	Z+40, r18	; 0x28
    364e:	31 a7       	std	Z+41, r19	; 0x29
    3650:	50 96       	adiw	r26, 0x10	; 16
    3652:	2c 91       	ld	r18, X
    3654:	50 97       	sbiw	r26, 0x10	; 16
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	22 0f       	add	r18, r18
    365a:	33 1f       	adc	r19, r19
    365c:	22 0f       	add	r18, r18
    365e:	33 1f       	adc	r19, r19
    3660:	22 0f       	add	r18, r18
    3662:	33 1f       	adc	r19, r19
    3664:	26 a3       	std	Z+38, r18	; 0x26
    3666:	37 a3       	std	Z+39, r19	; 0x27
    3668:	75 a1       	ldd	r23, Z+37	; 0x25
    366a:	47 2f       	mov	r20, r23
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	9a 01       	movw	r18, r20
    3670:	22 0f       	add	r18, r18
    3672:	33 1f       	adc	r19, r19
    3674:	22 0f       	add	r18, r18
    3676:	33 1f       	adc	r19, r19
    3678:	22 0f       	add	r18, r18
    367a:	33 1f       	adc	r19, r19
    367c:	22 a7       	std	Z+42, r18	; 0x2a
    367e:	33 a7       	std	Z+43, r19	; 0x2b
    3680:	51 96       	adiw	r26, 0x11	; 17
    3682:	6c 91       	ld	r22, X
    3684:	51 97       	sbiw	r26, 0x11	; 17
    3686:	48 0f       	add	r20, r24
    3688:	59 1f       	adc	r21, r25
    368a:	c6 2f       	mov	r28, r22
    368c:	d0 e0       	ldi	r29, 0x00	; 0
    368e:	c4 17       	cp	r28, r20
    3690:	d5 07       	cpc	r29, r21
    3692:	18 f4       	brcc	.+6      	; 0x369a <u8g2_update_dimension_common+0x6a>
    3694:	ce 01       	movw	r24, r28
    3696:	87 1b       	sub	r24, r23
    3698:	91 09       	sbc	r25, r1
    369a:	24 a7       	std	Z+44, r18	; 0x2c
    369c:	35 a7       	std	Z+45, r19	; 0x2d
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	88 0f       	add	r24, r24
    36a8:	99 1f       	adc	r25, r25
    36aa:	82 0f       	add	r24, r18
    36ac:	93 1f       	adc	r25, r19
    36ae:	86 a7       	std	Z+46, r24	; 0x2e
    36b0:	97 a7       	std	Z+47, r25	; 0x2f
    36b2:	54 96       	adiw	r26, 0x14	; 20
    36b4:	8d 91       	ld	r24, X+
    36b6:	9c 91       	ld	r25, X
    36b8:	55 97       	sbiw	r26, 0x15	; 21
    36ba:	80 ab       	std	Z+48, r24	; 0x30
    36bc:	91 ab       	std	Z+49, r25	; 0x31
    36be:	56 96       	adiw	r26, 0x16	; 22
    36c0:	8d 91       	ld	r24, X+
    36c2:	9c 91       	ld	r25, X
    36c4:	57 97       	sbiw	r26, 0x17	; 23
    36c6:	82 ab       	std	Z+50, r24	; 0x32
    36c8:	93 ab       	std	Z+51, r25	; 0x33
    36ca:	df 91       	pop	r29
    36cc:	cf 91       	pop	r28
    36ce:	08 95       	ret

000036d0 <u8g2_update_dimension_r0>:
    36d0:	0e 94 18 1b 	call	0x3630	; 0x3630 <u8g2_update_dimension_common>
    36d4:	08 95       	ret

000036d6 <u8g2_apply_clip_window>:
    36d6:	0f 93       	push	r16
    36d8:	1f 93       	push	r17
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	ec 01       	movw	r28, r24
    36e0:	fc 01       	movw	r30, r24
    36e2:	ee 5b       	subi	r30, 0xBE	; 190
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	00 81       	ld	r16, Z
    36e8:	11 81       	ldd	r17, Z+1	; 0x01
    36ea:	2e ad       	ldd	r18, Y+62	; 0x3e
    36ec:	3f ad       	ldd	r19, Y+63	; 0x3f
    36ee:	32 97       	sbiw	r30, 0x02	; 2
    36f0:	40 81       	ld	r20, Z
    36f2:	51 81       	ldd	r21, Z+1	; 0x01
    36f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    36f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    36f8:	0e 94 8a 1a 	call	0x3514	; 0x3514 <u8g2_IsIntersection>
    36fc:	81 11       	cpse	r24, r1
    36fe:	04 c0       	rjmp	.+8      	; 0x3708 <u8g2_apply_clip_window+0x32>
    3700:	c2 59       	subi	r28, 0x92	; 146
    3702:	df 4f       	sbci	r29, 0xFF	; 255
    3704:	18 82       	st	Y, r1
    3706:	2f c0       	rjmp	.+94     	; 0x3766 <u8g2_apply_clip_window+0x90>
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	fe 01       	movw	r30, r28
    370c:	e2 59       	subi	r30, 0x92	; 146
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	80 83       	st	Z, r24
    3712:	8c ad       	ldd	r24, Y+60	; 0x3c
    3714:	9d ad       	ldd	r25, Y+61	; 0x3d
    3716:	2c a9       	ldd	r18, Y+52	; 0x34
    3718:	3d a9       	ldd	r19, Y+53	; 0x35
    371a:	28 17       	cp	r18, r24
    371c:	39 07       	cpc	r19, r25
    371e:	10 f4       	brcc	.+4      	; 0x3724 <u8g2_apply_clip_window+0x4e>
    3720:	8c ab       	std	Y+52, r24	; 0x34
    3722:	9d ab       	std	Y+53, r25	; 0x35
    3724:	8e ad       	ldd	r24, Y+62	; 0x3e
    3726:	9f ad       	ldd	r25, Y+63	; 0x3f
    3728:	2e a9       	ldd	r18, Y+54	; 0x36
    372a:	3f a9       	ldd	r19, Y+55	; 0x37
    372c:	82 17       	cp	r24, r18
    372e:	93 07       	cpc	r25, r19
    3730:	10 f4       	brcc	.+4      	; 0x3736 <u8g2_apply_clip_window+0x60>
    3732:	8e ab       	std	Y+54, r24	; 0x36
    3734:	9f ab       	std	Y+55, r25	; 0x37
    3736:	fe 01       	movw	r30, r28
    3738:	e0 5c       	subi	r30, 0xC0	; 192
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	80 81       	ld	r24, Z
    373e:	91 81       	ldd	r25, Z+1	; 0x01
    3740:	28 ad       	ldd	r18, Y+56	; 0x38
    3742:	39 ad       	ldd	r19, Y+57	; 0x39
    3744:	28 17       	cp	r18, r24
    3746:	39 07       	cpc	r19, r25
    3748:	10 f4       	brcc	.+4      	; 0x374e <u8g2_apply_clip_window+0x78>
    374a:	88 af       	std	Y+56, r24	; 0x38
    374c:	99 af       	std	Y+57, r25	; 0x39
    374e:	fe 01       	movw	r30, r28
    3750:	ee 5b       	subi	r30, 0xBE	; 190
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	2a ad       	ldd	r18, Y+58	; 0x3a
    375a:	3b ad       	ldd	r19, Y+59	; 0x3b
    375c:	82 17       	cp	r24, r18
    375e:	93 07       	cpc	r25, r19
    3760:	10 f4       	brcc	.+4      	; 0x3766 <u8g2_apply_clip_window+0x90>
    3762:	8a af       	std	Y+58, r24	; 0x3a
    3764:	9b af       	std	Y+59, r25	; 0x3b
    3766:	df 91       	pop	r29
    3768:	cf 91       	pop	r28
    376a:	1f 91       	pop	r17
    376c:	0f 91       	pop	r16
    376e:	08 95       	ret

00003770 <u8g2_update_page_win_r0>:
    3770:	fc 01       	movw	r30, r24
    3772:	14 aa       	std	Z+52, r1	; 0x34
    3774:	15 aa       	std	Z+53, r1	; 0x35
    3776:	80 a9       	ldd	r24, Z+48	; 0x30
    3778:	91 a9       	ldd	r25, Z+49	; 0x31
    377a:	86 ab       	std	Z+54, r24	; 0x36
    377c:	97 ab       	std	Z+55, r25	; 0x37
    377e:	84 a5       	ldd	r24, Z+44	; 0x2c
    3780:	95 a5       	ldd	r25, Z+45	; 0x2d
    3782:	80 af       	std	Z+56, r24	; 0x38
    3784:	91 af       	std	Z+57, r25	; 0x39
    3786:	86 a5       	ldd	r24, Z+46	; 0x2e
    3788:	97 a5       	ldd	r25, Z+47	; 0x2f
    378a:	82 af       	std	Z+58, r24	; 0x3a
    378c:	93 af       	std	Z+59, r25	; 0x3b
    378e:	cf 01       	movw	r24, r30
    3790:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <u8g2_apply_clip_window>
    3794:	08 95       	ret

00003796 <u8g2_draw_l90_r0>:
    3796:	0f 93       	push	r16
    3798:	0e 94 bd 19 	call	0x337a	; 0x337a <u8g2_draw_hv_line_2dir>
    379c:	0f 91       	pop	r16
    379e:	08 95       	ret

000037a0 <u8g2_SetMaxClipWindow>:
    37a0:	dc 01       	movw	r26, r24
    37a2:	dc 96       	adiw	r26, 0x3c	; 60
    37a4:	1d 92       	st	X+, r1
    37a6:	1c 92       	st	X, r1
    37a8:	dd 97       	sbiw	r26, 0x3d	; 61
    37aa:	fc 01       	movw	r30, r24
    37ac:	e0 5c       	subi	r30, 0xC0	; 192
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	10 82       	st	Z, r1
    37b2:	11 82       	std	Z+1, r1	; 0x01
    37b4:	2f ef       	ldi	r18, 0xFF	; 255
    37b6:	3f ef       	ldi	r19, 0xFF	; 255
    37b8:	fc 01       	movw	r30, r24
    37ba:	26 af       	std	Z+62, r18	; 0x3e
    37bc:	37 af       	std	Z+63, r19	; 0x3f
    37be:	ee 5b       	subi	r30, 0xBE	; 190
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	20 83       	st	Z, r18
    37c4:	31 83       	std	Z+1, r19	; 0x01
    37c6:	90 96       	adiw	r26, 0x20	; 32
    37c8:	ed 91       	ld	r30, X+
    37ca:	fc 91       	ld	r31, X
    37cc:	91 97       	sbiw	r26, 0x21	; 33
    37ce:	02 80       	ldd	r0, Z+2	; 0x02
    37d0:	f3 81       	ldd	r31, Z+3	; 0x03
    37d2:	e0 2d       	mov	r30, r0
    37d4:	19 95       	eicall
    37d6:	08 95       	ret

000037d8 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    37e2:	fc 01       	movw	r30, r24
    37e4:	ec 5b       	subi	r30, 0xBC	; 188
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	10 82       	st	Z, r1
    37ea:	11 82       	std	Z+1, r1	; 0x01
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    37ec:	2e 8f       	std	Y+30, r18	; 0x1e
    37ee:	3f 8f       	std	Y+31, r19	; 0x1f
  
  u8g2->tile_buf_ptr = buf;
    37f0:	6a a3       	std	Y+34, r22	; 0x22
    37f2:	7b a3       	std	Y+35, r23	; 0x23
  u8g2->tile_buf_height = tile_buf_height;
    37f4:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    37f6:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    37f8:	3f 96       	adiw	r30, 0x0f	; 15
    37fa:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    37fc:	b0 96       	adiw	r30, 0x20	; 32
    37fe:	10 82       	st	Z, r1
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    3800:	34 97       	sbiw	r30, 0x04	; 4
    3802:	10 82       	st	Z, r1
  u8g2->draw_color = 1;
    3804:	35 96       	adiw	r30, 0x05	; 5
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    380a:	31 96       	adiw	r30, 0x01	; 1
    380c:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    380e:	08 a3       	std	Y+32, r16	; 0x20
    3810:	19 a3       	std	Y+33, r17	; 0x21
  u8g2->cb->update_dimension(u8g2);
    3812:	d8 01       	movw	r26, r16
    3814:	ed 91       	ld	r30, X+
    3816:	fc 91       	ld	r31, X
    3818:	ce 01       	movw	r24, r28
    381a:	19 95       	eicall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    381c:	ce 01       	movw	r24, r28
    381e:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    3822:	ce 01       	movw	r24, r28
    3824:	0e 94 99 19 	call	0x3332	; 0x3332 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    3828:	ca 5a       	subi	r28, 0xAA	; 170
    382a:	df 4f       	sbci	r29, 0xFF	; 255
    382c:	18 82       	st	Y, r1
#endif
}
    382e:	df 91       	pop	r29
    3830:	cf 91       	pop	r28
    3832:	1f 91       	pop	r17
    3834:	0f 91       	pop	r16
    3836:	08 95       	ret

00003838 <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    3838:	66 23       	and	r22, r22
    383a:	29 f0       	breq	.+10     	; 0x3846 <u8x8_ascii_next+0xe>
    383c:	6a 30       	cpi	r22, 0x0A	; 10
    383e:	31 f0       	breq	.+12     	; 0x384c <u8x8_ascii_next+0x14>
    3840:	86 2f       	mov	r24, r22
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	08 95       	ret
    3846:	8f ef       	ldi	r24, 0xFF	; 255
    3848:	9f ef       	ldi	r25, 0xFF	; 255
    384a:	08 95       	ret
    384c:	8f ef       	ldi	r24, 0xFF	; 255
    384e:	9f ef       	ldi	r25, 0xFF	; 255
    3850:	08 95       	ret

00003852 <u8x8_utf8_next>:
    3852:	66 23       	and	r22, r22
    3854:	09 f4       	brne	.+2      	; 0x3858 <u8x8_utf8_next+0x6>
    3856:	4b c0       	rjmp	.+150    	; 0x38ee <u8x8_utf8_next+0x9c>
    3858:	6a 30       	cpi	r22, 0x0A	; 10
    385a:	09 f4       	brne	.+2      	; 0x385e <u8x8_utf8_next+0xc>
    385c:	4b c0       	rjmp	.+150    	; 0x38f4 <u8x8_utf8_next+0xa2>
    385e:	fc 01       	movw	r30, r24
    3860:	20 8d       	ldd	r18, Z+24	; 0x18
    3862:	21 11       	cpse	r18, r1
    3864:	2b c0       	rjmp	.+86     	; 0x38bc <u8x8_utf8_next+0x6a>
    3866:	6c 3f       	cpi	r22, 0xFC	; 252
    3868:	20 f0       	brcs	.+8      	; 0x3872 <u8x8_utf8_next+0x20>
    386a:	25 e0       	ldi	r18, 0x05	; 5
    386c:	20 8f       	std	Z+24, r18	; 0x18
    386e:	61 70       	andi	r22, 0x01	; 1
    3870:	1e c0       	rjmp	.+60     	; 0x38ae <u8x8_utf8_next+0x5c>
    3872:	68 3f       	cpi	r22, 0xF8	; 248
    3874:	28 f0       	brcs	.+10     	; 0x3880 <u8x8_utf8_next+0x2e>
    3876:	24 e0       	ldi	r18, 0x04	; 4
    3878:	fc 01       	movw	r30, r24
    387a:	20 8f       	std	Z+24, r18	; 0x18
    387c:	63 70       	andi	r22, 0x03	; 3
    387e:	17 c0       	rjmp	.+46     	; 0x38ae <u8x8_utf8_next+0x5c>
    3880:	60 3f       	cpi	r22, 0xF0	; 240
    3882:	28 f0       	brcs	.+10     	; 0x388e <u8x8_utf8_next+0x3c>
    3884:	23 e0       	ldi	r18, 0x03	; 3
    3886:	fc 01       	movw	r30, r24
    3888:	20 8f       	std	Z+24, r18	; 0x18
    388a:	67 70       	andi	r22, 0x07	; 7
    388c:	10 c0       	rjmp	.+32     	; 0x38ae <u8x8_utf8_next+0x5c>
    388e:	60 3e       	cpi	r22, 0xE0	; 224
    3890:	28 f0       	brcs	.+10     	; 0x389c <u8x8_utf8_next+0x4a>
    3892:	22 e0       	ldi	r18, 0x02	; 2
    3894:	fc 01       	movw	r30, r24
    3896:	20 8f       	std	Z+24, r18	; 0x18
    3898:	6f 70       	andi	r22, 0x0F	; 15
    389a:	09 c0       	rjmp	.+18     	; 0x38ae <u8x8_utf8_next+0x5c>
    389c:	60 3c       	cpi	r22, 0xC0	; 192
    389e:	28 f0       	brcs	.+10     	; 0x38aa <u8x8_utf8_next+0x58>
    38a0:	21 e0       	ldi	r18, 0x01	; 1
    38a2:	fc 01       	movw	r30, r24
    38a4:	20 8f       	std	Z+24, r18	; 0x18
    38a6:	6f 71       	andi	r22, 0x1F	; 31
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <u8x8_utf8_next+0x5c>
    38aa:	70 e0       	ldi	r23, 0x00	; 0
    38ac:	28 c0       	rjmp	.+80     	; 0x38fe <u8x8_utf8_next+0xac>
    38ae:	70 e0       	ldi	r23, 0x00	; 0
    38b0:	fc 01       	movw	r30, r24
    38b2:	62 8b       	std	Z+18, r22	; 0x12
    38b4:	73 8b       	std	Z+19, r23	; 0x13
    38b6:	6e ef       	ldi	r22, 0xFE	; 254
    38b8:	7f ef       	ldi	r23, 0xFF	; 255
    38ba:	21 c0       	rjmp	.+66     	; 0x38fe <u8x8_utf8_next+0xac>
    38bc:	4f ef       	ldi	r20, 0xFF	; 255
    38be:	42 0f       	add	r20, r18
    38c0:	fc 01       	movw	r30, r24
    38c2:	40 8f       	std	Z+24, r20	; 0x18
    38c4:	22 89       	ldd	r18, Z+18	; 0x12
    38c6:	33 89       	ldd	r19, Z+19	; 0x13
    38c8:	00 24       	eor	r0, r0
    38ca:	36 95       	lsr	r19
    38cc:	27 95       	ror	r18
    38ce:	07 94       	ror	r0
    38d0:	36 95       	lsr	r19
    38d2:	27 95       	ror	r18
    38d4:	07 94       	ror	r0
    38d6:	32 2f       	mov	r19, r18
    38d8:	20 2d       	mov	r18, r0
    38da:	6f 73       	andi	r22, 0x3F	; 63
    38dc:	f9 01       	movw	r30, r18
    38de:	e6 2b       	or	r30, r22
    38e0:	bf 01       	movw	r22, r30
    38e2:	fc 01       	movw	r30, r24
    38e4:	62 8b       	std	Z+18, r22	; 0x12
    38e6:	73 8b       	std	Z+19, r23	; 0x13
    38e8:	41 11       	cpse	r20, r1
    38ea:	07 c0       	rjmp	.+14     	; 0x38fa <u8x8_utf8_next+0xa8>
    38ec:	08 c0       	rjmp	.+16     	; 0x38fe <u8x8_utf8_next+0xac>
    38ee:	6f ef       	ldi	r22, 0xFF	; 255
    38f0:	7f ef       	ldi	r23, 0xFF	; 255
    38f2:	05 c0       	rjmp	.+10     	; 0x38fe <u8x8_utf8_next+0xac>
    38f4:	6f ef       	ldi	r22, 0xFF	; 255
    38f6:	7f ef       	ldi	r23, 0xFF	; 255
    38f8:	02 c0       	rjmp	.+4      	; 0x38fe <u8x8_utf8_next+0xac>
    38fa:	6e ef       	ldi	r22, 0xFE	; 254
    38fc:	7f ef       	ldi	r23, 0xFF	; 255
    38fe:	cb 01       	movw	r24, r22
    3900:	08 95       	ret

00003902 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    3902:	fc 01       	movw	r30, r24
    3904:	10 8e       	std	Z+24, r1	; 0x18
    3906:	08 95       	ret

00003908 <u8x8_byte_SetDC>:
    case U8X8_MSG_BYTE_START_TRANSFER:
    case U8X8_MSG_BYTE_END_TRANSFER:
      break;	/* do nothing */
  }
  return 1;	/* always succeed */
}
    3908:	46 2f       	mov	r20, r22
    390a:	dc 01       	movw	r26, r24
    390c:	18 96       	adiw	r26, 0x08	; 8
    390e:	ed 91       	ld	r30, X+
    3910:	fc 91       	ld	r31, X
    3912:	19 97       	sbiw	r26, 0x09	; 9
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	60 e2       	ldi	r22, 0x20	; 32
    391a:	19 95       	eicall
    391c:	08 95       	ret

0000391e <u8x8_byte_SendBytes>:
    391e:	9a 01       	movw	r18, r20
    3920:	dc 01       	movw	r26, r24
    3922:	18 96       	adiw	r26, 0x08	; 8
    3924:	ed 91       	ld	r30, X+
    3926:	fc 91       	ld	r31, X
    3928:	19 97       	sbiw	r26, 0x09	; 9
    392a:	46 2f       	mov	r20, r22
    392c:	67 e1       	ldi	r22, 0x17	; 23
    392e:	19 95       	eicall
    3930:	08 95       	ret

00003932 <u8x8_byte_SendByte>:
    3932:	cf 93       	push	r28
    3934:	df 93       	push	r29
    3936:	1f 92       	push	r1
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
    393c:	69 83       	std	Y+1, r22	; 0x01
    393e:	ae 01       	movw	r20, r28
    3940:	4f 5f       	subi	r20, 0xFF	; 255
    3942:	5f 4f       	sbci	r21, 0xFF	; 255
    3944:	61 e0       	ldi	r22, 0x01	; 1
    3946:	0e 94 8f 1c 	call	0x391e	; 0x391e <u8x8_byte_SendBytes>
    394a:	0f 90       	pop	r0
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	08 95       	ret

00003952 <u8x8_byte_4wire_sw_spi>:
    U8X8_MSG_BYTE_START_TRANSFER
    U8X8_MSG_BYTE_END_TRANSFER
*/

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3952:	9f 92       	push	r9
    3954:	af 92       	push	r10
    3956:	bf 92       	push	r11
    3958:	cf 92       	push	r12
    395a:	df 92       	push	r13
    395c:	ef 92       	push	r14
    395e:	ff 92       	push	r15
    3960:	0f 93       	push	r16
    3962:	1f 93       	push	r17
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	ec 01       	movw	r28, r24
    396a:	79 01       	movw	r14, r18
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
    396c:	a8 81       	ld	r26, Y
    396e:	b9 81       	ldd	r27, Y+1	; 0x01
  uint8_t not_takeover_edge = 1 - takeover_edge;
 
  switch(msg)
    3970:	68 31       	cpi	r22, 0x18	; 24
    3972:	09 f4       	brne	.+2      	; 0x3976 <u8x8_byte_4wire_sw_spi+0x24>
    3974:	67 c0       	rjmp	.+206    	; 0x3a44 <u8x8_byte_4wire_sw_spi+0xf2>
    3976:	30 f4       	brcc	.+12     	; 0x3984 <u8x8_byte_4wire_sw_spi+0x32>
    3978:	64 31       	cpi	r22, 0x14	; 20
    397a:	09 f4       	brne	.+2      	; 0x397e <u8x8_byte_4wire_sw_spi+0x2c>
    397c:	4f c0       	rjmp	.+158    	; 0x3a1c <u8x8_byte_4wire_sw_spi+0xca>
    397e:	67 31       	cpi	r22, 0x17	; 23
    3980:	c9 f1       	breq	.+114    	; 0x39f4 <u8x8_byte_4wire_sw_spi+0xa2>
    3982:	82 c0       	rjmp	.+260    	; 0x3a88 <u8x8_byte_4wire_sw_spi+0x136>
    3984:	69 31       	cpi	r22, 0x19	; 25
    3986:	09 f4       	brne	.+2      	; 0x398a <u8x8_byte_4wire_sw_spi+0x38>
    3988:	6e c0       	rjmp	.+220    	; 0x3a66 <u8x8_byte_4wire_sw_spi+0x114>
    398a:	60 32       	cpi	r22, 0x20	; 32
    398c:	09 f4       	brne	.+2      	; 0x3990 <u8x8_byte_4wire_sw_spi+0x3e>
    398e:	55 c0       	rjmp	.+170    	; 0x3a3a <u8x8_byte_4wire_sw_spi+0xe8>
    3990:	7b c0       	rjmp	.+246    	; 0x3a88 <u8x8_byte_4wire_sw_spi+0x136>
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
    3992:	f7 01       	movw	r30, r14
    3994:	01 91       	ld	r16, Z+
    3996:	7f 01       	movw	r14, r30
	data++;
    3998:	18 e0       	ldi	r17, 0x08	; 8
	arg_int--;
	for( i = 0; i < 8; i++ )
	{
	  if ( b & 128 )
    399a:	00 23       	and	r16, r16
    399c:	34 f4       	brge	.+12     	; 0x39aa <u8x8_byte_4wire_sw_spi+0x58>
	    u8x8_gpio_SetSPIData(u8x8, 1);
    399e:	49 2d       	mov	r20, r9
    39a0:	61 e4       	ldi	r22, 0x41	; 65
    39a2:	ce 01       	movw	r24, r28
    39a4:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
    39a8:	05 c0       	rjmp	.+10     	; 0x39b4 <u8x8_byte_4wire_sw_spi+0x62>
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	61 e4       	ldi	r22, 0x41	; 65
    39ae:	ce 01       	movw	r24, r28
    39b0:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
	  b <<= 1;
    39b4:	00 0f       	add	r16, r16
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
    39b6:	4a 2d       	mov	r20, r10
    39b8:	60 e4       	ldi	r22, 0x40	; 64
    39ba:	ce 01       	movw	r24, r28
    39bc:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
    39c0:	e8 81       	ld	r30, Y
    39c2:	f9 81       	ldd	r31, Y+1	; 0x01
    39c4:	46 81       	ldd	r20, Z+6	; 0x06
    39c6:	6c e2       	ldi	r22, 0x2C	; 44
    39c8:	ce 01       	movw	r24, r28
    39ca:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
    39ce:	4b 2d       	mov	r20, r11
    39d0:	60 e4       	ldi	r22, 0x40	; 64
    39d2:	ce 01       	movw	r24, r28
    39d4:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
    39d8:	e8 81       	ld	r30, Y
    39da:	f9 81       	ldd	r31, Y+1	; 0x01
    39dc:	47 81       	ldd	r20, Z+7	; 0x07
    39de:	6c e2       	ldi	r22, 0x2C	; 44
    39e0:	ce 01       	movw	r24, r28
    39e2:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
    39e6:	11 50       	subi	r17, 0x01	; 1
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = 0; i < 8; i++ )
    39e8:	c1 f6       	brne	.-80     	; 0x399a <u8x8_byte_4wire_sw_spi+0x48>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
    39ea:	ce 14       	cp	r12, r14
    39ec:	df 04       	cpc	r13, r15
    39ee:	89 f6       	brne	.-94     	; 0x3992 <u8x8_byte_4wire_sw_spi+0x40>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	4d c0       	rjmp	.+154    	; 0x3a8e <u8x8_byte_4wire_sw_spi+0x13c>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
    39f4:	44 23       	and	r20, r20
    39f6:	09 f4       	brne	.+2      	; 0x39fa <u8x8_byte_4wire_sw_spi+0xa8>
    39f8:	49 c0       	rjmp	.+146    	; 0x3a8c <u8x8_byte_4wire_sw_spi+0x13a>

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
    39fa:	1c 96       	adiw	r26, 0x0c	; 12
    39fc:	8c 91       	ld	r24, X
    39fe:	81 70       	andi	r24, 0x01	; 1
    3a00:	b8 2e       	mov	r11, r24
    3a02:	41 50       	subi	r20, 0x01	; 1
    3a04:	c4 2e       	mov	r12, r20
    3a06:	d1 2c       	mov	r13, r1
    3a08:	ff ef       	ldi	r31, 0xFF	; 255
    3a0a:	cf 1a       	sub	r12, r31
    3a0c:	df 0a       	sbc	r13, r31
    3a0e:	c2 0e       	add	r12, r18
    3a10:	d3 1e       	adc	r13, r19
	data++;
	arg_int--;
	for( i = 0; i < 8; i++ )
	{
	  if ( b & 128 )
	    u8x8_gpio_SetSPIData(u8x8, 1);
    3a12:	99 24       	eor	r9, r9
    3a14:	93 94       	inc	r9
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
	  b <<= 1;
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
    3a16:	a9 2c       	mov	r10, r9
    3a18:	a8 1a       	sub	r10, r24
    3a1a:	bb cf       	rjmp	.-138    	; 0x3992 <u8x8_byte_4wire_sw_spi+0x40>
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
    3a1c:	11 96       	adiw	r26, 0x01	; 1
    3a1e:	4c 91       	ld	r20, X
    3a20:	69 e4       	ldi	r22, 0x49	; 73
    3a22:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
    3a26:	e8 81       	ld	r30, Y
    3a28:	f9 81       	ldd	r31, Y+1	; 0x01
    3a2a:	44 85       	ldd	r20, Z+12	; 0x0c
    3a2c:	41 70       	andi	r20, 0x01	; 1
    3a2e:	60 e4       	ldi	r22, 0x40	; 64
    3a30:	ce 01       	movw	r24, r28
    3a32:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    3a36:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
    3a38:	2a c0       	rjmp	.+84     	; 0x3a8e <u8x8_byte_4wire_sw_spi+0x13c>
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
    3a3a:	6a e4       	ldi	r22, 0x4A	; 74
    3a3c:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    3a40:	81 e0       	ldi	r24, 0x01	; 1
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    3a42:	25 c0       	rjmp	.+74     	; 0x3a8e <u8x8_byte_4wire_sw_spi+0x13c>
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
    3a44:	4c 91       	ld	r20, X
    3a46:	69 e4       	ldi	r22, 0x49	; 73
    3a48:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
    3a4c:	a8 81       	ld	r26, Y
    3a4e:	b9 81       	ldd	r27, Y+1	; 0x01
    3a50:	ea 85       	ldd	r30, Y+10	; 0x0a
    3a52:	fb 85       	ldd	r31, Y+11	; 0x0b
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	12 96       	adiw	r26, 0x02	; 2
    3a5a:	4c 91       	ld	r20, X
    3a5c:	6c e2       	ldi	r22, 0x2C	; 44
    3a5e:	ce 01       	movw	r24, r28
    3a60:	19 95       	eicall
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    3a64:	14 c0       	rjmp	.+40     	; 0x3a8e <u8x8_byte_4wire_sw_spi+0x13c>
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
    3a66:	ea 85       	ldd	r30, Y+10	; 0x0a
    3a68:	fb 85       	ldd	r31, Y+11	; 0x0b
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	13 96       	adiw	r26, 0x03	; 3
    3a70:	4c 91       	ld	r20, X
    3a72:	6c e2       	ldi	r22, 0x2C	; 44
    3a74:	19 95       	eicall
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
    3a76:	e8 81       	ld	r30, Y
    3a78:	f9 81       	ldd	r31, Y+1	; 0x01
    3a7a:	41 81       	ldd	r20, Z+1	; 0x01
    3a7c:	69 e4       	ldi	r22, 0x49	; 73
    3a7e:	ce 01       	movw	r24, r28
    3a80:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
      break;
    default:
      return 0;
  }
  return 1;
    3a84:	81 e0       	ldi	r24, 0x01	; 1
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    3a86:	03 c0       	rjmp	.+6      	; 0x3a8e <u8x8_byte_4wire_sw_spi+0x13c>
    default:
      return 0;
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	01 c0       	rjmp	.+2      	; 0x3a8e <u8x8_byte_4wire_sw_spi+0x13c>
  }
  return 1;
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
}
    3a8e:	df 91       	pop	r29
    3a90:	cf 91       	pop	r28
    3a92:	1f 91       	pop	r17
    3a94:	0f 91       	pop	r16
    3a96:	ff 90       	pop	r15
    3a98:	ef 90       	pop	r14
    3a9a:	df 90       	pop	r13
    3a9c:	cf 90       	pop	r12
    3a9e:	bf 90       	pop	r11
    3aa0:	af 90       	pop	r10
    3aa2:	9f 90       	pop	r9
    3aa4:	08 95       	ret

00003aa6 <u8x8_cad_SendCmd>:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
}
    3aa6:	46 2f       	mov	r20, r22
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	16 96       	adiw	r26, 0x06	; 6
    3aac:	ed 91       	ld	r30, X+
    3aae:	fc 91       	ld	r31, X
    3ab0:	17 97       	sbiw	r26, 0x07	; 7
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	65 e1       	ldi	r22, 0x15	; 21
    3ab8:	19 95       	eicall
    3aba:	08 95       	ret

00003abc <u8x8_cad_SendArg>:
    3abc:	46 2f       	mov	r20, r22
    3abe:	dc 01       	movw	r26, r24
    3ac0:	16 96       	adiw	r26, 0x06	; 6
    3ac2:	ed 91       	ld	r30, X+
    3ac4:	fc 91       	ld	r31, X
    3ac6:	17 97       	sbiw	r26, 0x07	; 7
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	66 e1       	ldi	r22, 0x16	; 22
    3ace:	19 95       	eicall
    3ad0:	08 95       	ret

00003ad2 <u8x8_cad_SendData>:
    3ad2:	9a 01       	movw	r18, r20
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	16 96       	adiw	r26, 0x06	; 6
    3ad8:	ed 91       	ld	r30, X+
    3ada:	fc 91       	ld	r31, X
    3adc:	17 97       	sbiw	r26, 0x07	; 7
    3ade:	46 2f       	mov	r20, r22
    3ae0:	67 e1       	ldi	r22, 0x17	; 23
    3ae2:	19 95       	eicall
    3ae4:	08 95       	ret

00003ae6 <u8x8_cad_StartTransfer>:
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	16 96       	adiw	r26, 0x06	; 6
    3aea:	ed 91       	ld	r30, X+
    3aec:	fc 91       	ld	r31, X
    3aee:	17 97       	sbiw	r26, 0x07	; 7
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	68 e1       	ldi	r22, 0x18	; 24
    3af8:	19 95       	eicall
    3afa:	08 95       	ret

00003afc <u8x8_cad_EndTransfer>:
    3afc:	dc 01       	movw	r26, r24
    3afe:	16 96       	adiw	r26, 0x06	; 6
    3b00:	ed 91       	ld	r30, X+
    3b02:	fc 91       	ld	r31, X
    3b04:	17 97       	sbiw	r26, 0x07	; 7
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e0       	ldi	r20, 0x00	; 0
    3b0c:	69 e1       	ldi	r22, 0x19	; 25
    3b0e:	19 95       	eicall
    3b10:	08 95       	ret

00003b12 <u8x8_cad_SendSequence>:
    3b12:	ef 92       	push	r14
    3b14:	ff 92       	push	r15
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	1f 92       	push	r1
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	7c 01       	movw	r14, r24
    3b26:	8b 01       	movw	r16, r22
    3b28:	d8 01       	movw	r26, r16
    3b2a:	6c 91       	ld	r22, X
    3b2c:	67 31       	cpi	r22, 0x17	; 23
    3b2e:	c1 f0       	breq	.+48     	; 0x3b60 <u8x8_cad_SendSequence+0x4e>
    3b30:	18 f4       	brcc	.+6      	; 0x3b38 <u8x8_cad_SendSequence+0x26>
    3b32:	65 31       	cpi	r22, 0x15	; 21
    3b34:	30 f4       	brcc	.+12     	; 0x3b42 <u8x8_cad_SendSequence+0x30>
    3b36:	38 c0       	rjmp	.+112    	; 0x3ba8 <u8x8_cad_SendSequence+0x96>
    3b38:	6a 31       	cpi	r22, 0x1A	; 26
    3b3a:	f8 f0       	brcs	.+62     	; 0x3b7a <u8x8_cad_SendSequence+0x68>
    3b3c:	6e 3f       	cpi	r22, 0xFE	; 254
    3b3e:	51 f1       	breq	.+84     	; 0x3b94 <u8x8_cad_SendSequence+0x82>
    3b40:	33 c0       	rjmp	.+102    	; 0x3ba8 <u8x8_cad_SendSequence+0x96>
    3b42:	f8 01       	movw	r30, r16
    3b44:	41 81       	ldd	r20, Z+1	; 0x01
    3b46:	49 83       	std	Y+1, r20	; 0x01
    3b48:	d7 01       	movw	r26, r14
    3b4a:	16 96       	adiw	r26, 0x06	; 6
    3b4c:	ed 91       	ld	r30, X+
    3b4e:	fc 91       	ld	r31, X
    3b50:	17 97       	sbiw	r26, 0x07	; 7
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	c7 01       	movw	r24, r14
    3b58:	19 95       	eicall
    3b5a:	0e 5f       	subi	r16, 0xFE	; 254
    3b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b5e:	e4 cf       	rjmp	.-56     	; 0x3b28 <u8x8_cad_SendSequence+0x16>
    3b60:	f8 01       	movw	r30, r16
    3b62:	81 81       	ldd	r24, Z+1	; 0x01
    3b64:	89 83       	std	Y+1, r24	; 0x01
    3b66:	ae 01       	movw	r20, r28
    3b68:	4f 5f       	subi	r20, 0xFF	; 255
    3b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b6c:	61 e0       	ldi	r22, 0x01	; 1
    3b6e:	c7 01       	movw	r24, r14
    3b70:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <u8x8_cad_SendData>
    3b74:	0e 5f       	subi	r16, 0xFE	; 254
    3b76:	1f 4f       	sbci	r17, 0xFF	; 255
    3b78:	d7 cf       	rjmp	.-82     	; 0x3b28 <u8x8_cad_SendSequence+0x16>
    3b7a:	0f 5f       	subi	r16, 0xFF	; 255
    3b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7e:	d7 01       	movw	r26, r14
    3b80:	16 96       	adiw	r26, 0x06	; 6
    3b82:	ed 91       	ld	r30, X+
    3b84:	fc 91       	ld	r31, X
    3b86:	17 97       	sbiw	r26, 0x07	; 7
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	c7 01       	movw	r24, r14
    3b90:	19 95       	eicall
    3b92:	ca cf       	rjmp	.-108    	; 0x3b28 <u8x8_cad_SendSequence+0x16>
    3b94:	f8 01       	movw	r30, r16
    3b96:	41 81       	ldd	r20, Z+1	; 0x01
    3b98:	49 83       	std	Y+1, r20	; 0x01
    3b9a:	69 e2       	ldi	r22, 0x29	; 41
    3b9c:	c7 01       	movw	r24, r14
    3b9e:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
    3ba2:	0e 5f       	subi	r16, 0xFE	; 254
    3ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba6:	c0 cf       	rjmp	.-128    	; 0x3b28 <u8x8_cad_SendSequence+0x16>
    3ba8:	0f 90       	pop	r0
    3baa:	df 91       	pop	r29
    3bac:	cf 91       	pop	r28
    3bae:	1f 91       	pop	r17
    3bb0:	0f 91       	pop	r16
    3bb2:	ff 90       	pop	r15
    3bb4:	ef 90       	pop	r14
    3bb6:	08 95       	ret

00003bb8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3bb8:	ef 92       	push	r14
    3bba:	ff 92       	push	r15
    3bbc:	0f 93       	push	r16
    3bbe:	1f 93       	push	r17
    3bc0:	cf 93       	push	r28
    3bc2:	df 93       	push	r29
    3bc4:	8c 01       	movw	r16, r24
    3bc6:	c6 2f       	mov	r28, r22
    3bc8:	d4 2f       	mov	r29, r20
    3bca:	79 01       	movw	r14, r18
  switch(msg)
    3bcc:	66 31       	cpi	r22, 0x16	; 22
    3bce:	a1 f0       	breq	.+40     	; 0x3bf8 <u8x8_cad_001+0x40>
    3bd0:	28 f4       	brcc	.+10     	; 0x3bdc <u8x8_cad_001+0x24>
    3bd2:	64 31       	cpi	r22, 0x14	; 20
    3bd4:	e9 f0       	breq	.+58     	; 0x3c10 <u8x8_cad_001+0x58>
    3bd6:	65 31       	cpi	r22, 0x15	; 21
    3bd8:	31 f0       	breq	.+12     	; 0x3be6 <u8x8_cad_001+0x2e>
    3bda:	25 c0       	rjmp	.+74     	; 0x3c26 <u8x8_cad_001+0x6e>
    3bdc:	67 31       	cpi	r22, 0x17	; 23
    3bde:	a9 f0       	breq	.+42     	; 0x3c0a <u8x8_cad_001+0x52>
    3be0:	6a 31       	cpi	r22, 0x1A	; 26
    3be2:	08 f5       	brcc	.+66     	; 0x3c26 <u8x8_cad_001+0x6e>
    3be4:	15 c0       	rjmp	.+42     	; 0x3c10 <u8x8_cad_001+0x58>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
    3be6:	60 e0       	ldi	r22, 0x00	; 0
    3be8:	0e 94 84 1c 	call	0x3908	; 0x3908 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    3bec:	6d 2f       	mov	r22, r29
    3bee:	c8 01       	movw	r24, r16
    3bf0:	0e 94 99 1c 	call	0x3932	; 0x3932 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    3bf6:	18 c0       	rjmp	.+48     	; 0x3c28 <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
    3bf8:	60 e0       	ldi	r22, 0x00	; 0
    3bfa:	0e 94 84 1c 	call	0x3908	; 0x3908 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    3bfe:	6d 2f       	mov	r22, r29
    3c00:	c8 01       	movw	r24, r16
    3c02:	0e 94 99 1c 	call	0x3932	; 0x3932 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    3c06:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    3c08:	0f c0       	rjmp	.+30     	; 0x3c28 <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
    3c0a:	61 e0       	ldi	r22, 0x01	; 1
    3c0c:	0e 94 84 1c 	call	0x3908	; 0x3908 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    3c10:	d8 01       	movw	r26, r16
    3c12:	18 96       	adiw	r26, 0x08	; 8
    3c14:	ed 91       	ld	r30, X+
    3c16:	fc 91       	ld	r31, X
    3c18:	19 97       	sbiw	r26, 0x09	; 9
    3c1a:	97 01       	movw	r18, r14
    3c1c:	4d 2f       	mov	r20, r29
    3c1e:	6c 2f       	mov	r22, r28
    3c20:	c8 01       	movw	r24, r16
    3c22:	19 95       	eicall
    3c24:	01 c0       	rjmp	.+2      	; 0x3c28 <u8x8_cad_001+0x70>
    default:
      return 0;
    3c26:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	1f 91       	pop	r17
    3c2e:	0f 91       	pop	r16
    3c30:	ff 90       	pop	r15
    3c32:	ef 90       	pop	r14
    3c34:	08 95       	ret

00003c36 <u8x8_d_helper_display_setup_memory>:
*/
void u8x8_InitInterface(u8x8_t *u8x8)
{
  u8x8_gpio_Init(u8x8);
  u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
}
    3c36:	fc 01       	movw	r30, r24
    3c38:	60 83       	st	Z, r22
    3c3a:	71 83       	std	Z+1, r23	; 0x01
    3c3c:	fb 01       	movw	r30, r22
    3c3e:	22 89       	ldd	r18, Z+18	; 0x12
    3c40:	fc 01       	movw	r30, r24
    3c42:	24 8b       	std	Z+20, r18	; 0x14
    3c44:	08 95       	ret

00003c46 <u8x8_d_helper_display_init>:
    3c46:	cf 93       	push	r28
    3c48:	df 93       	push	r29
    3c4a:	ec 01       	movw	r28, r24
    3c4c:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c4e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e0       	ldi	r20, 0x00	; 0
    3c56:	68 e2       	ldi	r22, 0x28	; 40
    3c58:	19 95       	eicall
    3c5a:	ee 81       	ldd	r30, Y+6	; 0x06
    3c5c:	ff 81       	ldd	r31, Y+7	; 0x07
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e0       	ldi	r20, 0x00	; 0
    3c64:	64 e1       	ldi	r22, 0x14	; 20
    3c66:	ce 01       	movw	r24, r28
    3c68:	19 95       	eicall
    3c6a:	41 e0       	ldi	r20, 0x01	; 1
    3c6c:	6b e4       	ldi	r22, 0x4B	; 75
    3c6e:	ce 01       	movw	r24, r28
    3c70:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
    3c74:	e8 81       	ld	r30, Y
    3c76:	f9 81       	ldd	r31, Y+1	; 0x01
    3c78:	44 81       	ldd	r20, Z+4	; 0x04
    3c7a:	69 e2       	ldi	r22, 0x29	; 41
    3c7c:	ce 01       	movw	r24, r28
    3c7e:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
    3c82:	40 e0       	ldi	r20, 0x00	; 0
    3c84:	6b e4       	ldi	r22, 0x4B	; 75
    3c86:	ce 01       	movw	r24, r28
    3c88:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
    3c8c:	e8 81       	ld	r30, Y
    3c8e:	f9 81       	ldd	r31, Y+1	; 0x01
    3c90:	44 81       	ldd	r20, Z+4	; 0x04
    3c92:	69 e2       	ldi	r22, 0x29	; 41
    3c94:	ce 01       	movw	r24, r28
    3c96:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
    3c9a:	41 e0       	ldi	r20, 0x01	; 1
    3c9c:	6b e4       	ldi	r22, 0x4B	; 75
    3c9e:	ce 01       	movw	r24, r28
    3ca0:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
    3ca4:	e8 81       	ld	r30, Y
    3ca6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ca8:	45 81       	ldd	r20, Z+5	; 0x05
    3caa:	69 e2       	ldi	r22, 0x29	; 41
    3cac:	ce 01       	movw	r24, r28
    3cae:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <u8x8_gpio_call>
    3cb2:	df 91       	pop	r29
    3cb4:	cf 91       	pop	r28
    3cb6:	08 95       	ret

00003cb8 <u8x8_DrawTile>:
    3cb8:	0f 93       	push	r16
    3cba:	1f 93       	push	r17
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	cd b7       	in	r28, 0x3d	; 61
    3cc2:	de b7       	in	r29, 0x3e	; 62
    3cc4:	25 97       	sbiw	r28, 0x05	; 5
    3cc6:	cd bf       	out	0x3d, r28	; 61
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	6c 83       	std	Y+4, r22	; 0x04
    3ccc:	4d 83       	std	Y+5, r20	; 0x05
    3cce:	2b 83       	std	Y+3, r18	; 0x03
    3cd0:	09 83       	std	Y+1, r16	; 0x01
    3cd2:	1a 83       	std	Y+2, r17	; 0x02
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	14 96       	adiw	r26, 0x04	; 4
    3cd8:	ed 91       	ld	r30, X+
    3cda:	fc 91       	ld	r31, X
    3cdc:	15 97       	sbiw	r26, 0x05	; 5
    3cde:	9e 01       	movw	r18, r28
    3ce0:	2f 5f       	subi	r18, 0xFF	; 255
    3ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce4:	41 e0       	ldi	r20, 0x01	; 1
    3ce6:	6f e0       	ldi	r22, 0x0F	; 15
    3ce8:	19 95       	eicall
    3cea:	25 96       	adiw	r28, 0x05	; 5
    3cec:	cd bf       	out	0x3d, r28	; 61
    3cee:	de bf       	out	0x3e, r29	; 62
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	1f 91       	pop	r17
    3cf6:	0f 91       	pop	r16
    3cf8:	08 95       	ret

00003cfa <u8x8_SetupMemory>:
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	14 96       	adiw	r26, 0x04	; 4
    3cfe:	ed 91       	ld	r30, X+
    3d00:	fc 91       	ld	r31, X
    3d02:	15 97       	sbiw	r26, 0x05	; 5
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	40 e0       	ldi	r20, 0x00	; 0
    3d0a:	69 e0       	ldi	r22, 0x09	; 9
    3d0c:	19 95       	eicall
    3d0e:	08 95       	ret

00003d10 <u8x8_InitDisplay>:
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
    3d10:	dc 01       	movw	r26, r24
    3d12:	14 96       	adiw	r26, 0x04	; 4
    3d14:	ed 91       	ld	r30, X+
    3d16:	fc 91       	ld	r31, X
    3d18:	15 97       	sbiw	r26, 0x05	; 5
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e0       	ldi	r20, 0x00	; 0
    3d20:	6a e0       	ldi	r22, 0x0A	; 10
    3d22:	19 95       	eicall
    3d24:	08 95       	ret

00003d26 <u8x8_SetPowerSave>:
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
    3d26:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    3d28:	dc 01       	movw	r26, r24
    3d2a:	14 96       	adiw	r26, 0x04	; 4
    3d2c:	ed 91       	ld	r30, X+
    3d2e:	fc 91       	ld	r31, X
    3d30:	15 97       	sbiw	r26, 0x05	; 5
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	6b e0       	ldi	r22, 0x0B	; 11
    3d38:	19 95       	eicall
    3d3a:	08 95       	ret

00003d3c <u8x8_SetFlipMode>:
}

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
    3d3c:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
    3d3e:	dc 01       	movw	r26, r24
    3d40:	14 96       	adiw	r26, 0x04	; 4
    3d42:	ed 91       	ld	r30, X+
    3d44:	fc 91       	ld	r31, X
    3d46:	15 97       	sbiw	r26, 0x05	; 5
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	6d e0       	ldi	r22, 0x0D	; 13
    3d4e:	19 95       	eicall
    3d50:	08 95       	ret

00003d52 <u8x8_SetContrast>:
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
    3d52:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    3d54:	dc 01       	movw	r26, r24
    3d56:	14 96       	adiw	r26, 0x04	; 4
    3d58:	ed 91       	ld	r30, X+
    3d5a:	fc 91       	ld	r31, X
    3d5c:	15 97       	sbiw	r26, 0x05	; 5
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	6e e0       	ldi	r22, 0x0E	; 14
    3d64:	19 95       	eicall
    3d66:	08 95       	ret

00003d68 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    3d68:	dc 01       	movw	r26, r24
    3d6a:	14 96       	adiw	r26, 0x04	; 4
    3d6c:	ed 91       	ld	r30, X+
    3d6e:	fc 91       	ld	r31, X
    3d70:	15 97       	sbiw	r26, 0x05	; 5
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	40 e0       	ldi	r20, 0x00	; 0
    3d78:	60 e1       	ldi	r22, 0x10	; 16
    3d7a:	19 95       	eicall
    3d7c:	08 95       	ret

00003d7e <u8x8_d_st7565_common>:
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
}
    3d7e:	df 92       	push	r13
    3d80:	ef 92       	push	r14
    3d82:	ff 92       	push	r15
    3d84:	0f 93       	push	r16
    3d86:	1f 93       	push	r17
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	8c 01       	movw	r16, r24
    3d8e:	c4 2f       	mov	r28, r20
    3d90:	79 01       	movw	r14, r18
    3d92:	6e 30       	cpi	r22, 0x0E	; 14
    3d94:	09 f4       	brne	.+2      	; 0x3d98 <u8x8_d_st7565_common+0x1a>
    3d96:	4c c0       	rjmp	.+152    	; 0x3e30 <u8x8_d_st7565_common+0xb2>
    3d98:	6f 30       	cpi	r22, 0x0F	; 15
    3d9a:	21 f0       	breq	.+8      	; 0x3da4 <u8x8_d_st7565_common+0x26>
    3d9c:	6b 30       	cpi	r22, 0x0B	; 11
    3d9e:	09 f0       	breq	.+2      	; 0x3da2 <u8x8_d_st7565_common+0x24>
    3da0:	58 c0       	rjmp	.+176    	; 0x3e52 <u8x8_d_st7565_common+0xd4>
    3da2:	38 c0       	rjmp	.+112    	; 0x3e14 <u8x8_d_st7565_common+0x96>
    3da4:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <u8x8_cad_StartTransfer>
    3da8:	f7 01       	movw	r30, r14
    3daa:	d3 80       	ldd	r13, Z+3	; 0x03
    3dac:	dd 0c       	add	r13, r13
    3dae:	dd 0c       	add	r13, r13
    3db0:	dd 0c       	add	r13, r13
    3db2:	f8 01       	movw	r30, r16
    3db4:	84 89       	ldd	r24, Z+20	; 0x14
    3db6:	d8 0e       	add	r13, r24
    3db8:	6d 2d       	mov	r22, r13
    3dba:	62 95       	swap	r22
    3dbc:	6f 70       	andi	r22, 0x0F	; 15
    3dbe:	60 61       	ori	r22, 0x10	; 16
    3dc0:	c8 01       	movw	r24, r16
    3dc2:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <u8x8_cad_SendCmd>
    3dc6:	6d 2d       	mov	r22, r13
    3dc8:	6f 70       	andi	r22, 0x0F	; 15
    3dca:	c8 01       	movw	r24, r16
    3dcc:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <u8x8_cad_SendCmd>
    3dd0:	f7 01       	movw	r30, r14
    3dd2:	64 81       	ldd	r22, Z+4	; 0x04
    3dd4:	60 6b       	ori	r22, 0xB0	; 176
    3dd6:	c8 01       	movw	r24, r16
    3dd8:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <u8x8_cad_SendCmd>
    3ddc:	f7 01       	movw	r30, r14
    3dde:	d2 81       	ldd	r29, Z+2	; 0x02
    3de0:	dd 0f       	add	r29, r29
    3de2:	dd 0f       	add	r29, r29
    3de4:	dd 0f       	add	r29, r29
    3de6:	e0 80       	ld	r14, Z
    3de8:	f1 80       	ldd	r15, Z+1	; 0x01
    3dea:	8d 2d       	mov	r24, r13
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	8d 0f       	add	r24, r29
    3df0:	91 1d       	adc	r25, r1
    3df2:	85 38       	cpi	r24, 0x85	; 133
    3df4:	91 05       	cpc	r25, r1
    3df6:	10 f0       	brcs	.+4      	; 0x3dfc <u8x8_d_st7565_common+0x7e>
    3df8:	d4 e8       	ldi	r29, 0x84	; 132
    3dfa:	dd 19       	sub	r29, r13
    3dfc:	a7 01       	movw	r20, r14
    3dfe:	6d 2f       	mov	r22, r29
    3e00:	c8 01       	movw	r24, r16
    3e02:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <u8x8_cad_SendData>
    3e06:	c1 50       	subi	r28, 0x01	; 1
    3e08:	c9 f7       	brne	.-14     	; 0x3dfc <u8x8_d_st7565_common+0x7e>
    3e0a:	c8 01       	movw	r24, r16
    3e0c:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <u8x8_cad_EndTransfer>
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	20 c0       	rjmp	.+64     	; 0x3e54 <u8x8_d_st7565_common+0xd6>
    3e14:	41 11       	cpse	r20, r1
    3e16:	06 c0       	rjmp	.+12     	; 0x3e24 <u8x8_d_st7565_common+0xa6>
    3e18:	60 e7       	ldi	r22, 0x70	; 112
    3e1a:	71 e2       	ldi	r23, 0x21	; 33
    3e1c:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <u8x8_cad_SendSequence>
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	18 c0       	rjmp	.+48     	; 0x3e54 <u8x8_d_st7565_common+0xd6>
    3e24:	69 e6       	ldi	r22, 0x69	; 105
    3e26:	71 e2       	ldi	r23, 0x21	; 33
    3e28:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <u8x8_cad_SendSequence>
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	12 c0       	rjmp	.+36     	; 0x3e54 <u8x8_d_st7565_common+0xd6>
    3e30:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <u8x8_cad_StartTransfer>
    3e34:	61 e8       	ldi	r22, 0x81	; 129
    3e36:	c8 01       	movw	r24, r16
    3e38:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <u8x8_cad_SendCmd>
    3e3c:	6c 2f       	mov	r22, r28
    3e3e:	66 95       	lsr	r22
    3e40:	66 95       	lsr	r22
    3e42:	c8 01       	movw	r24, r16
    3e44:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <u8x8_cad_SendArg>
    3e48:	c8 01       	movw	r24, r16
    3e4a:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <u8x8_cad_EndTransfer>
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	01 c0       	rjmp	.+2      	; 0x3e54 <u8x8_d_st7565_common+0xd6>
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	df 91       	pop	r29
    3e56:	cf 91       	pop	r28
    3e58:	1f 91       	pop	r17
    3e5a:	0f 91       	pop	r16
    3e5c:	ff 90       	pop	r15
    3e5e:	ef 90       	pop	r14
    3e60:	df 90       	pop	r13
    3e62:	08 95       	ret

00003e64 <u8x8_d_st7565_ea_dogm132>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_ea_dogm132(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3e64:	0f 93       	push	r16
    3e66:	1f 93       	push	r17
    3e68:	cf 93       	push	r28
    3e6a:	df 93       	push	r29
    3e6c:	8c 01       	movw	r16, r24
    3e6e:	c6 2f       	mov	r28, r22
    3e70:	d4 2f       	mov	r29, r20
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
    3e72:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <u8x8_d_st7565_common>
    3e76:	81 11       	cpse	r24, r1
    3e78:	35 c0       	rjmp	.+106    	; 0x3ee4 <u8x8_d_st7565_ea_dogm132+0x80>
  {
    /* msg not handled, then try here */
    switch(msg)
    3e7a:	ca 30       	cpi	r28, 0x0A	; 10
    3e7c:	59 f0       	breq	.+22     	; 0x3e94 <u8x8_d_st7565_ea_dogm132+0x30>
    3e7e:	cd 30       	cpi	r28, 0x0D	; 13
    3e80:	99 f0       	breq	.+38     	; 0x3ea8 <u8x8_d_st7565_ea_dogm132+0x44>
    3e82:	c9 30       	cpi	r28, 0x09	; 9
    3e84:	81 f5       	brne	.+96     	; 0x3ee6 <u8x8_d_st7565_ea_dogm132+0x82>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_dogm132_display_info);
    3e86:	63 e4       	ldi	r22, 0x43	; 67
    3e88:	71 e2       	ldi	r23, 0x21	; 33
    3e8a:	c8 01       	movw	r24, r16
    3e8c:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <u8x8_d_helper_display_setup_memory>
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    /* msg not handled, then try here */
    switch(msg)
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_dogm132_display_info);
	break;
    3e92:	29 c0       	rjmp	.+82     	; 0x3ee6 <u8x8_d_st7565_ea_dogm132+0x82>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
    3e94:	c8 01       	movw	r24, r16
    3e96:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_dogm132_init_seq);
    3e9a:	62 e2       	ldi	r22, 0x22	; 34
    3e9c:	71 e2       	ldi	r23, 0x21	; 33
    3e9e:	c8 01       	movw	r24, r16
    3ea0:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <u8x8_cad_SendSequence>
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_dogm132_display_info);
	break;
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_dogm132_init_seq);
	break;
    3ea6:	1f c0       	rjmp	.+62     	; 0x3ee6 <u8x8_d_st7565_ea_dogm132+0x82>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
    3ea8:	d1 11       	cpse	r29, r1
    3eaa:	0e c0       	rjmp	.+28     	; 0x3ec8 <u8x8_d_st7565_ea_dogm132+0x64>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
    3eac:	62 e6       	ldi	r22, 0x62	; 98
    3eae:	71 e2       	ldi	r23, 0x21	; 33
    3eb0:	c8 01       	movw	r24, r16
    3eb2:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
    3eb6:	d8 01       	movw	r26, r16
    3eb8:	ed 91       	ld	r30, X+
    3eba:	fc 91       	ld	r31, X
    3ebc:	11 97       	sbiw	r26, 0x01	; 1
    3ebe:	82 89       	ldd	r24, Z+18	; 0x12
    3ec0:	54 96       	adiw	r26, 0x14	; 20
    3ec2:	8c 93       	st	X, r24
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	0f c0       	rjmp	.+30     	; 0x3ee6 <u8x8_d_st7565_ea_dogm132+0x82>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
	}
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
    3ec8:	6b e5       	ldi	r22, 0x5B	; 91
    3eca:	71 e2       	ldi	r23, 0x21	; 33
    3ecc:	c8 01       	movw	r24, r16
    3ece:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    3ed2:	d8 01       	movw	r26, r16
    3ed4:	ed 91       	ld	r30, X+
    3ed6:	fc 91       	ld	r31, X
    3ed8:	11 97       	sbiw	r26, 0x01	; 1
    3eda:	83 89       	ldd	r24, Z+19	; 0x13
    3edc:	54 96       	adiw	r26, 0x14	; 20
    3ede:	8c 93       	st	X, r24
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	01 c0       	rjmp	.+2      	; 0x3ee6 <u8x8_d_st7565_ea_dogm132+0x82>
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
}
    3ee6:	df 91       	pop	r29
    3ee8:	cf 91       	pop	r28
    3eea:	1f 91       	pop	r17
    3eec:	0f 91       	pop	r16
    3eee:	08 95       	ret

00003ef0 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	1a 96       	adiw	r26, 0x0a	; 10
    3ef4:	ed 91       	ld	r30, X+
    3ef6:	fc 91       	ld	r31, X
    3ef8:	1b 97       	sbiw	r26, 0x0b	; 11
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	19 95       	eicall
    3f00:	08 95       	ret

00003f02 <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	08 95       	ret

00003f06 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    3f06:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    3f08:	10 82       	st	Z, r1
    3f0a:	11 82       	std	Z+1, r1	; 0x01
    u8x8->display_cb = u8x8_dummy_cb;
    3f0c:	81 e8       	ldi	r24, 0x81	; 129
    3f0e:	9f e1       	ldi	r25, 0x1F	; 31
    3f10:	84 83       	std	Z+4, r24	; 0x04
    3f12:	95 83       	std	Z+5, r25	; 0x05
    u8x8->cad_cb = u8x8_dummy_cb;
    3f14:	86 83       	std	Z+6, r24	; 0x06
    3f16:	97 83       	std	Z+7, r25	; 0x07
    u8x8->byte_cb = u8x8_dummy_cb;
    3f18:	80 87       	std	Z+8, r24	; 0x08
    3f1a:	91 87       	std	Z+9, r25	; 0x09
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    3f1c:	82 87       	std	Z+10, r24	; 0x0a
    3f1e:	93 87       	std	Z+11, r25	; 0x0b
    u8x8->is_font_inverse_mode = 0;
    3f20:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    3f22:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    3f24:	14 86       	std	Z+12, r1	; 0x0c
    3f26:	15 86       	std	Z+13, r1	; 0x0d
    3f28:	16 86       	std	Z+14, r1	; 0x0e
    3f2a:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    3f2c:	8f ef       	ldi	r24, 0xFF	; 255
    3f2e:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    3f30:	82 8f       	std	Z+26, r24	; 0x1a
    3f32:	08 95       	ret

00003f34 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    3f34:	af 92       	push	r10
    3f36:	bf 92       	push	r11
    3f38:	cf 92       	push	r12
    3f3a:	df 92       	push	r13
    3f3c:	ef 92       	push	r14
    3f3e:	ff 92       	push	r15
    3f40:	0f 93       	push	r16
    3f42:	1f 93       	push	r17
    3f44:	cf 93       	push	r28
    3f46:	df 93       	push	r29
    3f48:	ec 01       	movw	r28, r24
    3f4a:	5b 01       	movw	r10, r22
    3f4c:	6a 01       	movw	r12, r20
    3f4e:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    3f50:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    3f54:	ac 82       	std	Y+4, r10	; 0x04
    3f56:	bd 82       	std	Y+5, r11	; 0x05
  u8x8->cad_cb = cad_cb;
    3f58:	ce 82       	std	Y+6, r12	; 0x06
    3f5a:	df 82       	std	Y+7, r13	; 0x07
  u8x8->byte_cb = byte_cb;
    3f5c:	e8 86       	std	Y+8, r14	; 0x08
    3f5e:	f9 86       	std	Y+9, r15	; 0x09
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    3f60:	0a 87       	std	Y+10, r16	; 0x0a
    3f62:	1b 87       	std	Y+11, r17	; 0x0b

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    3f64:	ce 01       	movw	r24, r28
    3f66:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <u8x8_SetupMemory>
}
    3f6a:	df 91       	pop	r29
    3f6c:	cf 91       	pop	r28
    3f6e:	1f 91       	pop	r17
    3f70:	0f 91       	pop	r16
    3f72:	ff 90       	pop	r15
    3f74:	ef 90       	pop	r14
    3f76:	df 90       	pop	r13
    3f78:	cf 90       	pop	r12
    3f7a:	bf 90       	pop	r11
    3f7c:	af 90       	pop	r10
    3f7e:	08 95       	ret

00003f80 <_Z13isFromTheSet1h>:
#include "PersianReshaper.h"

bool isFromTheSet1(unsigned char ch)
{
    3f80:	cf 93       	push	r28
    3f82:	df 93       	push	r29
    3f84:	cd b7       	in	r28, 0x3d	; 61
    3f86:	de b7       	in	r29, 0x3e	; 62
    3f88:	af 97       	sbiw	r28, 0x2f	; 47
    3f8a:	cd bf       	out	0x3d, r28	; 61
    3f8c:	de bf       	out	0x3e, r29	; 62
  const unsigned char theSet1[47] = {
      32, '\0', 199, 194, 207, 208, 209, 210,
      184, 168, 191, 40, 41, 46, 33, 44, 58, 248, 33, 10,
      45, 35, 43, 34, 39, 37, 42, 95, 64, 36, 94, 38,
      44,47,59,60,62,61,63,91,93,92,96,123,125,126,124};
    3f8e:	9f e2       	ldi	r25, 0x2F	; 47
    3f90:	ee e7       	ldi	r30, 0x7E	; 126
    3f92:	f0 e2       	ldi	r31, 0x20	; 32
    3f94:	de 01       	movw	r26, r28
    3f96:	11 96       	adiw	r26, 0x01	; 1
    3f98:	01 90       	ld	r0, Z+
    3f9a:	0d 92       	st	X+, r0
    3f9c:	9a 95       	dec	r25
    3f9e:	e1 f7       	brne	.-8      	; 0x3f98 <_Z13isFromTheSet1h+0x18>
  int i = 0;
  // Serial.println("checking Set1");
  while (i < 47)
  {
    if (ch == theSet1[i])
    3fa0:	99 81       	ldd	r25, Y+1	; 0x01
    3fa2:	89 17       	cp	r24, r25
    3fa4:	69 f0       	breq	.+26     	; 0x3fc0 <_Z13isFromTheSet1h+0x40>
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	32 96       	adiw	r30, 0x02	; 2
    3faa:	9e 01       	movw	r18, r28
    3fac:	20 5d       	subi	r18, 0xD0	; 208
    3fae:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb0:	91 91       	ld	r25, Z+
    3fb2:	98 17       	cp	r25, r24
    3fb4:	39 f0       	breq	.+14     	; 0x3fc4 <_Z13isFromTheSet1h+0x44>
      184, 168, 191, 40, 41, 46, 33, 44, 58, 248, 33, 10,
      45, 35, 43, 34, 39, 37, 42, 95, 64, 36, 94, 38,
      44,47,59,60,62,61,63,91,93,92,96,123,125,126,124};
  int i = 0;
  // Serial.println("checking Set1");
  while (i < 47)
    3fb6:	e2 17       	cp	r30, r18
    3fb8:	f3 07       	cpc	r31, r19
    3fba:	d1 f7       	brne	.-12     	; 0x3fb0 <_Z13isFromTheSet1h+0x30>
      return true;
    }

    ++i;
  }
  return false;
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	03 c0       	rjmp	.+6      	; 0x3fc6 <_Z13isFromTheSet1h+0x46>
  {
    if (ch == theSet1[i])
    {
      // Serial.print(String(ch));
      // Serial.println("is from set1");
      return true;
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	01 c0       	rjmp	.+2      	; 0x3fc6 <_Z13isFromTheSet1h+0x46>
    3fc4:	81 e0       	ldi	r24, 0x01	; 1
    }

    ++i;
  }
  return false;
}
    3fc6:	af 96       	adiw	r28, 0x2f	; 47
    3fc8:	cd bf       	out	0x3d, r28	; 61
    3fca:	de bf       	out	0x3e, r29	; 62
    3fcc:	df 91       	pop	r29
    3fce:	cf 91       	pop	r28
    3fd0:	08 95       	ret

00003fd2 <_Z13isFromTheSet2h>:

bool isFromTheSet2(unsigned char ch)
{
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	cd b7       	in	r28, 0x3d	; 61
    3fd8:	de b7       	in	r29, 0x3e	; 62
    3fda:	a7 97       	sbiw	r28, 0x27	; 39
    3fdc:	cd bf       	out	0x3d, r28	; 61
    3fde:	de bf       	out	0x3e, r29	; 62
  const unsigned char theSet1[39] = {
      32, '\0', 191, 40, 41, 46, 33, 44, 10,
      58, 248, 33,
      45, 35, 43, 34, 39, 37, 42, 95, 64, 36, 94, 38,
      44,47,59,60,62,61,63,91,93,92,96,123,125,126,124};
    3fe0:	97 e2       	ldi	r25, 0x27	; 39
    3fe2:	ed ea       	ldi	r30, 0xAD	; 173
    3fe4:	f0 e2       	ldi	r31, 0x20	; 32
    3fe6:	de 01       	movw	r26, r28
    3fe8:	11 96       	adiw	r26, 0x01	; 1
    3fea:	01 90       	ld	r0, Z+
    3fec:	0d 92       	st	X+, r0
    3fee:	9a 95       	dec	r25
    3ff0:	e1 f7       	brne	.-8      	; 0x3fea <_Z13isFromTheSet2h+0x18>
  // Serial.println("checking Set2");

  int i = 0;
  while (i < 39)
  {
    if (ch == theSet1[i])
    3ff2:	99 81       	ldd	r25, Y+1	; 0x01
    3ff4:	89 17       	cp	r24, r25
    3ff6:	69 f0       	breq	.+26     	; 0x4012 <__stack+0x13>
    3ff8:	fe 01       	movw	r30, r28
    3ffa:	32 96       	adiw	r30, 0x02	; 2
    3ffc:	9e 01       	movw	r18, r28
    3ffe:	28 5d       	subi	r18, 0xD8	; 216
    4000:	3f 4f       	sbci	r19, 0xFF	; 255
    4002:	91 91       	ld	r25, Z+
    4004:	98 17       	cp	r25, r24
    4006:	39 f0       	breq	.+14     	; 0x4016 <__stack+0x17>
      45, 35, 43, 34, 39, 37, 42, 95, 64, 36, 94, 38,
      44,47,59,60,62,61,63,91,93,92,96,123,125,126,124};
  // Serial.println("checking Set2");

  int i = 0;
  while (i < 39)
    4008:	e2 17       	cp	r30, r18
    400a:	f3 07       	cpc	r31, r19
    400c:	d1 f7       	brne	.-12     	; 0x4002 <__stack+0x3>
      // Serial.println("is from set2");
      return true;
    }
    ++i;
  }
  return false;
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	03 c0       	rjmp	.+6      	; 0x4018 <__stack+0x19>
  {
    if (ch == theSet1[i])
    {
      // Serial.print(String(ch));
      // Serial.println("is from set2");
      return true;
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	01 c0       	rjmp	.+2      	; 0x4018 <__stack+0x19>
    4016:	81 e0       	ldi	r24, 0x01	; 1
    }
    ++i;
  }
  return false;
}
    4018:	a7 96       	adiw	r28, 0x27	; 39
    401a:	cd bf       	out	0x3d, r28	; 61
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	08 95       	ret

00004024 <_Z9FindGlyphh>:

int FindGlyph(unsigned char chFind)
{
  for (int i = 0; i < N_DISTINCT_CHARACTERS; i++)
  {
    if (prForms[i].AsciiCode == chFind)
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	81 3c       	cpi	r24, 0xC1	; 193
    4028:	91 05       	cpc	r25, r1
    402a:	91 f0       	breq	.+36     	; 0x4050 <_Z9FindGlyphh+0x2c>
    402c:	ea e9       	ldi	r30, 0x9A	; 154
    402e:	f4 e2       	ldi	r31, 0x24	; 36
  return false;
}

int FindGlyph(unsigned char chFind)
{
  for (int i = 0; i < N_DISTINCT_CHARACTERS; i++)
    4030:	21 e0       	ldi	r18, 0x01	; 1
    4032:	30 e0       	ldi	r19, 0x00	; 0
  {
    if (prForms[i].AsciiCode == chFind)
    4034:	40 81       	ld	r20, Z
    4036:	51 81       	ldd	r21, Z+1	; 0x01
    4038:	48 17       	cp	r20, r24
    403a:	59 07       	cpc	r21, r25
    403c:	61 f0       	breq	.+24     	; 0x4056 <_Z9FindGlyphh+0x32>
  return false;
}

int FindGlyph(unsigned char chFind)
{
  for (int i = 0; i < N_DISTINCT_CHARACTERS; i++)
    403e:	2f 5f       	subi	r18, 0xFF	; 255
    4040:	3f 4f       	sbci	r19, 0xFF	; 255
    4042:	3c 96       	adiw	r30, 0x0c	; 12
    4044:	2b 35       	cpi	r18, 0x5B	; 91
    4046:	31 05       	cpc	r19, r1
    4048:	a9 f7       	brne	.-22     	; 0x4034 <_Z9FindGlyphh+0x10>
    {
      return i;
      break;
    }
  }
  return -1;
    404a:	8f ef       	ldi	r24, 0xFF	; 255
    404c:	9f ef       	ldi	r25, 0xFF	; 255
    404e:	08 95       	ret
  return false;
}

int FindGlyph(unsigned char chFind)
{
  for (int i = 0; i < N_DISTINCT_CHARACTERS; i++)
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	08 95       	ret
    4056:	82 2f       	mov	r24, r18
    4058:	93 2f       	mov	r25, r19
      return i;
      break;
    }
  }
  return -1;
}
    405a:	08 95       	ret

0000405c <_Z7utf8revPc>:
  utf8rev((char *)prBuffer.c_str());
  return prBuffer;
}

void utf8rev(char *str)
{
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	ac 01       	movw	r20, r24
  /* this assumes that str is valid UTF-8 */
  char *scanl, *scanr, *scanr2, c;
  /* first reverse the string */
  for (scanl = str, scanr = str + strlen(str); scanl < scanr;)
    4062:	fc 01       	movw	r30, r24
    4064:	01 90       	ld	r0, Z+
    4066:	00 20       	and	r0, r0
    4068:	e9 f7       	brne	.-6      	; 0x4064 <_Z7utf8revPc+0x8>
    406a:	31 97       	sbiw	r30, 0x01	; 1
    406c:	8e 17       	cp	r24, r30
    406e:	9f 07       	cpc	r25, r31
    4070:	10 f0       	brcs	.+4      	; 0x4076 <_Z7utf8revPc+0x1a>
        c = *scanl, *scanl++ = *--scanr, *scanr = c; // fallthrough
      case 3:                                        // fallthrough
      case 2:
        c = *scanl, *scanl++ = *--scanr, *scanr = c;
      }
      scanr = scanl = scanr2;
    4072:	fa 01       	movw	r30, r20
    4074:	0e c0       	rjmp	.+28     	; 0x4092 <_Z7utf8revPc+0x36>
    4076:	ec 01       	movw	r28, r24
void utf8rev(char *str)
{
  /* this assumes that str is valid UTF-8 */
  char *scanl, *scanr, *scanr2, c;
  /* first reverse the string */
  for (scanl = str, scanr = str + strlen(str); scanl < scanr;)
    4078:	dc 01       	movw	r26, r24
    c = *scanl, *scanl++ = *--scanr, *scanr = c;
    407a:	9d 91       	ld	r25, X+
    407c:	22 91       	ld	r18, -Z
    407e:	29 93       	st	Y+, r18
    4080:	90 83       	st	Z, r25
void utf8rev(char *str)
{
  /* this assumes that str is valid UTF-8 */
  char *scanl, *scanr, *scanr2, c;
  /* first reverse the string */
  for (scanl = str, scanr = str + strlen(str); scanl < scanr;)
    4082:	ae 17       	cp	r26, r30
    4084:	bf 07       	cpc	r27, r31
    4086:	c8 f3       	brcs	.-14     	; 0x407a <_Z7utf8revPc+0x1e>
    4088:	f4 cf       	rjmp	.-24     	; 0x4072 <_Z7utf8revPc+0x16>
    c = *scanl, *scanl++ = *--scanr, *scanr = c;
  /* then scan all bytes and reverse each multibyte character */
  for (scanl = scanr = str; (c = *scanr++);)
  {
    if ((c & 0x80) == 0) // ASCII char
      scanl = scanr;
    408a:	a9 01       	movw	r20, r18
    408c:	01 c0       	rjmp	.+2      	; 0x4090 <_Z7utf8revPc+0x34>
        c = *scanl, *scanl++ = *--scanr, *scanr = c; // fallthrough
      case 3:                                        // fallthrough
      case 2:
        c = *scanl, *scanl++ = *--scanr, *scanr = c;
      }
      scanr = scanl = scanr2;
    408e:	a9 01       	movw	r20, r18
    4090:	f9 01       	movw	r30, r18
  char *scanl, *scanr, *scanr2, c;
  /* first reverse the string */
  for (scanl = str, scanr = str + strlen(str); scanl < scanr;)
    c = *scanl, *scanl++ = *--scanr, *scanr = c;
  /* then scan all bytes and reverse each multibyte character */
  for (scanl = scanr = str; (c = *scanr++);)
    4092:	9f 01       	movw	r18, r30
    4094:	2f 5f       	subi	r18, 0xFF	; 255
    4096:	3f 4f       	sbci	r19, 0xFF	; 255
    4098:	90 81       	ld	r25, Z
    409a:	99 23       	and	r25, r25
    409c:	09 f1       	breq	.+66     	; 0x40e0 <_Z7utf8revPc+0x84>
  {
    if ((c & 0x80) == 0) // ASCII char
    409e:	ac f7       	brge	.-22     	; 0x408a <_Z7utf8revPc+0x2e>
      scanl = scanr;
    else if ((c & 0xc0) == 0xc0)
    40a0:	89 2f       	mov	r24, r25
    40a2:	80 7c       	andi	r24, 0xC0	; 192
    40a4:	80 3c       	cpi	r24, 0xC0	; 192
    40a6:	a1 f7       	brne	.-24     	; 0x4090 <_Z7utf8revPc+0x34>
    { // start of multibyte
      scanr2 = scanr;
      switch (scanr - scanl)
    40a8:	b9 01       	movw	r22, r18
    40aa:	64 1b       	sub	r22, r20
    40ac:	75 0b       	sbc	r23, r21
    40ae:	62 30       	cpi	r22, 0x02	; 2
    40b0:	71 05       	cpc	r23, r1
    40b2:	6c f3       	brlt	.-38     	; 0x408e <_Z7utf8revPc+0x32>
    40b4:	64 30       	cpi	r22, 0x04	; 4
    40b6:	71 05       	cpc	r23, r1
    40b8:	5c f0       	brlt	.+22     	; 0x40d0 <_Z7utf8revPc+0x74>
    40ba:	64 30       	cpi	r22, 0x04	; 4
    40bc:	71 05       	cpc	r23, r1
    40be:	39 f7       	brne	.-50     	; 0x408e <_Z7utf8revPc+0x32>
      {
      case 4:
        c = *scanl, *scanl++ = *--scanr, *scanr = c; // fallthrough
    40c0:	ea 01       	movw	r28, r20
    40c2:	89 91       	ld	r24, Y+
    40c4:	be 01       	movw	r22, r28
    40c6:	ea 01       	movw	r28, r20
    40c8:	98 83       	st	Y, r25
    40ca:	80 83       	st	Z, r24
    40cc:	ab 01       	movw	r20, r22
    40ce:	01 c0       	rjmp	.+2      	; 0x40d2 <_Z7utf8revPc+0x76>
  char *scanl, *scanr, *scanr2, c;
  /* first reverse the string */
  for (scanl = str, scanr = str + strlen(str); scanl < scanr;)
    c = *scanl, *scanl++ = *--scanr, *scanr = c;
  /* then scan all bytes and reverse each multibyte character */
  for (scanl = scanr = str; (c = *scanr++);)
    40d0:	f9 01       	movw	r30, r18
      {
      case 4:
        c = *scanl, *scanl++ = *--scanr, *scanr = c; // fallthrough
      case 3:                                        // fallthrough
      case 2:
        c = *scanl, *scanl++ = *--scanr, *scanr = c;
    40d2:	da 01       	movw	r26, r20
    40d4:	8c 91       	ld	r24, X
    40d6:	92 91       	ld	r25, -Z
    40d8:	9c 93       	st	X, r25
    40da:	80 83       	st	Z, r24
      }
      scanr = scanl = scanr2;
    40dc:	a9 01       	movw	r20, r18
    40de:	d8 cf       	rjmp	.-80     	; 0x4090 <_Z7utf8revPc+0x34>
    }
  }
}
    40e0:	df 91       	pop	r29
    40e2:	cf 91       	pop	r28
    40e4:	08 95       	ret

000040e6 <_Z10prReshaperPKc>:
  }
  return -1;
}

String prReshaper(const char *Text)
{
    40e6:	9f 92       	push	r9
    40e8:	af 92       	push	r10
    40ea:	bf 92       	push	r11
    40ec:	cf 92       	push	r12
    40ee:	df 92       	push	r13
    40f0:	ef 92       	push	r14
    40f2:	ff 92       	push	r15
    40f4:	0f 93       	push	r16
    40f6:	1f 93       	push	r17
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	7c 01       	movw	r14, r24
    40fe:	8b 01       	movw	r16, r22

  String prBuffer = "";
    4100:	6e ee       	ldi	r22, 0xEE	; 238
    4102:	78 e2       	ldi	r23, 0x28	; 40
    4104:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <_ZN6StringC1EPKc>
  int stat = 0;
  unsigned char pLetter = ' '; // Previous word
    4108:	68 94       	set
    410a:	dd 24       	eor	r13, r13
    410c:	d5 f8       	bld	r13, 5
      }
      else if (letter == 166)
      {
        if (temp == 218 || temp == 250)
        { //چ
          letter = 141;
    410e:	0f 2e       	mov	r0, r31
    4110:	fd e8       	ldi	r31, 0x8D	; 141
    4112:	9f 2e       	mov	r9, r31
    4114:	f0 2d       	mov	r31, r0
        }
        else
        {
          letter = 228; //ن
    4116:	0f 2e       	mov	r0, r31
    4118:	f4 ee       	ldi	r31, 0xE4	; 228
    411a:	af 2e       	mov	r10, r31
    411c:	f0 2d       	mov	r31, r0
      temp += 32;
      if (letter == 207)
      {
        if (temp == 218 || temp == 250)
        {
          letter = 144; //گ
    411e:	0f 2e       	mov	r0, r31
    4120:	f0 e9       	ldi	r31, 0x90	; 144
    4122:	bf 2e       	mov	r11, r31
    4124:	f0 2d       	mov	r31, r0
    else
      stat = 3; // Medial

    int number = FindGlyph(letter);

    switch (stat)
    4126:	cc 24       	eor	r12, r12
    4128:	c3 94       	inc	r12
  unsigned char pLetter = ' '; // Previous word
  unsigned char letter;        // Letter
  unsigned char nLetter;       // Next word
  unsigned char temp;

  while ((temp = *Text++))
    412a:	f8 01       	movw	r30, r16
    412c:	c0 81       	ld	r28, Z
    412e:	cc 23       	and	r28, r28
    4130:	09 f4       	brne	.+2      	; 0x4134 <_Z10prReshaperPKc+0x4e>
    4132:	d6 c0       	rjmp	.+428    	; 0x42e0 <_Z10prReshaperPKc+0x1fa>
    if (temp >= '0' && temp <= '9')
    {
      // d = temp - '0';
      letter = temp;
    }
    else if (temp >= 128)
    4134:	dc f4       	brge	.+54     	; 0x416c <_Z10prReshaperPKc+0x86>
    {
      letter = *Text++;
    4136:	98 01       	movw	r18, r16
    4138:	2e 5f       	subi	r18, 0xFE	; 254
    413a:	3f 4f       	sbci	r19, 0xFF	; 255
      letter += 32;
    413c:	91 81       	ldd	r25, Z+1	; 0x01
    413e:	90 5e       	subi	r25, 0xE0	; 224
      temp += 32;
    4140:	80 e2       	ldi	r24, 0x20	; 32
    4142:	8c 0f       	add	r24, r28
      if (letter == 207)
    4144:	9f 3c       	cpi	r25, 0xCF	; 207
    4146:	41 f4       	brne	.+16     	; 0x4158 <_Z10prReshaperPKc+0x72>
      {
        if (temp == 218 || temp == 250)
    4148:	8a 3d       	cpi	r24, 0xDA	; 218
    414a:	09 f4       	brne	.+2      	; 0x414e <_Z10prReshaperPKc+0x68>
    414c:	ae c0       	rjmp	.+348    	; 0x42aa <_Z10prReshaperPKc+0x1c4>
    414e:	8a 3f       	cpi	r24, 0xFA	; 250
    4150:	09 f0       	breq	.+2      	; 0x4154 <_Z10prReshaperPKc+0x6e>
    4152:	ad c0       	rjmp	.+346    	; 0x42ae <_Z10prReshaperPKc+0x1c8>
        {
          letter = 144; //گ
    4154:	cb 2d       	mov	r28, r11
    4156:	b0 c0       	rjmp	.+352    	; 0x42b8 <_Z10prReshaperPKc+0x1d2>
        }
      }
      else if (letter == 166)
    4158:	96 3a       	cpi	r25, 0xA6	; 166
    415a:	61 f4       	brne	.+24     	; 0x4174 <_Z10prReshaperPKc+0x8e>
      {
        if (temp == 218 || temp == 250)
    415c:	8a 3d       	cpi	r24, 0xDA	; 218
    415e:	09 f4       	brne	.+2      	; 0x4162 <_Z10prReshaperPKc+0x7c>
    4160:	a8 c0       	rjmp	.+336    	; 0x42b2 <_Z10prReshaperPKc+0x1cc>
    4162:	8a 3f       	cpi	r24, 0xFA	; 250
    4164:	09 f4       	brne	.+2      	; 0x4168 <_Z10prReshaperPKc+0x82>
    4166:	a7 c0       	rjmp	.+334    	; 0x42b6 <_Z10prReshaperPKc+0x1d0>
        { //چ
          letter = 141;
        }
        else
        {
          letter = 228; //ن
    4168:	ca 2d       	mov	r28, r10
    416a:	a6 c0       	rjmp	.+332    	; 0x42b8 <_Z10prReshaperPKc+0x1d2>
  unsigned char pLetter = ' '; // Previous word
  unsigned char letter;        // Letter
  unsigned char nLetter;       // Next word
  unsigned char temp;

  while ((temp = *Text++))
    416c:	0f 5f       	subi	r16, 0xFF	; 255
    416e:	1f 4f       	sbci	r17, 0xFF	; 255
    4170:	8c 2f       	mov	r24, r28
    4172:	02 c0       	rjmp	.+4      	; 0x4178 <_Z10prReshaperPKc+0x92>
      letter = temp;
    }
    else if (temp >= 128)
    {
      letter = *Text++;
      letter += 32;
    4174:	c9 2f       	mov	r28, r25
      // d = temp - '0';
      letter = temp;
    }
    else if (temp >= 128)
    {
      letter = *Text++;
    4176:	89 01       	movw	r16, r18
    else
    {
      letter = temp;
    }
    //
    if (letter == 172)
    4178:	cc 3a       	cpi	r28, 0xAC	; 172
    417a:	39 f4       	brne	.+14     	; 0x418a <_Z10prReshaperPKc+0xa4>
    {
      if (temp == 248 || temp == 32)
    417c:	88 3f       	cpi	r24, 0xF8	; 248
    417e:	21 f0       	breq	.+8      	; 0x4188 <_Z10prReshaperPKc+0xa2>
    4180:	80 32       	cpi	r24, 0x20	; 32
    4182:	19 f4       	brne	.+6      	; 0x418a <_Z10prReshaperPKc+0xa4>
      {
        letter = 44;
    4184:	cc e2       	ldi	r28, 0x2C	; 44
    4186:	01 c0       	rjmp	.+2      	; 0x418a <_Z10prReshaperPKc+0xa4>
    4188:	cc e2       	ldi	r28, 0x2C	; 44
      }
    }
    temp = *Text++;
    418a:	f8 01       	movw	r30, r16
    418c:	d0 81       	ld	r29, Z
    if (temp >= 128)
    418e:	dd 23       	and	r29, r29
    4190:	c4 f4       	brge	.+48     	; 0x41c2 <_Z10prReshaperPKc+0xdc>
    {
      nLetter = *Text++;
    4192:	91 81       	ldd	r25, Z+1	; 0x01
      nLetter += 32;
    4194:	90 5e       	subi	r25, 0xE0	; 224
      temp += 32;
    4196:	80 e2       	ldi	r24, 0x20	; 32
    4198:	8d 0f       	add	r24, r29
      if (nLetter == 207)
    419a:	9f 3c       	cpi	r25, 0xCF	; 207
    419c:	41 f4       	brne	.+16     	; 0x41ae <_Z10prReshaperPKc+0xc8>
      {
        if (temp == 218 || temp == 250)
    419e:	8a 3d       	cpi	r24, 0xDA	; 218
    41a0:	09 f4       	brne	.+2      	; 0x41a4 <_Z10prReshaperPKc+0xbe>
    41a2:	8c c0       	rjmp	.+280    	; 0x42bc <_Z10prReshaperPKc+0x1d6>
    41a4:	8a 3f       	cpi	r24, 0xFA	; 250
    41a6:	09 f0       	breq	.+2      	; 0x41aa <_Z10prReshaperPKc+0xc4>
    41a8:	8b c0       	rjmp	.+278    	; 0x42c0 <_Z10prReshaperPKc+0x1da>
        {
          nLetter = 144; //گ
    41aa:	db 2d       	mov	r29, r11
    41ac:	16 c0       	rjmp	.+44     	; 0x41da <_Z10prReshaperPKc+0xf4>
        }
      }
      else if (nLetter == 166)
    41ae:	96 3a       	cpi	r25, 0xA6	; 166
    41b0:	51 f4       	brne	.+20     	; 0x41c6 <_Z10prReshaperPKc+0xe0>
      {
        if (temp == 218 || temp == 250)
    41b2:	8a 3d       	cpi	r24, 0xDA	; 218
    41b4:	09 f4       	brne	.+2      	; 0x41b8 <_Z10prReshaperPKc+0xd2>
    41b6:	86 c0       	rjmp	.+268    	; 0x42c4 <_Z10prReshaperPKc+0x1de>
    41b8:	8a 3f       	cpi	r24, 0xFA	; 250
    41ba:	09 f4       	brne	.+2      	; 0x41be <_Z10prReshaperPKc+0xd8>
    41bc:	85 c0       	rjmp	.+266    	; 0x42c8 <_Z10prReshaperPKc+0x1e2>
        { //چ
          nLetter = 141;
        }
        else
        {
          nLetter = 228; //ن
    41be:	da 2d       	mov	r29, r10
    41c0:	0c c0       	rjmp	.+24     	; 0x41da <_Z10prReshaperPKc+0xf4>
      if (temp == 248 || temp == 32)
      {
        letter = 44;
      }
    }
    temp = *Text++;
    41c2:	8d 2f       	mov	r24, r29
    41c4:	01 c0       	rjmp	.+2      	; 0x41c8 <_Z10prReshaperPKc+0xe2>
    if (temp >= 128)
    {
      nLetter = *Text++;
      nLetter += 32;
    41c6:	d9 2f       	mov	r29, r25
    {
      nLetter = temp;
      *Text--;
    }
    //
    if (nLetter == 172)
    41c8:	dc 3a       	cpi	r29, 0xAC	; 172
    41ca:	39 f4       	brne	.+14     	; 0x41da <_Z10prReshaperPKc+0xf4>
    {
      if (temp == 248 || temp == 32)
    41cc:	88 3f       	cpi	r24, 0xF8	; 248
    41ce:	21 f0       	breq	.+8      	; 0x41d8 <_Z10prReshaperPKc+0xf2>
    41d0:	80 32       	cpi	r24, 0x20	; 32
    41d2:	19 f4       	brne	.+6      	; 0x41da <_Z10prReshaperPKc+0xf4>
      {
        nLetter = 44;
    41d4:	dc e2       	ldi	r29, 0x2C	; 44
    41d6:	01 c0       	rjmp	.+2      	; 0x41da <_Z10prReshaperPKc+0xf4>
    41d8:	dc e2       	ldi	r29, 0x2C	; 44
    Final: at the end of the word.
    Medial: at the middle of the word.
    Initial: at the beginning of the word.
    Isolated: the character alone (not part of a word).
    */
    if (isFromTheSet1(pLetter))
    41da:	8d 2d       	mov	r24, r13
    41dc:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <_Z13isFromTheSet1h>
    41e0:	88 23       	and	r24, r24
    41e2:	c9 f0       	breq	.+50     	; 0x4216 <_Z10prReshaperPKc+0x130>
      if (isFromTheSet2(nLetter))
    41e4:	8d 2f       	mov	r24, r29
    41e6:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <_Z13isFromTheSet2h>
    41ea:	d8 2f       	mov	r29, r24
    else if (isFromTheSet2(nLetter))
      stat = 2; // Final
    else
      stat = 3; // Medial

    int number = FindGlyph(letter);
    41ec:	8c 2f       	mov	r24, r28
    41ee:	0e 94 12 20 	call	0x4024	; 0x4024 <_Z9FindGlyphh>

    switch (stat)
    41f2:	dc 25       	eor	r29, r12
    41f4:	2d 2f       	mov	r18, r29
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	21 30       	cpi	r18, 0x01	; 1
    41fa:	31 05       	cpc	r19, r1
    41fc:	19 f1       	breq	.+70     	; 0x4244 <_Z10prReshaperPKc+0x15e>
    41fe:	1c f4       	brge	.+6      	; 0x4206 <_Z10prReshaperPKc+0x120>
    4200:	23 2b       	or	r18, r19
    4202:	79 f0       	breq	.+30     	; 0x4222 <_Z10prReshaperPKc+0x13c>
    4204:	92 cf       	rjmp	.-220    	; 0x412a <_Z10prReshaperPKc+0x44>
    4206:	22 30       	cpi	r18, 0x02	; 2
    4208:	31 05       	cpc	r19, r1
    420a:	69 f1       	breq	.+90     	; 0x4266 <_Z10prReshaperPKc+0x180>
    420c:	23 30       	cpi	r18, 0x03	; 3
    420e:	31 05       	cpc	r19, r1
    4210:	09 f0       	breq	.+2      	; 0x4214 <_Z10prReshaperPKc+0x12e>
    4212:	8b cf       	rjmp	.-234    	; 0x412a <_Z10prReshaperPKc+0x44>
    4214:	39 c0       	rjmp	.+114    	; 0x4288 <_Z10prReshaperPKc+0x1a2>
    if (isFromTheSet1(pLetter))
      if (isFromTheSet2(nLetter))
        stat = 0; // Isolated
      else
        stat = 1; // Initial
    else if (isFromTheSet2(nLetter))
    4216:	8d 2f       	mov	r24, r29
    4218:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <_Z13isFromTheSet2h>
    421c:	81 11       	cpse	r24, r1
    421e:	56 c0       	rjmp	.+172    	; 0x42cc <_Z10prReshaperPKc+0x1e6>
    4220:	59 c0       	rjmp	.+178    	; 0x42d4 <_Z10prReshaperPKc+0x1ee>
    int number = FindGlyph(letter);

    switch (stat)
    {
    case 0: // Isolated
      prBuffer += (char *)(prForms[number].isoGlyph);
    4222:	fc 01       	movw	r30, r24
    4224:	ee 0f       	add	r30, r30
    4226:	ff 1f       	adc	r31, r31
    4228:	e8 0f       	add	r30, r24
    422a:	f9 1f       	adc	r31, r25
    422c:	ee 0f       	add	r30, r30
    422e:	ff 1f       	adc	r31, r31
    4230:	ee 0f       	add	r30, r30
    4232:	ff 1f       	adc	r31, r31
    4234:	e2 57       	subi	r30, 0x72	; 114
    4236:	fb 4d       	sbci	r31, 0xDB	; 219
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
    4238:	64 81       	ldd	r22, Z+4	; 0x04
    423a:	75 81       	ldd	r23, Z+5	; 0x05
    423c:	c7 01       	movw	r24, r14
    423e:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN6String6concatEPKc>
    4242:	4c c0       	rjmp	.+152    	; 0x42dc <_Z10prReshaperPKc+0x1f6>
      break;
    case 1: // Initial
      prBuffer += (char *)(prForms[number].iniGlyph);
    4244:	fc 01       	movw	r30, r24
    4246:	ee 0f       	add	r30, r30
    4248:	ff 1f       	adc	r31, r31
    424a:	e8 0f       	add	r30, r24
    424c:	f9 1f       	adc	r31, r25
    424e:	ee 0f       	add	r30, r30
    4250:	ff 1f       	adc	r31, r31
    4252:	ee 0f       	add	r30, r30
    4254:	ff 1f       	adc	r31, r31
    4256:	e2 57       	subi	r30, 0x72	; 114
    4258:	fb 4d       	sbci	r31, 0xDB	; 219
    425a:	66 81       	ldd	r22, Z+6	; 0x06
    425c:	77 81       	ldd	r23, Z+7	; 0x07
    425e:	c7 01       	movw	r24, r14
    4260:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN6String6concatEPKc>
    4264:	3b c0       	rjmp	.+118    	; 0x42dc <_Z10prReshaperPKc+0x1f6>
      break;
    case 2: // Final
      prBuffer += (char *)(prForms[number].endGlyph);
    4266:	fc 01       	movw	r30, r24
    4268:	ee 0f       	add	r30, r30
    426a:	ff 1f       	adc	r31, r31
    426c:	e8 0f       	add	r30, r24
    426e:	f9 1f       	adc	r31, r25
    4270:	ee 0f       	add	r30, r30
    4272:	ff 1f       	adc	r31, r31
    4274:	ee 0f       	add	r30, r30
    4276:	ff 1f       	adc	r31, r31
    4278:	e2 57       	subi	r30, 0x72	; 114
    427a:	fb 4d       	sbci	r31, 0xDB	; 219
    427c:	62 85       	ldd	r22, Z+10	; 0x0a
    427e:	73 85       	ldd	r23, Z+11	; 0x0b
    4280:	c7 01       	movw	r24, r14
    4282:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN6String6concatEPKc>
    4286:	2a c0       	rjmp	.+84     	; 0x42dc <_Z10prReshaperPKc+0x1f6>
      break;
    case 3: // Medial
      prBuffer += (char *)(prForms[number].midGlyph);
    4288:	fc 01       	movw	r30, r24
    428a:	ee 0f       	add	r30, r30
    428c:	ff 1f       	adc	r31, r31
    428e:	e8 0f       	add	r30, r24
    4290:	f9 1f       	adc	r31, r25
    4292:	ee 0f       	add	r30, r30
    4294:	ff 1f       	adc	r31, r31
    4296:	ee 0f       	add	r30, r30
    4298:	ff 1f       	adc	r31, r31
    429a:	e2 57       	subi	r30, 0x72	; 114
    429c:	fb 4d       	sbci	r31, 0xDB	; 219
    429e:	60 85       	ldd	r22, Z+8	; 0x08
    42a0:	71 85       	ldd	r23, Z+9	; 0x09
    42a2:	c7 01       	movw	r24, r14
    42a4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN6String6concatEPKc>
    42a8:	19 c0       	rjmp	.+50     	; 0x42dc <_Z10prReshaperPKc+0x1f6>
      temp += 32;
      if (letter == 207)
      {
        if (temp == 218 || temp == 250)
        {
          letter = 144; //گ
    42aa:	cb 2d       	mov	r28, r11
    42ac:	05 c0       	rjmp	.+10     	; 0x42b8 <_Z10prReshaperPKc+0x1d2>
      letter = temp;
    }
    else if (temp >= 128)
    {
      letter = *Text++;
      letter += 32;
    42ae:	c9 2f       	mov	r28, r25
    42b0:	03 c0       	rjmp	.+6      	; 0x42b8 <_Z10prReshaperPKc+0x1d2>
      }
      else if (letter == 166)
      {
        if (temp == 218 || temp == 250)
        { //چ
          letter = 141;
    42b2:	c9 2d       	mov	r28, r9
    42b4:	01 c0       	rjmp	.+2      	; 0x42b8 <_Z10prReshaperPKc+0x1d2>
    42b6:	c9 2d       	mov	r28, r9
    //
    if (letter == 172)
    {
      if (temp == 248 || temp == 32)
      {
        letter = 44;
    42b8:	89 01       	movw	r16, r18
    42ba:	67 cf       	rjmp	.-306    	; 0x418a <_Z10prReshaperPKc+0xa4>
      temp += 32;
      if (nLetter == 207)
      {
        if (temp == 218 || temp == 250)
        {
          nLetter = 144; //گ
    42bc:	db 2d       	mov	r29, r11
    42be:	8d cf       	rjmp	.-230    	; 0x41da <_Z10prReshaperPKc+0xf4>
    }
    temp = *Text++;
    if (temp >= 128)
    {
      nLetter = *Text++;
      nLetter += 32;
    42c0:	d9 2f       	mov	r29, r25
    42c2:	8b cf       	rjmp	.-234    	; 0x41da <_Z10prReshaperPKc+0xf4>
      }
      else if (nLetter == 166)
      {
        if (temp == 218 || temp == 250)
        { //چ
          nLetter = 141;
    42c4:	d9 2d       	mov	r29, r9
    42c6:	89 cf       	rjmp	.-238    	; 0x41da <_Z10prReshaperPKc+0xf4>
    42c8:	d9 2d       	mov	r29, r9
    42ca:	87 cf       	rjmp	.-242    	; 0x41da <_Z10prReshaperPKc+0xf4>
    else if (isFromTheSet2(nLetter))
      stat = 2; // Final
    else
      stat = 3; // Medial

    int number = FindGlyph(letter);
    42cc:	8c 2f       	mov	r24, r28
    42ce:	0e 94 12 20 	call	0x4024	; 0x4024 <_Z9FindGlyphh>
    42d2:	c9 cf       	rjmp	.-110    	; 0x4266 <_Z10prReshaperPKc+0x180>
    42d4:	8c 2f       	mov	r24, r28
    42d6:	0e 94 12 20 	call	0x4024	; 0x4024 <_Z9FindGlyphh>
    42da:	d6 cf       	rjmp	.-84     	; 0x4288 <_Z10prReshaperPKc+0x1a2>
      isunk = 1;
      break;
    }

    if (isunk == 0)
      pLetter = letter;
    42dc:	dc 2e       	mov	r13, r28
    42de:	25 cf       	rjmp	.-438    	; 0x412a <_Z10prReshaperPKc+0x44>
  }
  utf8rev((char *)prBuffer.c_str());
    42e0:	f7 01       	movw	r30, r14
    42e2:	80 81       	ld	r24, Z
    42e4:	91 81       	ldd	r25, Z+1	; 0x01
    42e6:	0e 94 2e 20 	call	0x405c	; 0x405c <_Z7utf8revPc>
  return prBuffer;
}
    42ea:	c7 01       	movw	r24, r14
    42ec:	df 91       	pop	r29
    42ee:	cf 91       	pop	r28
    42f0:	1f 91       	pop	r17
    42f2:	0f 91       	pop	r16
    42f4:	ff 90       	pop	r15
    42f6:	ef 90       	pop	r14
    42f8:	df 90       	pop	r13
    42fa:	cf 90       	pop	r12
    42fc:	bf 90       	pop	r11
    42fe:	af 90       	pop	r10
    4300:	9f 90       	pop	r9
    4302:	08 95       	ret

00004304 <_Z9avr_delayP11u8x8_structhhPv>:

uint8_t avr_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
	uint8_t cycles;

	switch(msg)
    4304:	6a 32       	cpi	r22, 0x2A	; 42
    4306:	51 f0       	breq	.+20     	; 0x431c <_Z9avr_delayP11u8x8_structhhPv+0x18>
    4308:	18 f4       	brcc	.+6      	; 0x4310 <_Z9avr_delayP11u8x8_structhhPv+0xc>
    430a:	69 32       	cpi	r22, 0x29	; 41
    430c:	71 f0       	breq	.+28     	; 0x432a <_Z9avr_delayP11u8x8_structhhPv+0x26>
    430e:	3c c0       	rjmp	.+120    	; 0x4388 <_Z9avr_delayP11u8x8_structhhPv+0x84>
    4310:	6b 32       	cpi	r22, 0x2B	; 43
    4312:	91 f0       	breq	.+36     	; 0x4338 <_Z9avr_delayP11u8x8_structhhPv+0x34>
    4314:	6c 32       	cpi	r22, 0x2C	; 44
    4316:	c1 f5       	brne	.+112    	; 0x4388 <_Z9avr_delayP11u8x8_structhhPv+0x84>
		_delay_ms(1);
		break;
		default:
		return 0;
	}
	return 1;
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	08 95       	ret
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (cycles) : "0" (cycles) // 2 cycles
		);
		break;
		case U8X8_MSG_DELAY_10MICRO:    // delay arg_int * 10 micro seconds
		for(int i=0 ; i < arg_int ; i++)
    431c:	50 e0       	ldi	r21, 0x00	; 0
    431e:	14 16       	cp	r1, r20
    4320:	15 06       	cpc	r1, r21
    4322:	a4 f5       	brge	.+104    	; 0x438c <_Z9avr_delayP11u8x8_structhhPv+0x88>
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	1a c0       	rjmp	.+52     	; 0x435e <_Z9avr_delayP11u8x8_structhhPv+0x5a>
		_delay_us(10);
		break;
		case U8X8_MSG_DELAY_MILLI:      // delay arg_int * 1 milli second
		for(int i=0 ; i < arg_int ; i++)
    432a:	50 e0       	ldi	r21, 0x00	; 0
    432c:	14 16       	cp	r1, r20
    432e:	15 06       	cpc	r1, r21
    4330:	7c f5       	brge	.+94     	; 0x4390 <_Z9avr_delayP11u8x8_structhhPv+0x8c>
    4332:	80 e0       	ldi	r24, 0x00	; 0
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	1c c0       	rjmp	.+56     	; 0x4370 <_Z9avr_delayP11u8x8_structhhPv+0x6c>
		#define CALL_CYCLES 26UL
		#define CALC_CYCLES 4UL
		#define RETURN_CYCLES 4UL
		#define CYCLES_PER_LOOP 4UL

		cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    4338:	24 2f       	mov	r18, r20
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	a4 e6       	ldi	r26, 0x64	; 100
    433e:	b0 e0       	ldi	r27, 0x00	; 0
    4340:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <__umulhisi3>
    4344:	28 ef       	ldi	r18, 0xF8	; 248
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e0       	ldi	r20, 0x00	; 0
    434a:	50 e0       	ldi	r21, 0x00	; 0
    434c:	0e 94 c0 24 	call	0x4980	; 0x4980 <__udivmodsi4>

		if(cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    4350:	23 32       	cpi	r18, 0x23	; 35
    4352:	00 f5       	brcc	.+64     	; 0x4394 <_Z9avr_delayP11u8x8_structhhPv+0x90>
		break;

		__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (cycles) : "0" (cycles) // 2 cycles
		);
    4354:	82 2f       	mov	r24, r18
    4356:	01 97       	sbiw	r24, 0x01	; 1
    4358:	f1 f7       	brne	.-4      	; 0x4356 <_Z9avr_delayP11u8x8_structhhPv+0x52>
		_delay_ms(1);
		break;
		default:
		return 0;
	}
	return 1;
    435a:	81 e0       	ldi	r24, 0x01	; 1

		__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (cycles) : "0" (cycles) // 2 cycles
		);
		break;
    435c:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    435e:	25 e3       	ldi	r18, 0x35	; 53
    4360:	2a 95       	dec	r18
    4362:	f1 f7       	brne	.-4      	; 0x4360 <_Z9avr_delayP11u8x8_structhhPv+0x5c>
    4364:	00 00       	nop
		case U8X8_MSG_DELAY_10MICRO:    // delay arg_int * 10 micro seconds
		for(int i=0 ; i < arg_int ; i++)
    4366:	01 96       	adiw	r24, 0x01	; 1
    4368:	84 17       	cp	r24, r20
    436a:	95 07       	cpc	r25, r21
    436c:	c1 f7       	brne	.-16     	; 0x435e <_Z9avr_delayP11u8x8_structhhPv+0x5a>
    436e:	14 c0       	rjmp	.+40     	; 0x4398 <_Z9avr_delayP11u8x8_structhhPv+0x94>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4370:	ef e9       	ldi	r30, 0x9F	; 159
    4372:	ff e0       	ldi	r31, 0x0F	; 15
    4374:	31 97       	sbiw	r30, 0x01	; 1
    4376:	f1 f7       	brne	.-4      	; 0x4374 <_Z9avr_delayP11u8x8_structhhPv+0x70>
    4378:	00 c0       	rjmp	.+0      	; 0x437a <_Z9avr_delayP11u8x8_structhhPv+0x76>
    437a:	00 00       	nop
		_delay_us(10);
		break;
		case U8X8_MSG_DELAY_MILLI:      // delay arg_int * 1 milli second
		for(int i=0 ; i < arg_int ; i++)
    437c:	01 96       	adiw	r24, 0x01	; 1
    437e:	84 17       	cp	r24, r20
    4380:	95 07       	cpc	r25, r21
    4382:	b1 f7       	brne	.-20     	; 0x4370 <_Z9avr_delayP11u8x8_structhhPv+0x6c>
		_delay_ms(1);
		break;
		default:
		return 0;
	}
	return 1;
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	08 95       	ret
		case U8X8_MSG_DELAY_MILLI:      // delay arg_int * 1 milli second
		for(int i=0 ; i < arg_int ; i++)
		_delay_ms(1);
		break;
		default:
		return 0;
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	08 95       	ret
	}
	return 1;
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	08 95       	ret
    4390:	81 e0       	ldi	r24, 0x01	; 1
    4392:	08 95       	ret
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	08 95       	ret
    4398:	81 e0       	ldi	r24, 0x01	; 1
}
    439a:	08 95       	ret

0000439c <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv>:

uint8_t ST7565Lcd::gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, U8X8_UNUSED void *arg_ptr){
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
		switch(msg)
    43a0:	61 34       	cpi	r22, 0x41	; 65
    43a2:	61 f1       	breq	.+88     	; 0x43fc <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x60>
    43a4:	28 f4       	brcc	.+10     	; 0x43b0 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x14>
    43a6:	68 32       	cpi	r22, 0x28	; 40
    43a8:	61 f0       	breq	.+24     	; 0x43c2 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x26>
    43aa:	60 34       	cpi	r22, 0x40	; 64
    43ac:	e9 f0       	breq	.+58     	; 0x43e8 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x4c>
    43ae:	4e c0       	rjmp	.+156    	; 0x444c <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xb0>
    43b0:	6a 34       	cpi	r22, 0x4A	; 74
    43b2:	c1 f1       	breq	.+112    	; 0x4424 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x88>
    43b4:	6b 34       	cpi	r22, 0x4B	; 75
    43b6:	09 f4       	brne	.+2      	; 0x43ba <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x1e>
    43b8:	3f c0       	rjmp	.+126    	; 0x4438 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x9c>
    43ba:	69 34       	cpi	r22, 0x49	; 73
    43bc:	09 f0       	breq	.+2      	; 0x43c0 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x24>
    43be:	46 c0       	rjmp	.+140    	; 0x444c <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xb0>
    43c0:	27 c0       	rjmp	.+78     	; 0x4410 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x74>
		/*DISPLAY_CLK_DIR |= 1<<DISPLAY_CLK_PIN;
		DISPLAY_DATA_DIR |= 1<<DISPLAY_DATA_PIN;
		DISPLAY_CS_DIR |= 1<<DISPLAY_CS_PIN;
		DISPLAY_DC_DIR |= 1<<DISPLAY_DC_PIN;
		DISPLAY_RESET_DIR |= 1<<DISPLAY_RESET_PIN;*/
		DISPLAY_CLK_CONFIG();
    43c2:	e0 e6       	ldi	r30, 0x60	; 96
    43c4:	f6 e0       	ldi	r31, 0x06	; 6
    43c6:	80 e8       	ldi	r24, 0x80	; 128
    43c8:	81 83       	std	Z+1, r24	; 0x01
    43ca:	83 e1       	ldi	r24, 0x13	; 19
    43cc:	87 8b       	std	Z+23, r24	; 0x17
		DISPLAY_DATA_CONFIG();
    43ce:	90 e2       	ldi	r25, 0x20	; 32
    43d0:	91 83       	std	Z+1, r25	; 0x01
    43d2:	85 8b       	std	Z+21, r24	; 0x15
		DISPLAY_CS_CONFIG();
    43d4:	90 e1       	ldi	r25, 0x10	; 16
    43d6:	91 83       	std	Z+1, r25	; 0x01
    43d8:	84 8b       	std	Z+20, r24	; 0x14
		DISPLAY_DS_CONFIG();
    43da:	92 e0       	ldi	r25, 0x02	; 2
    43dc:	91 83       	std	Z+1, r25	; 0x01
    43de:	81 8b       	std	Z+17, r24	; 0x11
		DISPLAY_RESET_CONFIG();
    43e0:	91 e0       	ldi	r25, 0x01	; 1
    43e2:	91 83       	std	Z+1, r25	; 0x01
    43e4:	80 8b       	std	Z+16, r24	; 0x10
		break;              // can be used to setup pins
    43e6:	39 c0       	rjmp	.+114    	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		case U8X8_MSG_GPIO_SPI_CLOCK:        // Clock pin: Output level in arg_int
		if(arg_int)
    43e8:	44 23       	and	r20, r20
    43ea:	21 f0       	breq	.+8      	; 0x43f4 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x58>
		{
			DISPLAY_CLK_SET();
    43ec:	80 e8       	ldi	r24, 0x80	; 128
    43ee:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    43f2:	33 c0       	rjmp	.+102    	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		}else
			DISPLAY_CLK_RESET();
    43f4:	80 e8       	ldi	r24, 0x80	; 128
    43f6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    43fa:	2f c0       	rjmp	.+94     	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		break;
		case U8X8_MSG_GPIO_SPI_DATA:        // MOSI pin: Output level in arg_int
		if(arg_int){
    43fc:	44 23       	and	r20, r20
    43fe:	21 f0       	breq	.+8      	; 0x4408 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x6c>
		DISPLAY_DATA_SET();
    4400:	80 e2       	ldi	r24, 0x20	; 32
    4402:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    4406:	29 c0       	rjmp	.+82     	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		}else
		DISPLAY_DATA_RESET();
    4408:	80 e2       	ldi	r24, 0x20	; 32
    440a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    440e:	25 c0       	rjmp	.+74     	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		break;
		case U8X8_MSG_GPIO_CS:        // CS (chip select) pin: Output level in arg_int
		if(arg_int){
    4410:	44 23       	and	r20, r20
    4412:	21 f0       	breq	.+8      	; 0x441c <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x80>
		DISPLAY_CS_SET();
    4414:	80 e1       	ldi	r24, 0x10	; 16
    4416:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    441a:	1f c0       	rjmp	.+62     	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		}else
		DISPLAY_CS_RESET();
    441c:	80 e1       	ldi	r24, 0x10	; 16
    441e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    4422:	1b c0       	rjmp	.+54     	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		break;
		case U8X8_MSG_GPIO_DC:        // DC (data/cmd, A0, register select) pin: Output level in arg_int
		if(arg_int){
    4424:	44 23       	and	r20, r20
    4426:	21 f0       	breq	.+8      	; 0x4430 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0x94>
		DISPLAY_DS_SET();
    4428:	82 e0       	ldi	r24, 0x02	; 2
    442a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    442e:	15 c0       	rjmp	.+42     	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		}else
		DISPLAY_DS_RESET();
    4430:	82 e0       	ldi	r24, 0x02	; 2
    4432:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    4436:	11 c0       	rjmp	.+34     	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		break;
		
		case U8X8_MSG_GPIO_RESET:     // Reset pin: Output level in arg_int
		if(arg_int){
    4438:	44 23       	and	r20, r20
    443a:	21 f0       	breq	.+8      	; 0x4444 <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xa8>
		DISPLAY_RESET_SET();
    443c:	81 e0       	ldi	r24, 0x01	; 1
    443e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    4442:	0b c0       	rjmp	.+22     	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		}else
		DISPLAY_RESET_RESET();
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    444a:	07 c0       	rjmp	.+14     	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
    444c:	ec 01       	movw	r28, r24
		break;
		default:
		if (avr_delay(u8x8, msg, arg_int, arg_ptr))	// check for any delay msgs
    444e:	0e 94 82 21 	call	0x4304	; 0x4304 <_Z9avr_delayP11u8x8_structhhPv>
    4452:	81 11       	cpse	r24, r1
    4454:	02 c0       	rjmp	.+4      	; 0x445a <_ZN9ST7565Lcd14gpio_and_delayEP11u8x8_structhhPv+0xbe>
		return 1;
		u8x8_SetGPIOResult(u8x8, 1);      // default return value
    4456:	81 e0       	ldi	r24, 0x01	; 1
    4458:	89 8f       	std	Y+25, r24	; 0x19
		break;
	}
	return 1;
    445a:	81 e0       	ldi	r24, 0x01	; 1
    445c:	df 91       	pop	r29
    445e:	cf 91       	pop	r28
    4460:	08 95       	ret

00004462 <_ZN7U8G2Lcd5writeEPKhj>:
			
		}
		return 1;
	}

	size_t write(const uint8_t *buffer, size_t size) {
    4462:	cf 92       	push	r12
    4464:	df 92       	push	r13
    4466:	ef 92       	push	r14
    4468:	ff 92       	push	r15
    446a:	0f 93       	push	r16
    446c:	1f 93       	push	r17
    446e:	cf 93       	push	r28
    4470:	df 93       	push	r29
    4472:	6c 01       	movw	r12, r24
    4474:	ea 01       	movw	r28, r20
		size_t cnt = 0;
		while( size > 0 ) {
    4476:	20 97       	sbiw	r28, 0x00	; 0
    4478:	a1 f0       	breq	.+40     	; 0x44a2 <_ZN7U8G2Lcd5writeEPKhj+0x40>
    447a:	06 2f       	mov	r16, r22
    447c:	17 2f       	mov	r17, r23
    447e:	e1 2c       	mov	r14, r1
    4480:	f1 2c       	mov	r15, r1
			cnt += write(*buffer++);
    4482:	d8 01       	movw	r26, r16
    4484:	6d 91       	ld	r22, X+
    4486:	8d 01       	movw	r16, r26
    4488:	d6 01       	movw	r26, r12
    448a:	ed 91       	ld	r30, X+
    448c:	fc 91       	ld	r31, X
    448e:	01 90       	ld	r0, Z+
    4490:	f0 81       	ld	r31, Z
    4492:	e0 2d       	mov	r30, r0
    4494:	c6 01       	movw	r24, r12
    4496:	19 95       	eicall
    4498:	e8 0e       	add	r14, r24
    449a:	f9 1e       	adc	r15, r25
			size--;
    449c:	21 97       	sbiw	r28, 0x01	; 1
		return 1;
	}

	size_t write(const uint8_t *buffer, size_t size) {
		size_t cnt = 0;
		while( size > 0 ) {
    449e:	89 f7       	brne	.-30     	; 0x4482 <_ZN7U8G2Lcd5writeEPKhj+0x20>
    44a0:	02 c0       	rjmp	.+4      	; 0x44a6 <_ZN7U8G2Lcd5writeEPKhj+0x44>
		}
		return 1;
	}

	size_t write(const uint8_t *buffer, size_t size) {
		size_t cnt = 0;
    44a2:	e1 2c       	mov	r14, r1
    44a4:	f1 2c       	mov	r15, r1
		while( size > 0 ) {
			cnt += write(*buffer++);
			size--;
		}
		return cnt;
	}
    44a6:	c7 01       	movw	r24, r14
    44a8:	df 91       	pop	r29
    44aa:	cf 91       	pop	r28
    44ac:	1f 91       	pop	r17
    44ae:	0f 91       	pop	r16
    44b0:	ff 90       	pop	r15
    44b2:	ef 90       	pop	r14
    44b4:	df 90       	pop	r13
    44b6:	cf 90       	pop	r12
    44b8:	08 95       	ret

000044ba <_ZN7IOClass6toggleEv>:
		this->state = HIGH;
		else
		this->state = LOW;
		digitalWrite(this->pin, this->state);
	}
	inline void toggle(void) override
    44ba:	cf 93       	push	r28
    44bc:	df 93       	push	r29
    44be:	ec 01       	movw	r28, r24
	{
		if (this->readstate())
    44c0:	e8 81       	ld	r30, Y
    44c2:	f9 81       	ldd	r31, Y+1	; 0x01
    44c4:	01 90       	ld	r0, Z+
    44c6:	f0 81       	ld	r31, Z
    44c8:	e0 2d       	mov	r30, r0
    44ca:	19 95       	eicall
    44cc:	88 23       	and	r24, r24
    44ce:	11 f0       	breq	.+4      	; 0x44d4 <_ZN7IOClass6toggleEv+0x1a>
		this->state = LOW;
    44d0:	1c 82       	std	Y+4, r1	; 0x04
    44d2:	02 c0       	rjmp	.+4      	; 0x44d8 <_ZN7IOClass6toggleEv+0x1e>
		else
		this->state = HIGH;
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	8c 83       	std	Y+4, r24	; 0x04
		digitalWrite(this->pin, this->state);
    44d8:	6c 81       	ldd	r22, Y+4	; 0x04
    44da:	8a 81       	ldd	r24, Y+2	; 0x02
    44dc:	0e 94 4b 10 	call	0x2096	; 0x2096 <digitalWrite>
	}
    44e0:	df 91       	pop	r29
    44e2:	cf 91       	pop	r28
    44e4:	08 95       	ret

000044e6 <_ZN7IOClass2onEv>:
	
	inline bool readstate(void) override
	{
		return (bool)digitalRead(this->pin);
	};
	inline void on(void)
    44e6:	fc 01       	movw	r30, r24
	{
		if (!this->activeLevel)
    44e8:	83 81       	ldd	r24, Z+3	; 0x03
    44ea:	81 11       	cpse	r24, r1
    44ec:	02 c0       	rjmp	.+4      	; 0x44f2 <_ZN7IOClass2onEv+0xc>
		this->state = LOW;
    44ee:	14 82       	std	Z+4, r1	; 0x04
    44f0:	02 c0       	rjmp	.+4      	; 0x44f6 <_ZN7IOClass2onEv+0x10>
		else
		this->state = HIGH;
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	84 83       	std	Z+4, r24	; 0x04
		digitalWrite(this->pin, this->state);
    44f6:	64 81       	ldd	r22, Z+4	; 0x04
    44f8:	82 81       	ldd	r24, Z+2	; 0x02
    44fa:	0e 94 4b 10 	call	0x2096	; 0x2096 <digitalWrite>
    44fe:	08 95       	ret

00004500 <_ZN7IOClass3offEv>:
	};
	inline void off(void) override
    4500:	fc 01       	movw	r30, r24
	{
		if (!this->activeLevel)
    4502:	83 81       	ldd	r24, Z+3	; 0x03
    4504:	81 11       	cpse	r24, r1
    4506:	03 c0       	rjmp	.+6      	; 0x450e <_ZN7IOClass3offEv+0xe>
		this->state = HIGH;
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	84 83       	std	Z+4, r24	; 0x04
    450c:	01 c0       	rjmp	.+2      	; 0x4510 <_ZN7IOClass3offEv+0x10>
		else
		this->state = LOW;
    450e:	14 82       	std	Z+4, r1	; 0x04
		digitalWrite(this->pin, this->state);
    4510:	64 81       	ldd	r22, Z+4	; 0x04
    4512:	82 81       	ldd	r24, Z+2	; 0x02
    4514:	0e 94 4b 10 	call	0x2096	; 0x2096 <digitalWrite>
    4518:	08 95       	ret

0000451a <_ZN7IOClass9readstateEv>:
	};
	~IOClass(){};
	
	inline bool readstate(void) override
	{
		return (bool)digitalRead(this->pin);
    451a:	fc 01       	movw	r30, r24
    451c:	82 81       	ldd	r24, Z+2	; 0x02
    451e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <digitalRead>
    4522:	21 e0       	ldi	r18, 0x01	; 1
    4524:	89 2b       	or	r24, r25
    4526:	09 f4       	brne	.+2      	; 0x452a <_ZN7IOClass9readstateEv+0x10>
    4528:	20 e0       	ldi	r18, 0x00	; 0
	};
    452a:	82 2f       	mov	r24, r18
    452c:	08 95       	ret

0000452e <_ZN5logic9onKeyHoldEh>:
		{
			pBuzzer->off();
		}
	}
	void onKeyHold(uint8_t ch) override {
		pDebugPort->printf("holdKey : %c\n" , ch);
    452e:	1f 92       	push	r1
    4530:	6f 93       	push	r22
    4532:	82 ed       	ldi	r24, 0xD2	; 210
    4534:	98 e2       	ldi	r25, 0x28	; 40
    4536:	9f 93       	push	r25
    4538:	8f 93       	push	r24
    453a:	80 91 7a 34 	lds	r24, 0x347A	; 0x80347a <pDebugPort+0x1>
    453e:	8f 93       	push	r24
    4540:	80 91 79 34 	lds	r24, 0x3479	; 0x803479 <pDebugPort>
    4544:	8f 93       	push	r24
    4546:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_ZN5Print6printfEPKcz>
	}
    454a:	0f 90       	pop	r0
    454c:	0f 90       	pop	r0
    454e:	0f 90       	pop	r0
    4550:	0f 90       	pop	r0
    4552:	0f 90       	pop	r0
    4554:	0f 90       	pop	r0
    4556:	08 95       	ret

00004558 <_ZN5logic12onKeyReleaseEh>:
		if(ch == '2')
		{
			pBuzzer->on();
		}
	}
	void onKeyRelease(uint8_t ch) override {
    4558:	cf 93       	push	r28
    455a:	c6 2f       	mov	r28, r22
		pDebugPort->printf("released : %c\n" , ch);
    455c:	1f 92       	push	r1
    455e:	6f 93       	push	r22
    4560:	80 ee       	ldi	r24, 0xE0	; 224
    4562:	98 e2       	ldi	r25, 0x28	; 40
    4564:	9f 93       	push	r25
    4566:	8f 93       	push	r24
    4568:	80 91 7a 34 	lds	r24, 0x347A	; 0x80347a <pDebugPort+0x1>
    456c:	8f 93       	push	r24
    456e:	80 91 79 34 	lds	r24, 0x3479	; 0x803479 <pDebugPort>
    4572:	8f 93       	push	r24
    4574:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_ZN5Print6printfEPKcz>
		if(ch == '2')
    4578:	0f 90       	pop	r0
    457a:	0f 90       	pop	r0
    457c:	0f 90       	pop	r0
    457e:	0f 90       	pop	r0
    4580:	0f 90       	pop	r0
    4582:	0f 90       	pop	r0
    4584:	c2 33       	cpi	r28, 0x32	; 50
    4586:	59 f4       	brne	.+22     	; 0x459e <_ZN5logic12onKeyReleaseEh+0x46>
		{
			pBuzzer->off();
    4588:	80 91 77 34 	lds	r24, 0x3477	; 0x803477 <pBuzzer>
    458c:	90 91 78 34 	lds	r25, 0x3478	; 0x803478 <pBuzzer+0x1>
    4590:	dc 01       	movw	r26, r24
    4592:	ed 91       	ld	r30, X+
    4594:	fc 91       	ld	r31, X
    4596:	04 80       	ldd	r0, Z+4	; 0x04
    4598:	f5 81       	ldd	r31, Z+5	; 0x05
    459a:	e0 2d       	mov	r30, r0
    459c:	19 95       	eicall
		}
	}
    459e:	cf 91       	pop	r28
    45a0:	08 95       	ret

000045a2 <_ZN5logic12onKeyPressedEh>:
{
public:
	logic(){}
	~logic(){}
protected:
	void onKeyPressed(uint8_t ch) override {
    45a2:	cf 93       	push	r28
    45a4:	c6 2f       	mov	r28, r22
		pDebugPort->printf("pressed Key : %c\n" , ch);
    45a6:	1f 92       	push	r1
    45a8:	6f 93       	push	r22
    45aa:	8f ee       	ldi	r24, 0xEF	; 239
    45ac:	98 e2       	ldi	r25, 0x28	; 40
    45ae:	9f 93       	push	r25
    45b0:	8f 93       	push	r24
    45b2:	80 91 7a 34 	lds	r24, 0x347A	; 0x80347a <pDebugPort+0x1>
    45b6:	8f 93       	push	r24
    45b8:	80 91 79 34 	lds	r24, 0x3479	; 0x803479 <pDebugPort>
    45bc:	8f 93       	push	r24
    45be:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_ZN5Print6printfEPKcz>
		if(ch == '2')
    45c2:	0f 90       	pop	r0
    45c4:	0f 90       	pop	r0
    45c6:	0f 90       	pop	r0
    45c8:	0f 90       	pop	r0
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	c2 33       	cpi	r28, 0x32	; 50
    45d0:	59 f4       	brne	.+22     	; 0x45e8 <_ZN5logic12onKeyPressedEh+0x46>
		{
			pBuzzer->on();
    45d2:	80 91 77 34 	lds	r24, 0x3477	; 0x803477 <pBuzzer>
    45d6:	90 91 78 34 	lds	r25, 0x3478	; 0x803478 <pBuzzer+0x1>
    45da:	dc 01       	movw	r26, r24
    45dc:	ed 91       	ld	r30, X+
    45de:	fc 91       	ld	r31, X
    45e0:	02 80       	ldd	r0, Z+2	; 0x02
    45e2:	f3 81       	ldd	r31, Z+3	; 0x03
    45e4:	e0 2d       	mov	r30, r0
    45e6:	19 95       	eicall
		}
	}
    45e8:	cf 91       	pop	r28
    45ea:	08 95       	ret

000045ec <_ZN7U8G2Lcd5writeEh>:
	u8g2_uint_t getStrWidth(const char *s) { return u8g2_GetStrWidth(&u8g2, s); }
	u8g2_uint_t getUTF8Width(const char *s) { return u8g2_GetUTF8Width(&u8g2, s); }
	
	// not required any more, enable UTF8 for print
	/* virtual function for print base class */
	size_t write(uint8_t v) {
    45ec:	0f 93       	push	r16
    45ee:	1f 93       	push	r17
    45f0:	cf 93       	push	r28
    45f2:	df 93       	push	r29
    45f4:	ec 01       	movw	r28, r24
		uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
    45f6:	8c 01       	movw	r16, r24
    45f8:	0c 5f       	subi	r16, 0xFC	; 252
    45fa:	1f 4f       	sbci	r17, 0xFF	; 255
    45fc:	fc 01       	movw	r30, r24
    45fe:	e6 58       	subi	r30, 0x86	; 134
    4600:	ff 4f       	sbci	r31, 0xFF	; 255
    4602:	01 90       	ld	r0, Z+
    4604:	f0 81       	ld	r31, Z
    4606:	e0 2d       	mov	r30, r0
    4608:	c8 01       	movw	r24, r16
    460a:	19 95       	eicall
		
		if ( e < 0x0fffe )
    460c:	8e 3f       	cpi	r24, 0xFE	; 254
    460e:	2f ef       	ldi	r18, 0xFF	; 255
    4610:	92 07       	cpc	r25, r18
    4612:	e0 f5       	brcc	.+120    	; 0x468c <_ZN7U8G2Lcd5writeEh+0xa0>
		{
			u8g2_uint_t delta = u8g2_DrawGlyph(&u8g2, tx, ty, e);
    4614:	fe 01       	movw	r30, r28
    4616:	e2 58       	subi	r30, 0x82	; 130
    4618:	ff 4f       	sbci	r31, 0xFF	; 255
    461a:	40 81       	ld	r20, Z
    461c:	51 81       	ldd	r21, Z+1	; 0x01
    461e:	32 97       	sbiw	r30, 0x02	; 2
    4620:	60 81       	ld	r22, Z
    4622:	71 81       	ldd	r23, Z+1	; 0x01
    4624:	9c 01       	movw	r18, r24
    4626:	c8 01       	movw	r24, r16
    4628:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <u8g2_DrawGlyph>
    462c:	9c 01       	movw	r18, r24
			
			#ifdef U8G2_WITH_FONT_ROTATION
			switch(u8g2.font_decode.dir)
    462e:	fe 01       	movw	r30, r28
    4630:	e6 5a       	subi	r30, 0xA6	; 166
    4632:	ff 4f       	sbci	r31, 0xFF	; 255
    4634:	90 81       	ld	r25, Z
    4636:	91 30       	cpi	r25, 0x01	; 1
    4638:	79 f0       	breq	.+30     	; 0x4658 <_ZN7U8G2Lcd5writeEh+0x6c>
    463a:	28 f0       	brcs	.+10     	; 0x4646 <_ZN7U8G2Lcd5writeEh+0x5a>
    463c:	92 30       	cpi	r25, 0x02	; 2
    463e:	a9 f0       	breq	.+42     	; 0x466a <_ZN7U8G2Lcd5writeEh+0x7e>
    4640:	93 30       	cpi	r25, 0x03	; 3
    4642:	e1 f0       	breq	.+56     	; 0x467c <_ZN7U8G2Lcd5writeEh+0x90>
    4644:	23 c0       	rjmp	.+70     	; 0x468c <_ZN7U8G2Lcd5writeEh+0xa0>
			{
				case 0:
				tx += delta;
    4646:	c4 58       	subi	r28, 0x84	; 132
    4648:	df 4f       	sbci	r29, 0xFF	; 255
    464a:	88 81       	ld	r24, Y
    464c:	99 81       	ldd	r25, Y+1	; 0x01
    464e:	28 0f       	add	r18, r24
    4650:	39 1f       	adc	r19, r25
    4652:	28 83       	st	Y, r18
    4654:	39 83       	std	Y+1, r19	; 0x01
				break;
    4656:	1a c0       	rjmp	.+52     	; 0x468c <_ZN7U8G2Lcd5writeEh+0xa0>
				case 1:
				ty += delta;
    4658:	c2 58       	subi	r28, 0x82	; 130
    465a:	df 4f       	sbci	r29, 0xFF	; 255
    465c:	88 81       	ld	r24, Y
    465e:	99 81       	ldd	r25, Y+1	; 0x01
    4660:	28 0f       	add	r18, r24
    4662:	39 1f       	adc	r19, r25
    4664:	28 83       	st	Y, r18
    4666:	39 83       	std	Y+1, r19	; 0x01
				break;
    4668:	11 c0       	rjmp	.+34     	; 0x468c <_ZN7U8G2Lcd5writeEh+0xa0>
				case 2:
				tx -= delta;
    466a:	c4 58       	subi	r28, 0x84	; 132
    466c:	df 4f       	sbci	r29, 0xFF	; 255
    466e:	88 81       	ld	r24, Y
    4670:	99 81       	ldd	r25, Y+1	; 0x01
    4672:	82 1b       	sub	r24, r18
    4674:	93 0b       	sbc	r25, r19
    4676:	88 83       	st	Y, r24
    4678:	99 83       	std	Y+1, r25	; 0x01
				break;
    467a:	08 c0       	rjmp	.+16     	; 0x468c <_ZN7U8G2Lcd5writeEh+0xa0>
				case 3:
				ty -= delta;
    467c:	c2 58       	subi	r28, 0x82	; 130
    467e:	df 4f       	sbci	r29, 0xFF	; 255
    4680:	88 81       	ld	r24, Y
    4682:	99 81       	ldd	r25, Y+1	; 0x01
    4684:	82 1b       	sub	r24, r18
    4686:	93 0b       	sbc	r25, r19
    4688:	88 83       	st	Y, r24
    468a:	99 83       	std	Y+1, r25	; 0x01
			
			
			
		}
		return 1;
	}
    468c:	81 e0       	ldi	r24, 0x01	; 1
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	1f 91       	pop	r17
    4696:	0f 91       	pop	r16
    4698:	08 95       	ret

0000469a <__vector_20>:
private:
};


ISR(TCC1_OVF_vect)
{
    469a:	1f 92       	push	r1
    469c:	0f 92       	push	r0
    469e:	0f b6       	in	r0, 0x3f	; 63
    46a0:	0f 92       	push	r0
    46a2:	11 24       	eor	r1, r1
    46a4:	08 b6       	in	r0, 0x38	; 56
    46a6:	0f 92       	push	r0
    46a8:	18 be       	out	0x38, r1	; 56
    46aa:	09 b6       	in	r0, 0x39	; 57
    46ac:	0f 92       	push	r0
    46ae:	19 be       	out	0x39, r1	; 57
    46b0:	0b b6       	in	r0, 0x3b	; 59
    46b2:	0f 92       	push	r0
    46b4:	1b be       	out	0x3b, r1	; 59
    46b6:	2f 93       	push	r18
    46b8:	3f 93       	push	r19
    46ba:	4f 93       	push	r20
    46bc:	5f 93       	push	r21
    46be:	6f 93       	push	r22
    46c0:	7f 93       	push	r23
    46c2:	8f 93       	push	r24
    46c4:	9f 93       	push	r25
    46c6:	af 93       	push	r26
    46c8:	bf 93       	push	r27
    46ca:	ef 93       	push	r30
    46cc:	ff 93       	push	r31
	pKeypad->scan();
    46ce:	80 91 7b 34 	lds	r24, 0x347B	; 0x80347b <pKeypad>
    46d2:	90 91 7c 34 	lds	r25, 0x347C	; 0x80347c <pKeypad+0x1>
    46d6:	dc 01       	movw	r26, r24
    46d8:	ed 91       	ld	r30, X+
    46da:	fc 91       	ld	r31, X
    46dc:	04 80       	ldd	r0, Z+4	; 0x04
    46de:	f5 81       	ldd	r31, Z+5	; 0x05
    46e0:	e0 2d       	mov	r30, r0
    46e2:	19 95       	eicall
}
    46e4:	ff 91       	pop	r31
    46e6:	ef 91       	pop	r30
    46e8:	bf 91       	pop	r27
    46ea:	af 91       	pop	r26
    46ec:	9f 91       	pop	r25
    46ee:	8f 91       	pop	r24
    46f0:	7f 91       	pop	r23
    46f2:	6f 91       	pop	r22
    46f4:	5f 91       	pop	r21
    46f6:	4f 91       	pop	r20
    46f8:	3f 91       	pop	r19
    46fa:	2f 91       	pop	r18
    46fc:	0f 90       	pop	r0
    46fe:	0b be       	out	0x3b, r0	; 59
    4700:	0f 90       	pop	r0
    4702:	09 be       	out	0x39, r0	; 57
    4704:	0f 90       	pop	r0
    4706:	08 be       	out	0x38, r0	; 56
    4708:	0f 90       	pop	r0
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	0f 90       	pop	r0
    470e:	1f 90       	pop	r1
    4710:	18 95       	reti

00004712 <main>:
logic posLogic;
ST7565Lcd pos4lcd(U8G2_R0);
U8G2Lcd *pLcd;

int main(void)
{
    4712:	cf 93       	push	r28
    4714:	df 93       	push	r29
    4716:	00 d0       	rcall	.+0      	; 0x4718 <main+0x6>
    4718:	00 d0       	rcall	.+0      	; 0x471a <main+0x8>
    471a:	cd b7       	in	r28, 0x3d	; 61
    471c:	de b7       	in	r29, 0x3e	; 62
	pKeypad = &matrixKeypad;
    471e:	85 eb       	ldi	r24, 0xB5	; 181
    4720:	91 e3       	ldi	r25, 0x31	; 49
    4722:	80 93 7b 34 	sts	0x347B, r24	; 0x80347b <pKeypad>
    4726:	90 93 7c 34 	sts	0x347C, r25	; 0x80347c <pKeypad+0x1>
	//posKeypad = &iKeys;
	pDebugPort=&Serial5;
    472a:	8e e5       	ldi	r24, 0x5E	; 94
    472c:	99 e2       	ldi	r25, 0x29	; 41
    472e:	80 93 79 34 	sts	0x3479, r24	; 0x803479 <pDebugPort>
    4732:	90 93 7a 34 	sts	0x347A, r25	; 0x80347a <pDebugPort+0x1>
	pBuzzer =&buzzer;
    4736:	82 e7       	ldi	r24, 0x72	; 114
    4738:	94 e3       	ldi	r25, 0x34	; 52
    473a:	80 93 77 34 	sts	0x3477, r24	; 0x803477 <pBuzzer>
    473e:	90 93 78 34 	sts	0x3478, r25	; 0x803478 <pBuzzer+0x1>
	pLcd = &pos4lcd;
    4742:	80 ef       	ldi	r24, 0xF0	; 240
    4744:	93 e3       	ldi	r25, 0x33	; 51
    4746:	80 93 ee 33 	sts	0x33EE, r24	; 0x8033ee <pLcd>
    474a:	90 93 ef 33 	sts	0x33EF, r25	; 0x8033ef <pLcd+0x1>
	
	
	clockConfig();
    474e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <clockConfig>
	millisTimerConfig();
    4752:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <millisTimerConfig>
	pKeypad->registerOb(&posLogic);
    4756:	80 91 7b 34 	lds	r24, 0x347B	; 0x80347b <pKeypad>
    475a:	90 91 7c 34 	lds	r25, 0x347C	; 0x80347c <pKeypad+0x1>
    475e:	dc 01       	movw	r26, r24
    4760:	ed 91       	ld	r30, X+
    4762:	fc 91       	ld	r31, X
    4764:	01 90       	ld	r0, Z+
    4766:	f0 81       	ld	r31, Z
    4768:	e0 2d       	mov	r30, r0
    476a:	60 e7       	ldi	r22, 0x70	; 112
    476c:	74 e3       	ldi	r23, 0x34	; 52
    476e:	19 95       	eicall
	pLcd->begin(122,32);
    4770:	00 91 ee 33 	lds	r16, 0x33EE	; 0x8033ee <pLcd>
    4774:	10 91 ef 33 	lds	r17, 0x33EF	; 0x8033ef <pLcd+0x1>
	/* U8X8_MSG_GPIO_MENU_NEXT, U8X8_MSG_GPIO_MENU_PREV, */
	/* U8X8_MSG_GPIO_MENU_HOME */
	uint8_t getMenuEvent(void) { return u8x8_GetMenuEvent(u8g2_GetU8x8(&u8g2)); }

	void initDisplay(void) {
	u8g2_InitDisplay(&u8g2); }
    4778:	78 01       	movw	r14, r16
    477a:	b4 e0       	ldi	r27, 0x04	; 4
    477c:	eb 0e       	add	r14, r27
    477e:	f1 1c       	adc	r15, r1
    4780:	c7 01       	movw	r24, r14
    4782:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <u8x8_InitDisplay>
	/* initInterface is part if initDisplay, do not call both use either initDisplay OR initInterface */
	void initInterface(void) {
	u8g2_InitInterface(&u8g2); }
	
	void clearDisplay(void) {
	u8g2_ClearDisplay(&u8g2); }
    4786:	c7 01       	movw	r24, r14
    4788:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <u8g2_ClearDisplay>
	
	void setPowerSave(uint8_t is_enable) {
	u8g2_SetPowerSave(&u8g2, is_enable); }
    478c:	60 e0       	ldi	r22, 0x00	; 0
    478e:	c7 01       	movw	r24, r14
    4790:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <u8x8_SetPowerSave>
		#ifndef U8G2_USE_DYNAMIC_ALLOC
		initDisplay();
		clearDisplay();
		setPowerSave(0);
		
		this->u8g2.width=width;
    4794:	8a e7       	ldi	r24, 0x7A	; 122
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	f8 01       	movw	r30, r16
    479a:	84 ab       	std	Z+52, r24	; 0x34
    479c:	95 ab       	std	Z+53, r25	; 0x35
		this->u8g2.height=hight;
    479e:	80 e2       	ldi	r24, 0x20	; 32
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	86 ab       	std	Z+54, r24	; 0x36
    47a4:	97 ab       	std	Z+55, r25	; 0x37
	
	void setPowerSave(uint8_t is_enable) {
	u8g2_SetPowerSave(&u8g2, is_enable); }
	
	void setFlipMode(uint8_t mode) {
	u8g2_SetFlipMode(&u8g2, mode); }
    47a6:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    47aa:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
    47ae:	61 e0       	ldi	r22, 0x01	; 1
    47b0:	04 96       	adiw	r24, 0x04	; 4
    47b2:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <u8x8_SetFlipMode>

	void setContrast(uint8_t value) {
	u8g2_SetContrast(&u8g2, value); }
    47b6:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    47ba:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
    47be:	64 e1       	ldi	r22, 0x14	; 20
    47c0:	04 96       	adiw	r24, 0x04	; 4
    47c2:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <u8x8_SetContrast>
	void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
	
	/* u8g2_font.c */

	void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
	void setFontMode(uint8_t  is_transparent) {u8g2_SetFontMode(&u8g2, is_transparent); }
    47c6:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    47ca:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
    47ce:	61 e0       	ldi	r22, 0x01	; 1
    47d0:	04 96       	adiw	r24, 0x04	; 4
    47d2:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <u8g2_SetFontMode>
	pLcd->setFlipMode(1);
	pLcd->setContrast(20);
	pLcd->setFontMode(1);
	pLcd->enableUTF8Print();
    47d6:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    47da:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
	void setBusClock(uint32_t clock_speed) { u8g2_GetU8x8(&u8g2)->bus_clock = clock_speed; }

	void setI2CAddress(uint8_t adr) { u8g2_SetI2CAddress(&u8g2, adr); }
	
	
	void enableUTF8Print(void) { cpp_next_cb = u8x8_utf8_next; }
    47de:	fc 01       	movw	r30, r24
    47e0:	e6 58       	subi	r30, 0x86	; 134
    47e2:	ff 4f       	sbci	r31, 0xFF	; 255
    47e4:	29 e2       	ldi	r18, 0x29	; 41
    47e6:	3c e1       	ldi	r19, 0x1C	; 28
    47e8:	20 83       	st	Z, r18
    47ea:	31 83       	std	Z+1, r19	; 0x01
	
	/* u8g2_font.c */

	void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
	void setFontMode(uint8_t  is_transparent) {u8g2_SetFontMode(&u8g2, is_transparent); }
	void setFontDirection(uint8_t dir) {u8g2_SetFontDirection(&u8g2, dir); }
    47ec:	60 e0       	ldi	r22, 0x00	; 0
    47ee:	04 96       	adiw	r24, 0x04	; 4
    47f0:	0e 94 b8 19 	call	0x3370	; 0x3370 <u8g2_SetFontDirection>
	void setFontPosBottom(void) { u8g2_SetFontPosBottom(&u8g2); }
	void setFontPosTop(void) { u8g2_SetFontPosTop(&u8g2); }
	void setFontPosCenter(void) { u8g2_SetFontPosCenter(&u8g2); }

	void setFontRefHeightText(void) { u8g2_SetFontRefHeightText(&u8g2); }
	void setFontRefHeightExtendedText(void) { u8g2_SetFontRefHeightExtendedText(&u8g2); }
    47f4:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    47f8:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
    47fc:	04 96       	adiw	r24, 0x04	; 4
    47fe:	0e 94 91 19 	call	0x3322	; 0x3322 <u8g2_SetFontRefHeightExtendedText>
	/* u8log_u8g2.c */
	void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
	
	/* u8g2_font.c */

	void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    4802:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    4806:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
    480a:	68 e9       	ldi	r22, 0x98	; 152
    480c:	72 e0       	ldi	r23, 0x02	; 2
    480e:	04 96       	adiw	r24, 0x04	; 4
    4810:	0e 94 a1 19 	call	0x3342	; 0x3342 <u8g2_SetFont>
	{ u8x8_RefreshDisplay(u8g2_GetU8x8(&u8g2)); }
	


	/* clib/u8g2.hvline.c */
	void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    4814:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    4818:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
    481c:	62 e0       	ldi	r22, 0x02	; 2
    481e:	04 96       	adiw	r24, 0x04	; 4
    4820:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <u8g2_SetDrawColor>
	u8g2_uint_t getDisplayWidth(void) { return u8g2_GetDisplayWidth(&u8g2); }

	
	/* u8g2_buffer.c */
	void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
	void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }
    4824:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    4828:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
    482c:	04 96       	adiw	r24, 0x04	; 4
    482e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <u8g2_ClearBuffer>
	
	pLcd->setFontRefHeightExtendedText();
	pLcd->setFont(IRANSansXMedium1);
	pLcd->setDrawColor(2);
	pLcd->clearBuffer();
	int8_t textDescent = pLcd->getDescent();
    4832:	20 91 ee 33 	lds	r18, 0x33EE	; 0x8033ee <pLcd>
    4836:	30 91 ef 33 	lds	r19, 0x33EF	; 0x8033ef <pLcd+0x1>
	void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
	void setFontMode(uint8_t  is_transparent) {u8g2_SetFontMode(&u8g2, is_transparent); }
	void setFontDirection(uint8_t dir) {u8g2_SetFontDirection(&u8g2, dir); }

	int8_t getAscent(void) { return u8g2_GetAscent(&u8g2); }
	int8_t getDescent(void) { return u8g2_GetDescent(&u8g2); }
    483a:	f9 01       	movw	r30, r18
    483c:	eb 58       	subi	r30, 0x8B	; 139
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	00 81       	ld	r16, Z

	void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
	void setFontMode(uint8_t  is_transparent) {u8g2_SetFontMode(&u8g2, is_transparent); }
	void setFontDirection(uint8_t dir) {u8g2_SetFontDirection(&u8g2, dir); }

	int8_t getAscent(void) { return u8g2_GetAscent(&u8g2); }
    4842:	31 97       	sbiw	r30, 0x01	; 1
	int8_t textAscent = pLcd->getAscent();
	int8_t verticalFreeSpace = 16 -  textAscent - textDescent;
    4844:	80 81       	ld	r24, Z
    4846:	80 0f       	add	r24, r16
	verticalFreeSpace = verticalFreeSpace >= 0 ? verticalFreeSpace : 0;
	u8g2_uint_t yCursor =16 + textDescent -	(verticalFreeSpace / 2);
    4848:	00 2e       	mov	r0, r16
    484a:	00 0c       	add	r0, r0
    484c:	11 0b       	sbc	r17, r17
    484e:	90 e1       	ldi	r25, 0x10	; 16
    4850:	98 1b       	sub	r25, r24
    4852:	0a f4       	brpl	.+2      	; 0x4856 <main+0x144>
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	89 2f       	mov	r24, r25
    4858:	99 23       	and	r25, r25
    485a:	14 f4       	brge	.+4      	; 0x4860 <main+0x14e>
    485c:	81 e0       	ldi	r24, 0x01	; 1
    485e:	89 0f       	add	r24, r25
    4860:	85 95       	asr	r24
    4862:	e8 2e       	mov	r14, r24
    4864:	88 0f       	add	r24, r24
    4866:	ff 08       	sbc	r15, r15
	/* LiquidCrystal compatible functions */
	void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
	void clear(void) { home(); clearDisplay(); clearBuffer();  }
	void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
	void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
	void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    4868:	f9 01       	movw	r30, r18
    486a:	e4 58       	subi	r30, 0x84	; 132
    486c:	ff 4f       	sbci	r31, 0xFF	; 255
    486e:	10 82       	st	Z, r1
    4870:	11 82       	std	Z+1, r1	; 0x01
    4872:	32 96       	adiw	r30, 0x02	; 2
    4874:	c8 01       	movw	r24, r16
    4876:	40 96       	adiw	r24, 0x10	; 16
    4878:	8e 19       	sub	r24, r14
    487a:	9f 09       	sbc	r25, r15
    487c:	80 83       	st	Z, r24
    487e:	91 83       	std	Z+1, r25	; 0x01
	pLcd->setCursor(0,yCursor);
	pLcd->print("English test");
    4880:	61 e0       	ldi	r22, 0x01	; 1
    4882:	79 e2       	ldi	r23, 0x29	; 41
    4884:	c9 01       	movw	r24, r18
    4886:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_ZN5Print5printEPKc>
	
	yCursor = 32 + textDescent - (verticalFreeSpace / 2);
	pLcd->setCursor(10,yCursor);
    488a:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    488e:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
    4892:	fc 01       	movw	r30, r24
    4894:	e4 58       	subi	r30, 0x84	; 132
    4896:	ff 4f       	sbci	r31, 0xFF	; 255
    4898:	2a e0       	ldi	r18, 0x0A	; 10
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	20 83       	st	Z, r18
    489e:	31 83       	std	Z+1, r19	; 0x01
    48a0:	32 96       	adiw	r30, 0x02	; 2
    48a2:	c8 01       	movw	r24, r16
    48a4:	80 96       	adiw	r24, 0x20	; 32
    48a6:	8e 19       	sub	r24, r14
    48a8:	9f 09       	sbc	r25, r15
    48aa:	80 83       	st	Z, r24
    48ac:	91 83       	std	Z+1, r25	; 0x01
	char* testText = "تست فارسی نویسی";
	pLcd->print(prReshaper(testText));
    48ae:	6e e0       	ldi	r22, 0x0E	; 14
    48b0:	79 e2       	ldi	r23, 0x29	; 41
    48b2:	ce 01       	movw	r24, r28
    48b4:	01 96       	adiw	r24, 0x01	; 1
    48b6:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_Z10prReshaperPKc>
    48ba:	be 01       	movw	r22, r28
    48bc:	6f 5f       	subi	r22, 0xFF	; 255
    48be:	7f 4f       	sbci	r23, 0xFF	; 255
    48c0:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    48c4:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
    48c8:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <_ZN5Print5printERK6String>
    48cc:	ce 01       	movw	r24, r28
    48ce:	01 96       	adiw	r24, 0x01	; 1
    48d0:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_ZN6StringD1Ev>
	void setAutoPageClear(uint8_t mode)  { u8g2_SetAutoPageClear(&u8g2, mode); }
	
	void updateDisplayArea(uint8_t  tx, uint8_t ty, uint8_t tw, uint8_t th)
	{ u8g2_UpdateDisplayArea(&u8g2, tx, ty, tw, th); }
	void updateDisplay(void)
	{ u8g2_UpdateDisplay(&u8g2); }
    48d4:	80 91 ee 33 	lds	r24, 0x33EE	; 0x8033ee <pLcd>
    48d8:	90 91 ef 33 	lds	r25, 0x33EF	; 0x8033ef <pLcd+0x1>
    48dc:	04 96       	adiw	r24, 0x04	; 4
    48de:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <u8g2_UpdateDisplay>
    48e2:	ff cf       	rjmp	.-2      	; 0x48e2 <main+0x1d0>

000048e4 <_GLOBAL__sub_I_pKeypad>:
	
	
	while (1)
	{
	}
    48e4:	cf 93       	push	r28
    48e6:	df 93       	push	r29
	uint8_t pin;
	bool activeLevel;
	bool state;
	public:
	IOClass(uint8_t pin, uint8_t dir, bool activeLevel = HIGH)
	{
    48e8:	c2 e7       	ldi	r28, 0x72	; 114
    48ea:	d4 e3       	ldi	r29, 0x34	; 52
    48ec:	8f e2       	ldi	r24, 0x2F	; 47
    48ee:	99 e2       	ldi	r25, 0x29	; 41
    48f0:	88 83       	st	Y, r24
    48f2:	99 83       	std	Y+1, r25	; 0x01
		this->pin = pin;
    48f4:	8d e1       	ldi	r24, 0x1D	; 29
    48f6:	8a 83       	std	Y+2, r24	; 0x02
		this->activeLevel = activeLevel;
    48f8:	1b 82       	std	Y+3, r1	; 0x03
		pinMode(pin, dir);
    48fa:	61 e0       	ldi	r22, 0x01	; 1
    48fc:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <pinMode>
		this->state = HIGH;
		digitalWrite(this->pin, this->state);
	};
	inline void off(void) override
	{
		if (!this->activeLevel)
    4900:	8b 81       	ldd	r24, Y+3	; 0x03
    4902:	81 11       	cpse	r24, r1
    4904:	04 c0       	rjmp	.+8      	; 0x490e <_GLOBAL__sub_I_pKeypad+0x2a>
		this->state = HIGH;
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	80 93 76 34 	sts	0x3476, r24	; 0x803476 <buzzer+0x4>
    490c:	02 c0       	rjmp	.+4      	; 0x4912 <_GLOBAL__sub_I_pKeypad+0x2e>
		else
		this->state = LOW;
    490e:	10 92 76 34 	sts	0x3476, r1	; 0x803476 <buzzer+0x4>
		digitalWrite(this->pin, this->state);
    4912:	e2 e7       	ldi	r30, 0x72	; 114
    4914:	f4 e3       	ldi	r31, 0x34	; 52
    4916:	64 81       	ldd	r22, Z+4	; 0x04
    4918:	82 81       	ldd	r24, Z+2	; 0x02
    491a:	0e 94 4b 10 	call	0x2096	; 0x2096 <digitalWrite>


class logic : public KeyObserver
{
public:
	logic(){}
    491e:	83 e5       	ldi	r24, 0x53	; 83
    4920:	99 e2       	ldi	r25, 0x29	; 41
    4922:	80 93 70 34 	sts	0x3470, r24	; 0x803470 <posLogic>
    4926:	90 93 71 34 	sts	0x3471, r25	; 0x803471 <posLogic+0x1>
    492a:	c0 ef       	ldi	r28, 0xF0	; 240
    492c:	d3 e3       	ldi	r29, 0x33	; 51
    492e:	1a 82       	std	Y+2, r1	; 0x02
    4930:	1b 82       	std	Y+3, r1	; 0x03
	u8g2_t u8g2;
	u8x8_char_cb cpp_next_cb; /*  the cpp interface has its own decoding function for the Arduino print command */
	public:
	u8g2_uint_t tx, ty;
	
	U8G2Lcd(void) { cpp_next_cb = u8x8_ascii_next; home(); }
    4932:	8b e3       	ldi	r24, 0x3B	; 59
    4934:	99 e2       	ldi	r25, 0x29	; 41
    4936:	88 83       	st	Y, r24
    4938:	99 83       	std	Y+1, r25	; 0x01
    493a:	8c e1       	ldi	r24, 0x1C	; 28
    493c:	9c e1       	ldi	r25, 0x1C	; 28
    493e:	80 93 6a 34 	sts	0x346A, r24	; 0x80346a <pos4lcd+0x7a>
    4942:	90 93 6b 34 	sts	0x346B, r25	; 0x80346b <pos4lcd+0x7b>
	uint8_t userInterfaceInputValue(const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post) {
	return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post); }
	

	/* LiquidCrystal compatible functions */
	void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    4946:	10 92 6c 34 	sts	0x346C, r1	; 0x80346c <pos4lcd+0x7c>
    494a:	10 92 6d 34 	sts	0x346D, r1	; 0x80346d <pos4lcd+0x7d>
    494e:	10 92 6e 34 	sts	0x346E, r1	; 0x80346e <pos4lcd+0x7e>
    4952:	10 92 6f 34 	sts	0x346F, r1	; 0x80346f <pos4lcd+0x7f>
    4956:	84 ef       	ldi	r24, 0xF4	; 244
    4958:	93 e3       	ldi	r25, 0x33	; 51
    495a:	0e 94 81 1c 	call	0x3902	; 0x3902 <u8x8_utf8_init>
class ST7565Lcd : public U8G2Lcd
{
private:
	static uint8_t gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, U8X8_UNUSED void *arg_ptr);
public:
	ST7565Lcd(const u8g2_cb_t *rotation):U8G2Lcd(){
    495e:	87 e4       	ldi	r24, 0x47	; 71
    4960:	99 e2       	ldi	r25, 0x29	; 41
    4962:	88 83       	st	Y, r24
    4964:	99 83       	std	Y+1, r25	; 0x01
		u8g2_Setup_st7565_ea_dogm132_f(&u8g2, rotation, u8x8_byte_4wire_sw_spi, ST7565Lcd::gpio_and_delay);
    4966:	2e ec       	ldi	r18, 0xCE	; 206
    4968:	31 e2       	ldi	r19, 0x21	; 33
    496a:	49 ea       	ldi	r20, 0xA9	; 169
    496c:	5c e1       	ldi	r21, 0x1C	; 28
    496e:	6c e1       	ldi	r22, 0x1C	; 28
    4970:	71 e2       	ldi	r23, 0x21	; 33
    4972:	84 ef       	ldi	r24, 0xF4	; 244
    4974:	93 e3       	ldi	r25, 0x33	; 51
    4976:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <u8g2_Setup_st7565_ea_dogm132_f>
	
	
	while (1)
	{
	}
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	08 95       	ret

00004980 <__udivmodsi4>:
    4980:	a1 e2       	ldi	r26, 0x21	; 33
    4982:	1a 2e       	mov	r1, r26
    4984:	aa 1b       	sub	r26, r26
    4986:	bb 1b       	sub	r27, r27
    4988:	fd 01       	movw	r30, r26
    498a:	0d c0       	rjmp	.+26     	; 0x49a6 <__udivmodsi4_ep>

0000498c <__udivmodsi4_loop>:
    498c:	aa 1f       	adc	r26, r26
    498e:	bb 1f       	adc	r27, r27
    4990:	ee 1f       	adc	r30, r30
    4992:	ff 1f       	adc	r31, r31
    4994:	a2 17       	cp	r26, r18
    4996:	b3 07       	cpc	r27, r19
    4998:	e4 07       	cpc	r30, r20
    499a:	f5 07       	cpc	r31, r21
    499c:	20 f0       	brcs	.+8      	; 0x49a6 <__udivmodsi4_ep>
    499e:	a2 1b       	sub	r26, r18
    49a0:	b3 0b       	sbc	r27, r19
    49a2:	e4 0b       	sbc	r30, r20
    49a4:	f5 0b       	sbc	r31, r21

000049a6 <__udivmodsi4_ep>:
    49a6:	66 1f       	adc	r22, r22
    49a8:	77 1f       	adc	r23, r23
    49aa:	88 1f       	adc	r24, r24
    49ac:	99 1f       	adc	r25, r25
    49ae:	1a 94       	dec	r1
    49b0:	69 f7       	brne	.-38     	; 0x498c <__udivmodsi4_loop>
    49b2:	60 95       	com	r22
    49b4:	70 95       	com	r23
    49b6:	80 95       	com	r24
    49b8:	90 95       	com	r25
    49ba:	9b 01       	movw	r18, r22
    49bc:	ac 01       	movw	r20, r24
    49be:	bd 01       	movw	r22, r26
    49c0:	cf 01       	movw	r24, r30
    49c2:	08 95       	ret

000049c4 <__tablejump2__>:
    49c4:	ee 0f       	add	r30, r30
    49c6:	ff 1f       	adc	r31, r31
    49c8:	88 1f       	adc	r24, r24
    49ca:	8b bf       	out	0x3b, r24	; 59
    49cc:	07 90       	elpm	r0, Z+
    49ce:	f6 91       	elpm	r31, Z
    49d0:	e0 2d       	mov	r30, r0
    49d2:	1b be       	out	0x3b, r1	; 59
    49d4:	19 94       	eijmp

000049d6 <__umulhisi3>:
    49d6:	a2 9f       	mul	r26, r18
    49d8:	b0 01       	movw	r22, r0
    49da:	b3 9f       	mul	r27, r19
    49dc:	c0 01       	movw	r24, r0
    49de:	a3 9f       	mul	r26, r19
    49e0:	70 0d       	add	r23, r0
    49e2:	81 1d       	adc	r24, r1
    49e4:	11 24       	eor	r1, r1
    49e6:	91 1d       	adc	r25, r1
    49e8:	b2 9f       	mul	r27, r18
    49ea:	70 0d       	add	r23, r0
    49ec:	81 1d       	adc	r24, r1
    49ee:	11 24       	eor	r1, r1
    49f0:	91 1d       	adc	r25, r1
    49f2:	08 95       	ret

000049f4 <malloc>:
    49f4:	0f 93       	push	r16
    49f6:	1f 93       	push	r17
    49f8:	cf 93       	push	r28
    49fa:	df 93       	push	r29
    49fc:	82 30       	cpi	r24, 0x02	; 2
    49fe:	91 05       	cpc	r25, r1
    4a00:	10 f4       	brcc	.+4      	; 0x4a06 <malloc+0x12>
    4a02:	82 e0       	ldi	r24, 0x02	; 2
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	e0 91 7f 34 	lds	r30, 0x347F	; 0x80347f <__flp>
    4a0a:	f0 91 80 34 	lds	r31, 0x3480	; 0x803480 <__flp+0x1>
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	a0 e0       	ldi	r26, 0x00	; 0
    4a14:	b0 e0       	ldi	r27, 0x00	; 0
    4a16:	30 97       	sbiw	r30, 0x00	; 0
    4a18:	19 f1       	breq	.+70     	; 0x4a60 <malloc+0x6c>
    4a1a:	40 81       	ld	r20, Z
    4a1c:	51 81       	ldd	r21, Z+1	; 0x01
    4a1e:	02 81       	ldd	r16, Z+2	; 0x02
    4a20:	13 81       	ldd	r17, Z+3	; 0x03
    4a22:	48 17       	cp	r20, r24
    4a24:	59 07       	cpc	r21, r25
    4a26:	c8 f0       	brcs	.+50     	; 0x4a5a <malloc+0x66>
    4a28:	84 17       	cp	r24, r20
    4a2a:	95 07       	cpc	r25, r21
    4a2c:	69 f4       	brne	.+26     	; 0x4a48 <malloc+0x54>
    4a2e:	10 97       	sbiw	r26, 0x00	; 0
    4a30:	31 f0       	breq	.+12     	; 0x4a3e <malloc+0x4a>
    4a32:	12 96       	adiw	r26, 0x02	; 2
    4a34:	0c 93       	st	X, r16
    4a36:	12 97       	sbiw	r26, 0x02	; 2
    4a38:	13 96       	adiw	r26, 0x03	; 3
    4a3a:	1c 93       	st	X, r17
    4a3c:	27 c0       	rjmp	.+78     	; 0x4a8c <malloc+0x98>
    4a3e:	00 93 7f 34 	sts	0x347F, r16	; 0x80347f <__flp>
    4a42:	10 93 80 34 	sts	0x3480, r17	; 0x803480 <__flp+0x1>
    4a46:	22 c0       	rjmp	.+68     	; 0x4a8c <malloc+0x98>
    4a48:	21 15       	cp	r18, r1
    4a4a:	31 05       	cpc	r19, r1
    4a4c:	19 f0       	breq	.+6      	; 0x4a54 <malloc+0x60>
    4a4e:	42 17       	cp	r20, r18
    4a50:	53 07       	cpc	r21, r19
    4a52:	18 f4       	brcc	.+6      	; 0x4a5a <malloc+0x66>
    4a54:	9a 01       	movw	r18, r20
    4a56:	bd 01       	movw	r22, r26
    4a58:	ef 01       	movw	r28, r30
    4a5a:	df 01       	movw	r26, r30
    4a5c:	f8 01       	movw	r30, r16
    4a5e:	db cf       	rjmp	.-74     	; 0x4a16 <malloc+0x22>
    4a60:	21 15       	cp	r18, r1
    4a62:	31 05       	cpc	r19, r1
    4a64:	f9 f0       	breq	.+62     	; 0x4aa4 <malloc+0xb0>
    4a66:	28 1b       	sub	r18, r24
    4a68:	39 0b       	sbc	r19, r25
    4a6a:	24 30       	cpi	r18, 0x04	; 4
    4a6c:	31 05       	cpc	r19, r1
    4a6e:	80 f4       	brcc	.+32     	; 0x4a90 <malloc+0x9c>
    4a70:	8a 81       	ldd	r24, Y+2	; 0x02
    4a72:	9b 81       	ldd	r25, Y+3	; 0x03
    4a74:	61 15       	cp	r22, r1
    4a76:	71 05       	cpc	r23, r1
    4a78:	21 f0       	breq	.+8      	; 0x4a82 <malloc+0x8e>
    4a7a:	fb 01       	movw	r30, r22
    4a7c:	82 83       	std	Z+2, r24	; 0x02
    4a7e:	93 83       	std	Z+3, r25	; 0x03
    4a80:	04 c0       	rjmp	.+8      	; 0x4a8a <malloc+0x96>
    4a82:	80 93 7f 34 	sts	0x347F, r24	; 0x80347f <__flp>
    4a86:	90 93 80 34 	sts	0x3480, r25	; 0x803480 <__flp+0x1>
    4a8a:	fe 01       	movw	r30, r28
    4a8c:	32 96       	adiw	r30, 0x02	; 2
    4a8e:	44 c0       	rjmp	.+136    	; 0x4b18 <malloc+0x124>
    4a90:	fe 01       	movw	r30, r28
    4a92:	e2 0f       	add	r30, r18
    4a94:	f3 1f       	adc	r31, r19
    4a96:	81 93       	st	Z+, r24
    4a98:	91 93       	st	Z+, r25
    4a9a:	22 50       	subi	r18, 0x02	; 2
    4a9c:	31 09       	sbc	r19, r1
    4a9e:	28 83       	st	Y, r18
    4aa0:	39 83       	std	Y+1, r19	; 0x01
    4aa2:	3a c0       	rjmp	.+116    	; 0x4b18 <malloc+0x124>
    4aa4:	20 91 7d 34 	lds	r18, 0x347D	; 0x80347d <__brkval>
    4aa8:	30 91 7e 34 	lds	r19, 0x347E	; 0x80347e <__brkval+0x1>
    4aac:	23 2b       	or	r18, r19
    4aae:	41 f4       	brne	.+16     	; 0x4ac0 <malloc+0xcc>
    4ab0:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4ab4:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4ab8:	20 93 7d 34 	sts	0x347D, r18	; 0x80347d <__brkval>
    4abc:	30 93 7e 34 	sts	0x347E, r19	; 0x80347e <__brkval+0x1>
    4ac0:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4ac4:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4ac8:	21 15       	cp	r18, r1
    4aca:	31 05       	cpc	r19, r1
    4acc:	41 f4       	brne	.+16     	; 0x4ade <malloc+0xea>
    4ace:	2d b7       	in	r18, 0x3d	; 61
    4ad0:	3e b7       	in	r19, 0x3e	; 62
    4ad2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4ad6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4ada:	24 1b       	sub	r18, r20
    4adc:	35 0b       	sbc	r19, r21
    4ade:	e0 91 7d 34 	lds	r30, 0x347D	; 0x80347d <__brkval>
    4ae2:	f0 91 7e 34 	lds	r31, 0x347E	; 0x80347e <__brkval+0x1>
    4ae6:	e2 17       	cp	r30, r18
    4ae8:	f3 07       	cpc	r31, r19
    4aea:	a0 f4       	brcc	.+40     	; 0x4b14 <malloc+0x120>
    4aec:	2e 1b       	sub	r18, r30
    4aee:	3f 0b       	sbc	r19, r31
    4af0:	28 17       	cp	r18, r24
    4af2:	39 07       	cpc	r19, r25
    4af4:	78 f0       	brcs	.+30     	; 0x4b14 <malloc+0x120>
    4af6:	ac 01       	movw	r20, r24
    4af8:	4e 5f       	subi	r20, 0xFE	; 254
    4afa:	5f 4f       	sbci	r21, 0xFF	; 255
    4afc:	24 17       	cp	r18, r20
    4afe:	35 07       	cpc	r19, r21
    4b00:	48 f0       	brcs	.+18     	; 0x4b14 <malloc+0x120>
    4b02:	4e 0f       	add	r20, r30
    4b04:	5f 1f       	adc	r21, r31
    4b06:	40 93 7d 34 	sts	0x347D, r20	; 0x80347d <__brkval>
    4b0a:	50 93 7e 34 	sts	0x347E, r21	; 0x80347e <__brkval+0x1>
    4b0e:	81 93       	st	Z+, r24
    4b10:	91 93       	st	Z+, r25
    4b12:	02 c0       	rjmp	.+4      	; 0x4b18 <malloc+0x124>
    4b14:	e0 e0       	ldi	r30, 0x00	; 0
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	cf 01       	movw	r24, r30
    4b1a:	df 91       	pop	r29
    4b1c:	cf 91       	pop	r28
    4b1e:	1f 91       	pop	r17
    4b20:	0f 91       	pop	r16
    4b22:	08 95       	ret

00004b24 <free>:
    4b24:	cf 93       	push	r28
    4b26:	df 93       	push	r29
    4b28:	00 97       	sbiw	r24, 0x00	; 0
    4b2a:	09 f4       	brne	.+2      	; 0x4b2e <free+0xa>
    4b2c:	81 c0       	rjmp	.+258    	; 0x4c30 <free+0x10c>
    4b2e:	fc 01       	movw	r30, r24
    4b30:	32 97       	sbiw	r30, 0x02	; 2
    4b32:	12 82       	std	Z+2, r1	; 0x02
    4b34:	13 82       	std	Z+3, r1	; 0x03
    4b36:	a0 91 7f 34 	lds	r26, 0x347F	; 0x80347f <__flp>
    4b3a:	b0 91 80 34 	lds	r27, 0x3480	; 0x803480 <__flp+0x1>
    4b3e:	10 97       	sbiw	r26, 0x00	; 0
    4b40:	81 f4       	brne	.+32     	; 0x4b62 <free+0x3e>
    4b42:	20 81       	ld	r18, Z
    4b44:	31 81       	ldd	r19, Z+1	; 0x01
    4b46:	82 0f       	add	r24, r18
    4b48:	93 1f       	adc	r25, r19
    4b4a:	20 91 7d 34 	lds	r18, 0x347D	; 0x80347d <__brkval>
    4b4e:	30 91 7e 34 	lds	r19, 0x347E	; 0x80347e <__brkval+0x1>
    4b52:	28 17       	cp	r18, r24
    4b54:	39 07       	cpc	r19, r25
    4b56:	51 f5       	brne	.+84     	; 0x4bac <free+0x88>
    4b58:	e0 93 7d 34 	sts	0x347D, r30	; 0x80347d <__brkval>
    4b5c:	f0 93 7e 34 	sts	0x347E, r31	; 0x80347e <__brkval+0x1>
    4b60:	67 c0       	rjmp	.+206    	; 0x4c30 <free+0x10c>
    4b62:	ed 01       	movw	r28, r26
    4b64:	20 e0       	ldi	r18, 0x00	; 0
    4b66:	30 e0       	ldi	r19, 0x00	; 0
    4b68:	ce 17       	cp	r28, r30
    4b6a:	df 07       	cpc	r29, r31
    4b6c:	40 f4       	brcc	.+16     	; 0x4b7e <free+0x5a>
    4b6e:	4a 81       	ldd	r20, Y+2	; 0x02
    4b70:	5b 81       	ldd	r21, Y+3	; 0x03
    4b72:	9e 01       	movw	r18, r28
    4b74:	41 15       	cp	r20, r1
    4b76:	51 05       	cpc	r21, r1
    4b78:	f1 f0       	breq	.+60     	; 0x4bb6 <free+0x92>
    4b7a:	ea 01       	movw	r28, r20
    4b7c:	f5 cf       	rjmp	.-22     	; 0x4b68 <free+0x44>
    4b7e:	c2 83       	std	Z+2, r28	; 0x02
    4b80:	d3 83       	std	Z+3, r29	; 0x03
    4b82:	40 81       	ld	r20, Z
    4b84:	51 81       	ldd	r21, Z+1	; 0x01
    4b86:	84 0f       	add	r24, r20
    4b88:	95 1f       	adc	r25, r21
    4b8a:	c8 17       	cp	r28, r24
    4b8c:	d9 07       	cpc	r29, r25
    4b8e:	59 f4       	brne	.+22     	; 0x4ba6 <free+0x82>
    4b90:	88 81       	ld	r24, Y
    4b92:	99 81       	ldd	r25, Y+1	; 0x01
    4b94:	84 0f       	add	r24, r20
    4b96:	95 1f       	adc	r25, r21
    4b98:	02 96       	adiw	r24, 0x02	; 2
    4b9a:	80 83       	st	Z, r24
    4b9c:	91 83       	std	Z+1, r25	; 0x01
    4b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ba2:	82 83       	std	Z+2, r24	; 0x02
    4ba4:	93 83       	std	Z+3, r25	; 0x03
    4ba6:	21 15       	cp	r18, r1
    4ba8:	31 05       	cpc	r19, r1
    4baa:	29 f4       	brne	.+10     	; 0x4bb6 <free+0x92>
    4bac:	e0 93 7f 34 	sts	0x347F, r30	; 0x80347f <__flp>
    4bb0:	f0 93 80 34 	sts	0x3480, r31	; 0x803480 <__flp+0x1>
    4bb4:	3d c0       	rjmp	.+122    	; 0x4c30 <free+0x10c>
    4bb6:	e9 01       	movw	r28, r18
    4bb8:	ea 83       	std	Y+2, r30	; 0x02
    4bba:	fb 83       	std	Y+3, r31	; 0x03
    4bbc:	49 91       	ld	r20, Y+
    4bbe:	59 91       	ld	r21, Y+
    4bc0:	c4 0f       	add	r28, r20
    4bc2:	d5 1f       	adc	r29, r21
    4bc4:	ec 17       	cp	r30, r28
    4bc6:	fd 07       	cpc	r31, r29
    4bc8:	61 f4       	brne	.+24     	; 0x4be2 <free+0xbe>
    4bca:	80 81       	ld	r24, Z
    4bcc:	91 81       	ldd	r25, Z+1	; 0x01
    4bce:	84 0f       	add	r24, r20
    4bd0:	95 1f       	adc	r25, r21
    4bd2:	02 96       	adiw	r24, 0x02	; 2
    4bd4:	e9 01       	movw	r28, r18
    4bd6:	88 83       	st	Y, r24
    4bd8:	99 83       	std	Y+1, r25	; 0x01
    4bda:	82 81       	ldd	r24, Z+2	; 0x02
    4bdc:	93 81       	ldd	r25, Z+3	; 0x03
    4bde:	8a 83       	std	Y+2, r24	; 0x02
    4be0:	9b 83       	std	Y+3, r25	; 0x03
    4be2:	e0 e0       	ldi	r30, 0x00	; 0
    4be4:	f0 e0       	ldi	r31, 0x00	; 0
    4be6:	12 96       	adiw	r26, 0x02	; 2
    4be8:	8d 91       	ld	r24, X+
    4bea:	9c 91       	ld	r25, X
    4bec:	13 97       	sbiw	r26, 0x03	; 3
    4bee:	00 97       	sbiw	r24, 0x00	; 0
    4bf0:	19 f0       	breq	.+6      	; 0x4bf8 <free+0xd4>
    4bf2:	fd 01       	movw	r30, r26
    4bf4:	dc 01       	movw	r26, r24
    4bf6:	f7 cf       	rjmp	.-18     	; 0x4be6 <free+0xc2>
    4bf8:	8d 91       	ld	r24, X+
    4bfa:	9c 91       	ld	r25, X
    4bfc:	11 97       	sbiw	r26, 0x01	; 1
    4bfe:	9d 01       	movw	r18, r26
    4c00:	2e 5f       	subi	r18, 0xFE	; 254
    4c02:	3f 4f       	sbci	r19, 0xFF	; 255
    4c04:	82 0f       	add	r24, r18
    4c06:	93 1f       	adc	r25, r19
    4c08:	20 91 7d 34 	lds	r18, 0x347D	; 0x80347d <__brkval>
    4c0c:	30 91 7e 34 	lds	r19, 0x347E	; 0x80347e <__brkval+0x1>
    4c10:	28 17       	cp	r18, r24
    4c12:	39 07       	cpc	r19, r25
    4c14:	69 f4       	brne	.+26     	; 0x4c30 <free+0x10c>
    4c16:	30 97       	sbiw	r30, 0x00	; 0
    4c18:	29 f4       	brne	.+10     	; 0x4c24 <free+0x100>
    4c1a:	10 92 7f 34 	sts	0x347F, r1	; 0x80347f <__flp>
    4c1e:	10 92 80 34 	sts	0x3480, r1	; 0x803480 <__flp+0x1>
    4c22:	02 c0       	rjmp	.+4      	; 0x4c28 <free+0x104>
    4c24:	12 82       	std	Z+2, r1	; 0x02
    4c26:	13 82       	std	Z+3, r1	; 0x03
    4c28:	a0 93 7d 34 	sts	0x347D, r26	; 0x80347d <__brkval>
    4c2c:	b0 93 7e 34 	sts	0x347E, r27	; 0x80347e <__brkval+0x1>
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	08 95       	ret

00004c36 <realloc>:
    4c36:	6f 92       	push	r6
    4c38:	7f 92       	push	r7
    4c3a:	8f 92       	push	r8
    4c3c:	9f 92       	push	r9
    4c3e:	af 92       	push	r10
    4c40:	bf 92       	push	r11
    4c42:	cf 92       	push	r12
    4c44:	df 92       	push	r13
    4c46:	ef 92       	push	r14
    4c48:	ff 92       	push	r15
    4c4a:	0f 93       	push	r16
    4c4c:	1f 93       	push	r17
    4c4e:	cf 93       	push	r28
    4c50:	df 93       	push	r29
    4c52:	00 97       	sbiw	r24, 0x00	; 0
    4c54:	89 f4       	brne	.+34     	; 0x4c78 <realloc+0x42>
    4c56:	cb 01       	movw	r24, r22
    4c58:	df 91       	pop	r29
    4c5a:	cf 91       	pop	r28
    4c5c:	1f 91       	pop	r17
    4c5e:	0f 91       	pop	r16
    4c60:	ff 90       	pop	r15
    4c62:	ef 90       	pop	r14
    4c64:	df 90       	pop	r13
    4c66:	cf 90       	pop	r12
    4c68:	bf 90       	pop	r11
    4c6a:	af 90       	pop	r10
    4c6c:	9f 90       	pop	r9
    4c6e:	8f 90       	pop	r8
    4c70:	7f 90       	pop	r7
    4c72:	6f 90       	pop	r6
    4c74:	0c 94 fa 24 	jmp	0x49f4	; 0x49f4 <malloc>
    4c78:	fc 01       	movw	r30, r24
    4c7a:	e6 0f       	add	r30, r22
    4c7c:	f7 1f       	adc	r31, r23
    4c7e:	9c 01       	movw	r18, r24
    4c80:	22 50       	subi	r18, 0x02	; 2
    4c82:	31 09       	sbc	r19, r1
    4c84:	e2 17       	cp	r30, r18
    4c86:	f3 07       	cpc	r31, r19
    4c88:	08 f4       	brcc	.+2      	; 0x4c8c <realloc+0x56>
    4c8a:	a9 c0       	rjmp	.+338    	; 0x4dde <realloc+0x1a8>
    4c8c:	ec 01       	movw	r28, r24
    4c8e:	d9 01       	movw	r26, r18
    4c90:	0d 91       	ld	r16, X+
    4c92:	1c 91       	ld	r17, X
    4c94:	11 97       	sbiw	r26, 0x01	; 1
    4c96:	06 17       	cp	r16, r22
    4c98:	17 07       	cpc	r17, r23
    4c9a:	b0 f0       	brcs	.+44     	; 0x4cc8 <realloc+0x92>
    4c9c:	05 30       	cpi	r16, 0x05	; 5
    4c9e:	11 05       	cpc	r17, r1
    4ca0:	08 f4       	brcc	.+2      	; 0x4ca4 <realloc+0x6e>
    4ca2:	9b c0       	rjmp	.+310    	; 0x4dda <realloc+0x1a4>
    4ca4:	c8 01       	movw	r24, r16
    4ca6:	04 97       	sbiw	r24, 0x04	; 4
    4ca8:	86 17       	cp	r24, r22
    4caa:	97 07       	cpc	r25, r23
    4cac:	08 f4       	brcc	.+2      	; 0x4cb0 <realloc+0x7a>
    4cae:	95 c0       	rjmp	.+298    	; 0x4dda <realloc+0x1a4>
    4cb0:	02 50       	subi	r16, 0x02	; 2
    4cb2:	11 09       	sbc	r17, r1
    4cb4:	06 1b       	sub	r16, r22
    4cb6:	17 0b       	sbc	r17, r23
    4cb8:	01 93       	st	Z+, r16
    4cba:	11 93       	st	Z+, r17
    4cbc:	6d 93       	st	X+, r22
    4cbe:	7c 93       	st	X, r23
    4cc0:	cf 01       	movw	r24, r30
    4cc2:	0e 94 92 25 	call	0x4b24	; 0x4b24 <free>
    4cc6:	89 c0       	rjmp	.+274    	; 0x4dda <realloc+0x1a4>
    4cc8:	5b 01       	movw	r10, r22
    4cca:	a0 1a       	sub	r10, r16
    4ccc:	b1 0a       	sbc	r11, r17
    4cce:	4c 01       	movw	r8, r24
    4cd0:	80 0e       	add	r8, r16
    4cd2:	91 1e       	adc	r9, r17
    4cd4:	a0 91 7f 34 	lds	r26, 0x347F	; 0x80347f <__flp>
    4cd8:	b0 91 80 34 	lds	r27, 0x3480	; 0x803480 <__flp+0x1>
    4cdc:	61 2c       	mov	r6, r1
    4cde:	71 2c       	mov	r7, r1
    4ce0:	e1 2c       	mov	r14, r1
    4ce2:	f1 2c       	mov	r15, r1
    4ce4:	10 97       	sbiw	r26, 0x00	; 0
    4ce6:	09 f4       	brne	.+2      	; 0x4cea <realloc+0xb4>
    4ce8:	46 c0       	rjmp	.+140    	; 0x4d76 <realloc+0x140>
    4cea:	8d 91       	ld	r24, X+
    4cec:	9c 91       	ld	r25, X
    4cee:	11 97       	sbiw	r26, 0x01	; 1
    4cf0:	a8 15       	cp	r26, r8
    4cf2:	b9 05       	cpc	r27, r9
    4cf4:	b1 f5       	brne	.+108    	; 0x4d62 <realloc+0x12c>
    4cf6:	6c 01       	movw	r12, r24
    4cf8:	42 e0       	ldi	r20, 0x02	; 2
    4cfa:	c4 0e       	add	r12, r20
    4cfc:	d1 1c       	adc	r13, r1
    4cfe:	ca 14       	cp	r12, r10
    4d00:	db 04       	cpc	r13, r11
    4d02:	78 f1       	brcs	.+94     	; 0x4d62 <realloc+0x12c>
    4d04:	4c 01       	movw	r8, r24
    4d06:	8a 18       	sub	r8, r10
    4d08:	9b 08       	sbc	r9, r11
    4d0a:	64 01       	movw	r12, r8
    4d0c:	42 e0       	ldi	r20, 0x02	; 2
    4d0e:	c4 0e       	add	r12, r20
    4d10:	d1 1c       	adc	r13, r1
    4d12:	12 96       	adiw	r26, 0x02	; 2
    4d14:	bc 90       	ld	r11, X
    4d16:	12 97       	sbiw	r26, 0x02	; 2
    4d18:	13 96       	adiw	r26, 0x03	; 3
    4d1a:	ac 91       	ld	r26, X
    4d1c:	b5 e0       	ldi	r27, 0x05	; 5
    4d1e:	cb 16       	cp	r12, r27
    4d20:	d1 04       	cpc	r13, r1
    4d22:	40 f0       	brcs	.+16     	; 0x4d34 <realloc+0xfe>
    4d24:	b2 82       	std	Z+2, r11	; 0x02
    4d26:	a3 83       	std	Z+3, r26	; 0x03
    4d28:	80 82       	st	Z, r8
    4d2a:	91 82       	std	Z+1, r9	; 0x01
    4d2c:	d9 01       	movw	r26, r18
    4d2e:	6d 93       	st	X+, r22
    4d30:	7c 93       	st	X, r23
    4d32:	09 c0       	rjmp	.+18     	; 0x4d46 <realloc+0x110>
    4d34:	0e 5f       	subi	r16, 0xFE	; 254
    4d36:	1f 4f       	sbci	r17, 0xFF	; 255
    4d38:	80 0f       	add	r24, r16
    4d3a:	91 1f       	adc	r25, r17
    4d3c:	f9 01       	movw	r30, r18
    4d3e:	80 83       	st	Z, r24
    4d40:	91 83       	std	Z+1, r25	; 0x01
    4d42:	eb 2d       	mov	r30, r11
    4d44:	fa 2f       	mov	r31, r26
    4d46:	e1 14       	cp	r14, r1
    4d48:	f1 04       	cpc	r15, r1
    4d4a:	31 f0       	breq	.+12     	; 0x4d58 <realloc+0x122>
    4d4c:	d7 01       	movw	r26, r14
    4d4e:	12 96       	adiw	r26, 0x02	; 2
    4d50:	ed 93       	st	X+, r30
    4d52:	fc 93       	st	X, r31
    4d54:	13 97       	sbiw	r26, 0x03	; 3
    4d56:	41 c0       	rjmp	.+130    	; 0x4dda <realloc+0x1a4>
    4d58:	e0 93 7f 34 	sts	0x347F, r30	; 0x80347f <__flp>
    4d5c:	f0 93 80 34 	sts	0x3480, r31	; 0x803480 <__flp+0x1>
    4d60:	3c c0       	rjmp	.+120    	; 0x4dda <realloc+0x1a4>
    4d62:	68 16       	cp	r6, r24
    4d64:	79 06       	cpc	r7, r25
    4d66:	08 f4       	brcc	.+2      	; 0x4d6a <realloc+0x134>
    4d68:	3c 01       	movw	r6, r24
    4d6a:	7d 01       	movw	r14, r26
    4d6c:	12 96       	adiw	r26, 0x02	; 2
    4d6e:	0d 90       	ld	r0, X+
    4d70:	bc 91       	ld	r27, X
    4d72:	a0 2d       	mov	r26, r0
    4d74:	b7 cf       	rjmp	.-146    	; 0x4ce4 <realloc+0xae>
    4d76:	80 91 7d 34 	lds	r24, 0x347D	; 0x80347d <__brkval>
    4d7a:	90 91 7e 34 	lds	r25, 0x347E	; 0x80347e <__brkval+0x1>
    4d7e:	88 16       	cp	r8, r24
    4d80:	99 06       	cpc	r9, r25
    4d82:	e1 f4       	brne	.+56     	; 0x4dbc <realloc+0x186>
    4d84:	66 16       	cp	r6, r22
    4d86:	77 06       	cpc	r7, r23
    4d88:	c8 f4       	brcc	.+50     	; 0x4dbc <realloc+0x186>
    4d8a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    4d8e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    4d92:	00 97       	sbiw	r24, 0x00	; 0
    4d94:	41 f4       	brne	.+16     	; 0x4da6 <realloc+0x170>
    4d96:	8d b7       	in	r24, 0x3d	; 61
    4d98:	9e b7       	in	r25, 0x3e	; 62
    4d9a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4d9e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4da2:	84 1b       	sub	r24, r20
    4da4:	95 0b       	sbc	r25, r21
    4da6:	e8 17       	cp	r30, r24
    4da8:	f9 07       	cpc	r31, r25
    4daa:	c8 f4       	brcc	.+50     	; 0x4dde <realloc+0x1a8>
    4dac:	e0 93 7d 34 	sts	0x347D, r30	; 0x80347d <__brkval>
    4db0:	f0 93 7e 34 	sts	0x347E, r31	; 0x80347e <__brkval+0x1>
    4db4:	f9 01       	movw	r30, r18
    4db6:	60 83       	st	Z, r22
    4db8:	71 83       	std	Z+1, r23	; 0x01
    4dba:	0f c0       	rjmp	.+30     	; 0x4dda <realloc+0x1a4>
    4dbc:	cb 01       	movw	r24, r22
    4dbe:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <malloc>
    4dc2:	7c 01       	movw	r14, r24
    4dc4:	00 97       	sbiw	r24, 0x00	; 0
    4dc6:	59 f0       	breq	.+22     	; 0x4dde <realloc+0x1a8>
    4dc8:	a8 01       	movw	r20, r16
    4dca:	be 01       	movw	r22, r28
    4dcc:	0e 94 00 27 	call	0x4e00	; 0x4e00 <memcpy>
    4dd0:	ce 01       	movw	r24, r28
    4dd2:	0e 94 92 25 	call	0x4b24	; 0x4b24 <free>
    4dd6:	c7 01       	movw	r24, r14
    4dd8:	04 c0       	rjmp	.+8      	; 0x4de2 <realloc+0x1ac>
    4dda:	ce 01       	movw	r24, r28
    4ddc:	02 c0       	rjmp	.+4      	; 0x4de2 <realloc+0x1ac>
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	df 91       	pop	r29
    4de4:	cf 91       	pop	r28
    4de6:	1f 91       	pop	r17
    4de8:	0f 91       	pop	r16
    4dea:	ff 90       	pop	r15
    4dec:	ef 90       	pop	r14
    4dee:	df 90       	pop	r13
    4df0:	cf 90       	pop	r12
    4df2:	bf 90       	pop	r11
    4df4:	af 90       	pop	r10
    4df6:	9f 90       	pop	r9
    4df8:	8f 90       	pop	r8
    4dfa:	7f 90       	pop	r7
    4dfc:	6f 90       	pop	r6
    4dfe:	08 95       	ret

00004e00 <memcpy>:
    4e00:	fb 01       	movw	r30, r22
    4e02:	dc 01       	movw	r26, r24
    4e04:	02 c0       	rjmp	.+4      	; 0x4e0a <memcpy+0xa>
    4e06:	01 90       	ld	r0, Z+
    4e08:	0d 92       	st	X+, r0
    4e0a:	41 50       	subi	r20, 0x01	; 1
    4e0c:	50 40       	sbci	r21, 0x00	; 0
    4e0e:	d8 f7       	brcc	.-10     	; 0x4e06 <memcpy+0x6>
    4e10:	08 95       	ret

00004e12 <memset>:
    4e12:	dc 01       	movw	r26, r24
    4e14:	01 c0       	rjmp	.+2      	; 0x4e18 <memset+0x6>
    4e16:	6d 93       	st	X+, r22
    4e18:	41 50       	subi	r20, 0x01	; 1
    4e1a:	50 40       	sbci	r21, 0x00	; 0
    4e1c:	e0 f7       	brcc	.-8      	; 0x4e16 <memset+0x4>
    4e1e:	08 95       	ret

00004e20 <strcpy>:
    4e20:	fb 01       	movw	r30, r22
    4e22:	dc 01       	movw	r26, r24
    4e24:	01 90       	ld	r0, Z+
    4e26:	0d 92       	st	X+, r0
    4e28:	00 20       	and	r0, r0
    4e2a:	e1 f7       	brne	.-8      	; 0x4e24 <strcpy+0x4>
    4e2c:	08 95       	ret

00004e2e <vfprintf>:
    4e2e:	2f 92       	push	r2
    4e30:	3f 92       	push	r3
    4e32:	4f 92       	push	r4
    4e34:	5f 92       	push	r5
    4e36:	6f 92       	push	r6
    4e38:	7f 92       	push	r7
    4e3a:	8f 92       	push	r8
    4e3c:	9f 92       	push	r9
    4e3e:	af 92       	push	r10
    4e40:	bf 92       	push	r11
    4e42:	cf 92       	push	r12
    4e44:	df 92       	push	r13
    4e46:	ef 92       	push	r14
    4e48:	ff 92       	push	r15
    4e4a:	0f 93       	push	r16
    4e4c:	1f 93       	push	r17
    4e4e:	cf 93       	push	r28
    4e50:	df 93       	push	r29
    4e52:	cd b7       	in	r28, 0x3d	; 61
    4e54:	de b7       	in	r29, 0x3e	; 62
    4e56:	2b 97       	sbiw	r28, 0x0b	; 11
    4e58:	cd bf       	out	0x3d, r28	; 61
    4e5a:	de bf       	out	0x3e, r29	; 62
    4e5c:	6c 01       	movw	r12, r24
    4e5e:	7b 01       	movw	r14, r22
    4e60:	8a 01       	movw	r16, r20
    4e62:	fc 01       	movw	r30, r24
    4e64:	16 82       	std	Z+6, r1	; 0x06
    4e66:	17 82       	std	Z+7, r1	; 0x07
    4e68:	83 81       	ldd	r24, Z+3	; 0x03
    4e6a:	81 ff       	sbrs	r24, 1
    4e6c:	cc c1       	rjmp	.+920    	; 0x5206 <vfprintf+0x3d8>
    4e6e:	ce 01       	movw	r24, r28
    4e70:	01 96       	adiw	r24, 0x01	; 1
    4e72:	3c 01       	movw	r6, r24
    4e74:	f6 01       	movw	r30, r12
    4e76:	93 81       	ldd	r25, Z+3	; 0x03
    4e78:	f7 01       	movw	r30, r14
    4e7a:	93 fd       	sbrc	r25, 3
    4e7c:	85 91       	lpm	r24, Z+
    4e7e:	93 ff       	sbrs	r25, 3
    4e80:	81 91       	ld	r24, Z+
    4e82:	7f 01       	movw	r14, r30
    4e84:	88 23       	and	r24, r24
    4e86:	09 f4       	brne	.+2      	; 0x4e8a <vfprintf+0x5c>
    4e88:	ba c1       	rjmp	.+884    	; 0x51fe <vfprintf+0x3d0>
    4e8a:	85 32       	cpi	r24, 0x25	; 37
    4e8c:	39 f4       	brne	.+14     	; 0x4e9c <vfprintf+0x6e>
    4e8e:	93 fd       	sbrc	r25, 3
    4e90:	85 91       	lpm	r24, Z+
    4e92:	93 ff       	sbrs	r25, 3
    4e94:	81 91       	ld	r24, Z+
    4e96:	7f 01       	movw	r14, r30
    4e98:	85 32       	cpi	r24, 0x25	; 37
    4e9a:	29 f4       	brne	.+10     	; 0x4ea6 <vfprintf+0x78>
    4e9c:	b6 01       	movw	r22, r12
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	0e 94 31 29 	call	0x5262	; 0x5262 <fputc>
    4ea4:	e7 cf       	rjmp	.-50     	; 0x4e74 <vfprintf+0x46>
    4ea6:	91 2c       	mov	r9, r1
    4ea8:	21 2c       	mov	r2, r1
    4eaa:	31 2c       	mov	r3, r1
    4eac:	ff e1       	ldi	r31, 0x1F	; 31
    4eae:	f3 15       	cp	r31, r3
    4eb0:	d8 f0       	brcs	.+54     	; 0x4ee8 <vfprintf+0xba>
    4eb2:	8b 32       	cpi	r24, 0x2B	; 43
    4eb4:	79 f0       	breq	.+30     	; 0x4ed4 <vfprintf+0xa6>
    4eb6:	38 f4       	brcc	.+14     	; 0x4ec6 <vfprintf+0x98>
    4eb8:	80 32       	cpi	r24, 0x20	; 32
    4eba:	79 f0       	breq	.+30     	; 0x4eda <vfprintf+0xac>
    4ebc:	83 32       	cpi	r24, 0x23	; 35
    4ebe:	a1 f4       	brne	.+40     	; 0x4ee8 <vfprintf+0xba>
    4ec0:	23 2d       	mov	r18, r3
    4ec2:	20 61       	ori	r18, 0x10	; 16
    4ec4:	1d c0       	rjmp	.+58     	; 0x4f00 <vfprintf+0xd2>
    4ec6:	8d 32       	cpi	r24, 0x2D	; 45
    4ec8:	61 f0       	breq	.+24     	; 0x4ee2 <vfprintf+0xb4>
    4eca:	80 33       	cpi	r24, 0x30	; 48
    4ecc:	69 f4       	brne	.+26     	; 0x4ee8 <vfprintf+0xba>
    4ece:	23 2d       	mov	r18, r3
    4ed0:	21 60       	ori	r18, 0x01	; 1
    4ed2:	16 c0       	rjmp	.+44     	; 0x4f00 <vfprintf+0xd2>
    4ed4:	83 2d       	mov	r24, r3
    4ed6:	82 60       	ori	r24, 0x02	; 2
    4ed8:	38 2e       	mov	r3, r24
    4eda:	e3 2d       	mov	r30, r3
    4edc:	e4 60       	ori	r30, 0x04	; 4
    4ede:	3e 2e       	mov	r3, r30
    4ee0:	2a c0       	rjmp	.+84     	; 0x4f36 <vfprintf+0x108>
    4ee2:	f3 2d       	mov	r31, r3
    4ee4:	f8 60       	ori	r31, 0x08	; 8
    4ee6:	1d c0       	rjmp	.+58     	; 0x4f22 <vfprintf+0xf4>
    4ee8:	37 fc       	sbrc	r3, 7
    4eea:	2d c0       	rjmp	.+90     	; 0x4f46 <vfprintf+0x118>
    4eec:	20 ed       	ldi	r18, 0xD0	; 208
    4eee:	28 0f       	add	r18, r24
    4ef0:	2a 30       	cpi	r18, 0x0A	; 10
    4ef2:	40 f0       	brcs	.+16     	; 0x4f04 <vfprintf+0xd6>
    4ef4:	8e 32       	cpi	r24, 0x2E	; 46
    4ef6:	b9 f4       	brne	.+46     	; 0x4f26 <vfprintf+0xf8>
    4ef8:	36 fc       	sbrc	r3, 6
    4efa:	81 c1       	rjmp	.+770    	; 0x51fe <vfprintf+0x3d0>
    4efc:	23 2d       	mov	r18, r3
    4efe:	20 64       	ori	r18, 0x40	; 64
    4f00:	32 2e       	mov	r3, r18
    4f02:	19 c0       	rjmp	.+50     	; 0x4f36 <vfprintf+0x108>
    4f04:	36 fe       	sbrs	r3, 6
    4f06:	06 c0       	rjmp	.+12     	; 0x4f14 <vfprintf+0xe6>
    4f08:	8a e0       	ldi	r24, 0x0A	; 10
    4f0a:	98 9e       	mul	r9, r24
    4f0c:	20 0d       	add	r18, r0
    4f0e:	11 24       	eor	r1, r1
    4f10:	92 2e       	mov	r9, r18
    4f12:	11 c0       	rjmp	.+34     	; 0x4f36 <vfprintf+0x108>
    4f14:	ea e0       	ldi	r30, 0x0A	; 10
    4f16:	2e 9e       	mul	r2, r30
    4f18:	20 0d       	add	r18, r0
    4f1a:	11 24       	eor	r1, r1
    4f1c:	22 2e       	mov	r2, r18
    4f1e:	f3 2d       	mov	r31, r3
    4f20:	f0 62       	ori	r31, 0x20	; 32
    4f22:	3f 2e       	mov	r3, r31
    4f24:	08 c0       	rjmp	.+16     	; 0x4f36 <vfprintf+0x108>
    4f26:	8c 36       	cpi	r24, 0x6C	; 108
    4f28:	21 f4       	brne	.+8      	; 0x4f32 <vfprintf+0x104>
    4f2a:	83 2d       	mov	r24, r3
    4f2c:	80 68       	ori	r24, 0x80	; 128
    4f2e:	38 2e       	mov	r3, r24
    4f30:	02 c0       	rjmp	.+4      	; 0x4f36 <vfprintf+0x108>
    4f32:	88 36       	cpi	r24, 0x68	; 104
    4f34:	41 f4       	brne	.+16     	; 0x4f46 <vfprintf+0x118>
    4f36:	f7 01       	movw	r30, r14
    4f38:	93 fd       	sbrc	r25, 3
    4f3a:	85 91       	lpm	r24, Z+
    4f3c:	93 ff       	sbrs	r25, 3
    4f3e:	81 91       	ld	r24, Z+
    4f40:	7f 01       	movw	r14, r30
    4f42:	81 11       	cpse	r24, r1
    4f44:	b3 cf       	rjmp	.-154    	; 0x4eac <vfprintf+0x7e>
    4f46:	98 2f       	mov	r25, r24
    4f48:	9f 7d       	andi	r25, 0xDF	; 223
    4f4a:	95 54       	subi	r25, 0x45	; 69
    4f4c:	93 30       	cpi	r25, 0x03	; 3
    4f4e:	28 f4       	brcc	.+10     	; 0x4f5a <vfprintf+0x12c>
    4f50:	0c 5f       	subi	r16, 0xFC	; 252
    4f52:	1f 4f       	sbci	r17, 0xFF	; 255
    4f54:	9f e3       	ldi	r25, 0x3F	; 63
    4f56:	99 83       	std	Y+1, r25	; 0x01
    4f58:	0d c0       	rjmp	.+26     	; 0x4f74 <vfprintf+0x146>
    4f5a:	83 36       	cpi	r24, 0x63	; 99
    4f5c:	31 f0       	breq	.+12     	; 0x4f6a <vfprintf+0x13c>
    4f5e:	83 37       	cpi	r24, 0x73	; 115
    4f60:	71 f0       	breq	.+28     	; 0x4f7e <vfprintf+0x150>
    4f62:	83 35       	cpi	r24, 0x53	; 83
    4f64:	09 f0       	breq	.+2      	; 0x4f68 <vfprintf+0x13a>
    4f66:	59 c0       	rjmp	.+178    	; 0x501a <vfprintf+0x1ec>
    4f68:	21 c0       	rjmp	.+66     	; 0x4fac <vfprintf+0x17e>
    4f6a:	f8 01       	movw	r30, r16
    4f6c:	80 81       	ld	r24, Z
    4f6e:	89 83       	std	Y+1, r24	; 0x01
    4f70:	0e 5f       	subi	r16, 0xFE	; 254
    4f72:	1f 4f       	sbci	r17, 0xFF	; 255
    4f74:	88 24       	eor	r8, r8
    4f76:	83 94       	inc	r8
    4f78:	91 2c       	mov	r9, r1
    4f7a:	53 01       	movw	r10, r6
    4f7c:	13 c0       	rjmp	.+38     	; 0x4fa4 <vfprintf+0x176>
    4f7e:	28 01       	movw	r4, r16
    4f80:	f2 e0       	ldi	r31, 0x02	; 2
    4f82:	4f 0e       	add	r4, r31
    4f84:	51 1c       	adc	r5, r1
    4f86:	f8 01       	movw	r30, r16
    4f88:	a0 80       	ld	r10, Z
    4f8a:	b1 80       	ldd	r11, Z+1	; 0x01
    4f8c:	36 fe       	sbrs	r3, 6
    4f8e:	03 c0       	rjmp	.+6      	; 0x4f96 <vfprintf+0x168>
    4f90:	69 2d       	mov	r22, r9
    4f92:	70 e0       	ldi	r23, 0x00	; 0
    4f94:	02 c0       	rjmp	.+4      	; 0x4f9a <vfprintf+0x16c>
    4f96:	6f ef       	ldi	r22, 0xFF	; 255
    4f98:	7f ef       	ldi	r23, 0xFF	; 255
    4f9a:	c5 01       	movw	r24, r10
    4f9c:	0e 94 26 29 	call	0x524c	; 0x524c <strnlen>
    4fa0:	4c 01       	movw	r8, r24
    4fa2:	82 01       	movw	r16, r4
    4fa4:	f3 2d       	mov	r31, r3
    4fa6:	ff 77       	andi	r31, 0x7F	; 127
    4fa8:	3f 2e       	mov	r3, r31
    4faa:	16 c0       	rjmp	.+44     	; 0x4fd8 <vfprintf+0x1aa>
    4fac:	28 01       	movw	r4, r16
    4fae:	22 e0       	ldi	r18, 0x02	; 2
    4fb0:	42 0e       	add	r4, r18
    4fb2:	51 1c       	adc	r5, r1
    4fb4:	f8 01       	movw	r30, r16
    4fb6:	a0 80       	ld	r10, Z
    4fb8:	b1 80       	ldd	r11, Z+1	; 0x01
    4fba:	36 fe       	sbrs	r3, 6
    4fbc:	03 c0       	rjmp	.+6      	; 0x4fc4 <vfprintf+0x196>
    4fbe:	69 2d       	mov	r22, r9
    4fc0:	70 e0       	ldi	r23, 0x00	; 0
    4fc2:	02 c0       	rjmp	.+4      	; 0x4fc8 <vfprintf+0x19a>
    4fc4:	6f ef       	ldi	r22, 0xFF	; 255
    4fc6:	7f ef       	ldi	r23, 0xFF	; 255
    4fc8:	c5 01       	movw	r24, r10
    4fca:	0e 94 1b 29 	call	0x5236	; 0x5236 <strnlen_P>
    4fce:	4c 01       	movw	r8, r24
    4fd0:	f3 2d       	mov	r31, r3
    4fd2:	f0 68       	ori	r31, 0x80	; 128
    4fd4:	3f 2e       	mov	r3, r31
    4fd6:	82 01       	movw	r16, r4
    4fd8:	33 fc       	sbrc	r3, 3
    4fda:	1b c0       	rjmp	.+54     	; 0x5012 <vfprintf+0x1e4>
    4fdc:	82 2d       	mov	r24, r2
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	88 16       	cp	r8, r24
    4fe2:	99 06       	cpc	r9, r25
    4fe4:	b0 f4       	brcc	.+44     	; 0x5012 <vfprintf+0x1e4>
    4fe6:	b6 01       	movw	r22, r12
    4fe8:	80 e2       	ldi	r24, 0x20	; 32
    4fea:	90 e0       	ldi	r25, 0x00	; 0
    4fec:	0e 94 31 29 	call	0x5262	; 0x5262 <fputc>
    4ff0:	2a 94       	dec	r2
    4ff2:	f4 cf       	rjmp	.-24     	; 0x4fdc <vfprintf+0x1ae>
    4ff4:	f5 01       	movw	r30, r10
    4ff6:	37 fc       	sbrc	r3, 7
    4ff8:	85 91       	lpm	r24, Z+
    4ffa:	37 fe       	sbrs	r3, 7
    4ffc:	81 91       	ld	r24, Z+
    4ffe:	5f 01       	movw	r10, r30
    5000:	b6 01       	movw	r22, r12
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	0e 94 31 29 	call	0x5262	; 0x5262 <fputc>
    5008:	21 10       	cpse	r2, r1
    500a:	2a 94       	dec	r2
    500c:	21 e0       	ldi	r18, 0x01	; 1
    500e:	82 1a       	sub	r8, r18
    5010:	91 08       	sbc	r9, r1
    5012:	81 14       	cp	r8, r1
    5014:	91 04       	cpc	r9, r1
    5016:	71 f7       	brne	.-36     	; 0x4ff4 <vfprintf+0x1c6>
    5018:	e8 c0       	rjmp	.+464    	; 0x51ea <vfprintf+0x3bc>
    501a:	84 36       	cpi	r24, 0x64	; 100
    501c:	11 f0       	breq	.+4      	; 0x5022 <vfprintf+0x1f4>
    501e:	89 36       	cpi	r24, 0x69	; 105
    5020:	41 f5       	brne	.+80     	; 0x5072 <vfprintf+0x244>
    5022:	f8 01       	movw	r30, r16
    5024:	37 fe       	sbrs	r3, 7
    5026:	07 c0       	rjmp	.+14     	; 0x5036 <vfprintf+0x208>
    5028:	60 81       	ld	r22, Z
    502a:	71 81       	ldd	r23, Z+1	; 0x01
    502c:	82 81       	ldd	r24, Z+2	; 0x02
    502e:	93 81       	ldd	r25, Z+3	; 0x03
    5030:	0c 5f       	subi	r16, 0xFC	; 252
    5032:	1f 4f       	sbci	r17, 0xFF	; 255
    5034:	08 c0       	rjmp	.+16     	; 0x5046 <vfprintf+0x218>
    5036:	60 81       	ld	r22, Z
    5038:	71 81       	ldd	r23, Z+1	; 0x01
    503a:	07 2e       	mov	r0, r23
    503c:	00 0c       	add	r0, r0
    503e:	88 0b       	sbc	r24, r24
    5040:	99 0b       	sbc	r25, r25
    5042:	0e 5f       	subi	r16, 0xFE	; 254
    5044:	1f 4f       	sbci	r17, 0xFF	; 255
    5046:	f3 2d       	mov	r31, r3
    5048:	ff 76       	andi	r31, 0x6F	; 111
    504a:	3f 2e       	mov	r3, r31
    504c:	97 ff       	sbrs	r25, 7
    504e:	09 c0       	rjmp	.+18     	; 0x5062 <vfprintf+0x234>
    5050:	90 95       	com	r25
    5052:	80 95       	com	r24
    5054:	70 95       	com	r23
    5056:	61 95       	neg	r22
    5058:	7f 4f       	sbci	r23, 0xFF	; 255
    505a:	8f 4f       	sbci	r24, 0xFF	; 255
    505c:	9f 4f       	sbci	r25, 0xFF	; 255
    505e:	f0 68       	ori	r31, 0x80	; 128
    5060:	3f 2e       	mov	r3, r31
    5062:	2a e0       	ldi	r18, 0x0A	; 10
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	a3 01       	movw	r20, r6
    5068:	0e 94 6d 29 	call	0x52da	; 0x52da <__ultoa_invert>
    506c:	88 2e       	mov	r8, r24
    506e:	86 18       	sub	r8, r6
    5070:	45 c0       	rjmp	.+138    	; 0x50fc <vfprintf+0x2ce>
    5072:	85 37       	cpi	r24, 0x75	; 117
    5074:	31 f4       	brne	.+12     	; 0x5082 <vfprintf+0x254>
    5076:	23 2d       	mov	r18, r3
    5078:	2f 7e       	andi	r18, 0xEF	; 239
    507a:	b2 2e       	mov	r11, r18
    507c:	2a e0       	ldi	r18, 0x0A	; 10
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	25 c0       	rjmp	.+74     	; 0x50cc <vfprintf+0x29e>
    5082:	93 2d       	mov	r25, r3
    5084:	99 7f       	andi	r25, 0xF9	; 249
    5086:	b9 2e       	mov	r11, r25
    5088:	8f 36       	cpi	r24, 0x6F	; 111
    508a:	c1 f0       	breq	.+48     	; 0x50bc <vfprintf+0x28e>
    508c:	18 f4       	brcc	.+6      	; 0x5094 <vfprintf+0x266>
    508e:	88 35       	cpi	r24, 0x58	; 88
    5090:	79 f0       	breq	.+30     	; 0x50b0 <vfprintf+0x282>
    5092:	b5 c0       	rjmp	.+362    	; 0x51fe <vfprintf+0x3d0>
    5094:	80 37       	cpi	r24, 0x70	; 112
    5096:	19 f0       	breq	.+6      	; 0x509e <vfprintf+0x270>
    5098:	88 37       	cpi	r24, 0x78	; 120
    509a:	21 f0       	breq	.+8      	; 0x50a4 <vfprintf+0x276>
    509c:	b0 c0       	rjmp	.+352    	; 0x51fe <vfprintf+0x3d0>
    509e:	e9 2f       	mov	r30, r25
    50a0:	e0 61       	ori	r30, 0x10	; 16
    50a2:	be 2e       	mov	r11, r30
    50a4:	b4 fe       	sbrs	r11, 4
    50a6:	0d c0       	rjmp	.+26     	; 0x50c2 <vfprintf+0x294>
    50a8:	fb 2d       	mov	r31, r11
    50aa:	f4 60       	ori	r31, 0x04	; 4
    50ac:	bf 2e       	mov	r11, r31
    50ae:	09 c0       	rjmp	.+18     	; 0x50c2 <vfprintf+0x294>
    50b0:	34 fe       	sbrs	r3, 4
    50b2:	0a c0       	rjmp	.+20     	; 0x50c8 <vfprintf+0x29a>
    50b4:	29 2f       	mov	r18, r25
    50b6:	26 60       	ori	r18, 0x06	; 6
    50b8:	b2 2e       	mov	r11, r18
    50ba:	06 c0       	rjmp	.+12     	; 0x50c8 <vfprintf+0x29a>
    50bc:	28 e0       	ldi	r18, 0x08	; 8
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	05 c0       	rjmp	.+10     	; 0x50cc <vfprintf+0x29e>
    50c2:	20 e1       	ldi	r18, 0x10	; 16
    50c4:	30 e0       	ldi	r19, 0x00	; 0
    50c6:	02 c0       	rjmp	.+4      	; 0x50cc <vfprintf+0x29e>
    50c8:	20 e1       	ldi	r18, 0x10	; 16
    50ca:	32 e0       	ldi	r19, 0x02	; 2
    50cc:	f8 01       	movw	r30, r16
    50ce:	b7 fe       	sbrs	r11, 7
    50d0:	07 c0       	rjmp	.+14     	; 0x50e0 <vfprintf+0x2b2>
    50d2:	60 81       	ld	r22, Z
    50d4:	71 81       	ldd	r23, Z+1	; 0x01
    50d6:	82 81       	ldd	r24, Z+2	; 0x02
    50d8:	93 81       	ldd	r25, Z+3	; 0x03
    50da:	0c 5f       	subi	r16, 0xFC	; 252
    50dc:	1f 4f       	sbci	r17, 0xFF	; 255
    50de:	06 c0       	rjmp	.+12     	; 0x50ec <vfprintf+0x2be>
    50e0:	60 81       	ld	r22, Z
    50e2:	71 81       	ldd	r23, Z+1	; 0x01
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	0e 5f       	subi	r16, 0xFE	; 254
    50ea:	1f 4f       	sbci	r17, 0xFF	; 255
    50ec:	a3 01       	movw	r20, r6
    50ee:	0e 94 6d 29 	call	0x52da	; 0x52da <__ultoa_invert>
    50f2:	88 2e       	mov	r8, r24
    50f4:	86 18       	sub	r8, r6
    50f6:	fb 2d       	mov	r31, r11
    50f8:	ff 77       	andi	r31, 0x7F	; 127
    50fa:	3f 2e       	mov	r3, r31
    50fc:	36 fe       	sbrs	r3, 6
    50fe:	0d c0       	rjmp	.+26     	; 0x511a <vfprintf+0x2ec>
    5100:	23 2d       	mov	r18, r3
    5102:	2e 7f       	andi	r18, 0xFE	; 254
    5104:	a2 2e       	mov	r10, r18
    5106:	89 14       	cp	r8, r9
    5108:	58 f4       	brcc	.+22     	; 0x5120 <vfprintf+0x2f2>
    510a:	34 fe       	sbrs	r3, 4
    510c:	0b c0       	rjmp	.+22     	; 0x5124 <vfprintf+0x2f6>
    510e:	32 fc       	sbrc	r3, 2
    5110:	09 c0       	rjmp	.+18     	; 0x5124 <vfprintf+0x2f6>
    5112:	83 2d       	mov	r24, r3
    5114:	8e 7e       	andi	r24, 0xEE	; 238
    5116:	a8 2e       	mov	r10, r24
    5118:	05 c0       	rjmp	.+10     	; 0x5124 <vfprintf+0x2f6>
    511a:	b8 2c       	mov	r11, r8
    511c:	a3 2c       	mov	r10, r3
    511e:	03 c0       	rjmp	.+6      	; 0x5126 <vfprintf+0x2f8>
    5120:	b8 2c       	mov	r11, r8
    5122:	01 c0       	rjmp	.+2      	; 0x5126 <vfprintf+0x2f8>
    5124:	b9 2c       	mov	r11, r9
    5126:	a4 fe       	sbrs	r10, 4
    5128:	0f c0       	rjmp	.+30     	; 0x5148 <vfprintf+0x31a>
    512a:	fe 01       	movw	r30, r28
    512c:	e8 0d       	add	r30, r8
    512e:	f1 1d       	adc	r31, r1
    5130:	80 81       	ld	r24, Z
    5132:	80 33       	cpi	r24, 0x30	; 48
    5134:	21 f4       	brne	.+8      	; 0x513e <vfprintf+0x310>
    5136:	9a 2d       	mov	r25, r10
    5138:	99 7e       	andi	r25, 0xE9	; 233
    513a:	a9 2e       	mov	r10, r25
    513c:	09 c0       	rjmp	.+18     	; 0x5150 <vfprintf+0x322>
    513e:	a2 fe       	sbrs	r10, 2
    5140:	06 c0       	rjmp	.+12     	; 0x514e <vfprintf+0x320>
    5142:	b3 94       	inc	r11
    5144:	b3 94       	inc	r11
    5146:	04 c0       	rjmp	.+8      	; 0x5150 <vfprintf+0x322>
    5148:	8a 2d       	mov	r24, r10
    514a:	86 78       	andi	r24, 0x86	; 134
    514c:	09 f0       	breq	.+2      	; 0x5150 <vfprintf+0x322>
    514e:	b3 94       	inc	r11
    5150:	a3 fc       	sbrc	r10, 3
    5152:	11 c0       	rjmp	.+34     	; 0x5176 <vfprintf+0x348>
    5154:	a0 fe       	sbrs	r10, 0
    5156:	06 c0       	rjmp	.+12     	; 0x5164 <vfprintf+0x336>
    5158:	b2 14       	cp	r11, r2
    515a:	88 f4       	brcc	.+34     	; 0x517e <vfprintf+0x350>
    515c:	28 0c       	add	r2, r8
    515e:	92 2c       	mov	r9, r2
    5160:	9b 18       	sub	r9, r11
    5162:	0e c0       	rjmp	.+28     	; 0x5180 <vfprintf+0x352>
    5164:	b2 14       	cp	r11, r2
    5166:	60 f4       	brcc	.+24     	; 0x5180 <vfprintf+0x352>
    5168:	b6 01       	movw	r22, r12
    516a:	80 e2       	ldi	r24, 0x20	; 32
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	0e 94 31 29 	call	0x5262	; 0x5262 <fputc>
    5172:	b3 94       	inc	r11
    5174:	f7 cf       	rjmp	.-18     	; 0x5164 <vfprintf+0x336>
    5176:	b2 14       	cp	r11, r2
    5178:	18 f4       	brcc	.+6      	; 0x5180 <vfprintf+0x352>
    517a:	2b 18       	sub	r2, r11
    517c:	02 c0       	rjmp	.+4      	; 0x5182 <vfprintf+0x354>
    517e:	98 2c       	mov	r9, r8
    5180:	21 2c       	mov	r2, r1
    5182:	a4 fe       	sbrs	r10, 4
    5184:	10 c0       	rjmp	.+32     	; 0x51a6 <vfprintf+0x378>
    5186:	b6 01       	movw	r22, r12
    5188:	80 e3       	ldi	r24, 0x30	; 48
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	0e 94 31 29 	call	0x5262	; 0x5262 <fputc>
    5190:	a2 fe       	sbrs	r10, 2
    5192:	17 c0       	rjmp	.+46     	; 0x51c2 <vfprintf+0x394>
    5194:	a1 fc       	sbrc	r10, 1
    5196:	03 c0       	rjmp	.+6      	; 0x519e <vfprintf+0x370>
    5198:	88 e7       	ldi	r24, 0x78	; 120
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	02 c0       	rjmp	.+4      	; 0x51a2 <vfprintf+0x374>
    519e:	88 e5       	ldi	r24, 0x58	; 88
    51a0:	90 e0       	ldi	r25, 0x00	; 0
    51a2:	b6 01       	movw	r22, r12
    51a4:	0c c0       	rjmp	.+24     	; 0x51be <vfprintf+0x390>
    51a6:	8a 2d       	mov	r24, r10
    51a8:	86 78       	andi	r24, 0x86	; 134
    51aa:	59 f0       	breq	.+22     	; 0x51c2 <vfprintf+0x394>
    51ac:	a1 fe       	sbrs	r10, 1
    51ae:	02 c0       	rjmp	.+4      	; 0x51b4 <vfprintf+0x386>
    51b0:	8b e2       	ldi	r24, 0x2B	; 43
    51b2:	01 c0       	rjmp	.+2      	; 0x51b6 <vfprintf+0x388>
    51b4:	80 e2       	ldi	r24, 0x20	; 32
    51b6:	a7 fc       	sbrc	r10, 7
    51b8:	8d e2       	ldi	r24, 0x2D	; 45
    51ba:	b6 01       	movw	r22, r12
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	0e 94 31 29 	call	0x5262	; 0x5262 <fputc>
    51c2:	89 14       	cp	r8, r9
    51c4:	38 f4       	brcc	.+14     	; 0x51d4 <vfprintf+0x3a6>
    51c6:	b6 01       	movw	r22, r12
    51c8:	80 e3       	ldi	r24, 0x30	; 48
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	0e 94 31 29 	call	0x5262	; 0x5262 <fputc>
    51d0:	9a 94       	dec	r9
    51d2:	f7 cf       	rjmp	.-18     	; 0x51c2 <vfprintf+0x394>
    51d4:	8a 94       	dec	r8
    51d6:	f3 01       	movw	r30, r6
    51d8:	e8 0d       	add	r30, r8
    51da:	f1 1d       	adc	r31, r1
    51dc:	80 81       	ld	r24, Z
    51de:	b6 01       	movw	r22, r12
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	0e 94 31 29 	call	0x5262	; 0x5262 <fputc>
    51e6:	81 10       	cpse	r8, r1
    51e8:	f5 cf       	rjmp	.-22     	; 0x51d4 <vfprintf+0x3a6>
    51ea:	22 20       	and	r2, r2
    51ec:	09 f4       	brne	.+2      	; 0x51f0 <vfprintf+0x3c2>
    51ee:	42 ce       	rjmp	.-892    	; 0x4e74 <vfprintf+0x46>
    51f0:	b6 01       	movw	r22, r12
    51f2:	80 e2       	ldi	r24, 0x20	; 32
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	0e 94 31 29 	call	0x5262	; 0x5262 <fputc>
    51fa:	2a 94       	dec	r2
    51fc:	f6 cf       	rjmp	.-20     	; 0x51ea <vfprintf+0x3bc>
    51fe:	f6 01       	movw	r30, r12
    5200:	86 81       	ldd	r24, Z+6	; 0x06
    5202:	97 81       	ldd	r25, Z+7	; 0x07
    5204:	02 c0       	rjmp	.+4      	; 0x520a <vfprintf+0x3dc>
    5206:	8f ef       	ldi	r24, 0xFF	; 255
    5208:	9f ef       	ldi	r25, 0xFF	; 255
    520a:	2b 96       	adiw	r28, 0x0b	; 11
    520c:	cd bf       	out	0x3d, r28	; 61
    520e:	de bf       	out	0x3e, r29	; 62
    5210:	df 91       	pop	r29
    5212:	cf 91       	pop	r28
    5214:	1f 91       	pop	r17
    5216:	0f 91       	pop	r16
    5218:	ff 90       	pop	r15
    521a:	ef 90       	pop	r14
    521c:	df 90       	pop	r13
    521e:	cf 90       	pop	r12
    5220:	bf 90       	pop	r11
    5222:	af 90       	pop	r10
    5224:	9f 90       	pop	r9
    5226:	8f 90       	pop	r8
    5228:	7f 90       	pop	r7
    522a:	6f 90       	pop	r6
    522c:	5f 90       	pop	r5
    522e:	4f 90       	pop	r4
    5230:	3f 90       	pop	r3
    5232:	2f 90       	pop	r2
    5234:	08 95       	ret

00005236 <strnlen_P>:
    5236:	fc 01       	movw	r30, r24
    5238:	05 90       	lpm	r0, Z+
    523a:	61 50       	subi	r22, 0x01	; 1
    523c:	70 40       	sbci	r23, 0x00	; 0
    523e:	01 10       	cpse	r0, r1
    5240:	d8 f7       	brcc	.-10     	; 0x5238 <strnlen_P+0x2>
    5242:	80 95       	com	r24
    5244:	90 95       	com	r25
    5246:	8e 0f       	add	r24, r30
    5248:	9f 1f       	adc	r25, r31
    524a:	08 95       	ret

0000524c <strnlen>:
    524c:	fc 01       	movw	r30, r24
    524e:	61 50       	subi	r22, 0x01	; 1
    5250:	70 40       	sbci	r23, 0x00	; 0
    5252:	01 90       	ld	r0, Z+
    5254:	01 10       	cpse	r0, r1
    5256:	d8 f7       	brcc	.-10     	; 0x524e <strnlen+0x2>
    5258:	80 95       	com	r24
    525a:	90 95       	com	r25
    525c:	8e 0f       	add	r24, r30
    525e:	9f 1f       	adc	r25, r31
    5260:	08 95       	ret

00005262 <fputc>:
    5262:	0f 93       	push	r16
    5264:	1f 93       	push	r17
    5266:	cf 93       	push	r28
    5268:	df 93       	push	r29
    526a:	fb 01       	movw	r30, r22
    526c:	23 81       	ldd	r18, Z+3	; 0x03
    526e:	21 fd       	sbrc	r18, 1
    5270:	03 c0       	rjmp	.+6      	; 0x5278 <fputc+0x16>
    5272:	8f ef       	ldi	r24, 0xFF	; 255
    5274:	9f ef       	ldi	r25, 0xFF	; 255
    5276:	2c c0       	rjmp	.+88     	; 0x52d0 <fputc+0x6e>
    5278:	22 ff       	sbrs	r18, 2
    527a:	16 c0       	rjmp	.+44     	; 0x52a8 <fputc+0x46>
    527c:	46 81       	ldd	r20, Z+6	; 0x06
    527e:	57 81       	ldd	r21, Z+7	; 0x07
    5280:	24 81       	ldd	r18, Z+4	; 0x04
    5282:	35 81       	ldd	r19, Z+5	; 0x05
    5284:	42 17       	cp	r20, r18
    5286:	53 07       	cpc	r21, r19
    5288:	44 f4       	brge	.+16     	; 0x529a <fputc+0x38>
    528a:	a0 81       	ld	r26, Z
    528c:	b1 81       	ldd	r27, Z+1	; 0x01
    528e:	9d 01       	movw	r18, r26
    5290:	2f 5f       	subi	r18, 0xFF	; 255
    5292:	3f 4f       	sbci	r19, 0xFF	; 255
    5294:	20 83       	st	Z, r18
    5296:	31 83       	std	Z+1, r19	; 0x01
    5298:	8c 93       	st	X, r24
    529a:	26 81       	ldd	r18, Z+6	; 0x06
    529c:	37 81       	ldd	r19, Z+7	; 0x07
    529e:	2f 5f       	subi	r18, 0xFF	; 255
    52a0:	3f 4f       	sbci	r19, 0xFF	; 255
    52a2:	26 83       	std	Z+6, r18	; 0x06
    52a4:	37 83       	std	Z+7, r19	; 0x07
    52a6:	14 c0       	rjmp	.+40     	; 0x52d0 <fputc+0x6e>
    52a8:	8b 01       	movw	r16, r22
    52aa:	ec 01       	movw	r28, r24
    52ac:	fb 01       	movw	r30, r22
    52ae:	00 84       	ldd	r0, Z+8	; 0x08
    52b0:	f1 85       	ldd	r31, Z+9	; 0x09
    52b2:	e0 2d       	mov	r30, r0
    52b4:	19 95       	eicall
    52b6:	89 2b       	or	r24, r25
    52b8:	e1 f6       	brne	.-72     	; 0x5272 <fputc+0x10>
    52ba:	d8 01       	movw	r26, r16
    52bc:	16 96       	adiw	r26, 0x06	; 6
    52be:	8d 91       	ld	r24, X+
    52c0:	9c 91       	ld	r25, X
    52c2:	17 97       	sbiw	r26, 0x07	; 7
    52c4:	01 96       	adiw	r24, 0x01	; 1
    52c6:	16 96       	adiw	r26, 0x06	; 6
    52c8:	8d 93       	st	X+, r24
    52ca:	9c 93       	st	X, r25
    52cc:	17 97       	sbiw	r26, 0x07	; 7
    52ce:	ce 01       	movw	r24, r28
    52d0:	df 91       	pop	r29
    52d2:	cf 91       	pop	r28
    52d4:	1f 91       	pop	r17
    52d6:	0f 91       	pop	r16
    52d8:	08 95       	ret

000052da <__ultoa_invert>:
    52da:	fa 01       	movw	r30, r20
    52dc:	aa 27       	eor	r26, r26
    52de:	28 30       	cpi	r18, 0x08	; 8
    52e0:	51 f1       	breq	.+84     	; 0x5336 <__ultoa_invert+0x5c>
    52e2:	20 31       	cpi	r18, 0x10	; 16
    52e4:	81 f1       	breq	.+96     	; 0x5346 <__ultoa_invert+0x6c>
    52e6:	e8 94       	clt
    52e8:	6f 93       	push	r22
    52ea:	6e 7f       	andi	r22, 0xFE	; 254
    52ec:	6e 5f       	subi	r22, 0xFE	; 254
    52ee:	7f 4f       	sbci	r23, 0xFF	; 255
    52f0:	8f 4f       	sbci	r24, 0xFF	; 255
    52f2:	9f 4f       	sbci	r25, 0xFF	; 255
    52f4:	af 4f       	sbci	r26, 0xFF	; 255
    52f6:	b1 e0       	ldi	r27, 0x01	; 1
    52f8:	3e d0       	rcall	.+124    	; 0x5376 <__ultoa_invert+0x9c>
    52fa:	b4 e0       	ldi	r27, 0x04	; 4
    52fc:	3c d0       	rcall	.+120    	; 0x5376 <__ultoa_invert+0x9c>
    52fe:	67 0f       	add	r22, r23
    5300:	78 1f       	adc	r23, r24
    5302:	89 1f       	adc	r24, r25
    5304:	9a 1f       	adc	r25, r26
    5306:	a1 1d       	adc	r26, r1
    5308:	68 0f       	add	r22, r24
    530a:	79 1f       	adc	r23, r25
    530c:	8a 1f       	adc	r24, r26
    530e:	91 1d       	adc	r25, r1
    5310:	a1 1d       	adc	r26, r1
    5312:	6a 0f       	add	r22, r26
    5314:	71 1d       	adc	r23, r1
    5316:	81 1d       	adc	r24, r1
    5318:	91 1d       	adc	r25, r1
    531a:	a1 1d       	adc	r26, r1
    531c:	20 d0       	rcall	.+64     	; 0x535e <__ultoa_invert+0x84>
    531e:	09 f4       	brne	.+2      	; 0x5322 <__ultoa_invert+0x48>
    5320:	68 94       	set
    5322:	3f 91       	pop	r19
    5324:	2a e0       	ldi	r18, 0x0A	; 10
    5326:	26 9f       	mul	r18, r22
    5328:	11 24       	eor	r1, r1
    532a:	30 19       	sub	r19, r0
    532c:	30 5d       	subi	r19, 0xD0	; 208
    532e:	31 93       	st	Z+, r19
    5330:	de f6       	brtc	.-74     	; 0x52e8 <__ultoa_invert+0xe>
    5332:	cf 01       	movw	r24, r30
    5334:	08 95       	ret
    5336:	46 2f       	mov	r20, r22
    5338:	47 70       	andi	r20, 0x07	; 7
    533a:	40 5d       	subi	r20, 0xD0	; 208
    533c:	41 93       	st	Z+, r20
    533e:	b3 e0       	ldi	r27, 0x03	; 3
    5340:	0f d0       	rcall	.+30     	; 0x5360 <__ultoa_invert+0x86>
    5342:	c9 f7       	brne	.-14     	; 0x5336 <__ultoa_invert+0x5c>
    5344:	f6 cf       	rjmp	.-20     	; 0x5332 <__ultoa_invert+0x58>
    5346:	46 2f       	mov	r20, r22
    5348:	4f 70       	andi	r20, 0x0F	; 15
    534a:	40 5d       	subi	r20, 0xD0	; 208
    534c:	4a 33       	cpi	r20, 0x3A	; 58
    534e:	18 f0       	brcs	.+6      	; 0x5356 <__ultoa_invert+0x7c>
    5350:	49 5d       	subi	r20, 0xD9	; 217
    5352:	31 fd       	sbrc	r19, 1
    5354:	40 52       	subi	r20, 0x20	; 32
    5356:	41 93       	st	Z+, r20
    5358:	02 d0       	rcall	.+4      	; 0x535e <__ultoa_invert+0x84>
    535a:	a9 f7       	brne	.-22     	; 0x5346 <__ultoa_invert+0x6c>
    535c:	ea cf       	rjmp	.-44     	; 0x5332 <__ultoa_invert+0x58>
    535e:	b4 e0       	ldi	r27, 0x04	; 4
    5360:	a6 95       	lsr	r26
    5362:	97 95       	ror	r25
    5364:	87 95       	ror	r24
    5366:	77 95       	ror	r23
    5368:	67 95       	ror	r22
    536a:	ba 95       	dec	r27
    536c:	c9 f7       	brne	.-14     	; 0x5360 <__ultoa_invert+0x86>
    536e:	00 97       	sbiw	r24, 0x00	; 0
    5370:	61 05       	cpc	r22, r1
    5372:	71 05       	cpc	r23, r1
    5374:	08 95       	ret
    5376:	9b 01       	movw	r18, r22
    5378:	ac 01       	movw	r20, r24
    537a:	0a 2e       	mov	r0, r26
    537c:	06 94       	lsr	r0
    537e:	57 95       	ror	r21
    5380:	47 95       	ror	r20
    5382:	37 95       	ror	r19
    5384:	27 95       	ror	r18
    5386:	ba 95       	dec	r27
    5388:	c9 f7       	brne	.-14     	; 0x537c <__ultoa_invert+0xa2>
    538a:	62 0f       	add	r22, r18
    538c:	73 1f       	adc	r23, r19
    538e:	84 1f       	adc	r24, r20
    5390:	95 1f       	adc	r25, r21
    5392:	a0 1d       	adc	r26, r0
    5394:	08 95       	ret

00005396 <_exit>:
    5396:	f8 94       	cli

00005398 <__stop_program>:
    5398:	ff cf       	rjmp	.-2      	; 0x5398 <__stop_program>
